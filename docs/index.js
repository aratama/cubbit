(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],3:[function(require,module,exports){
(function (process){
// Generated by psc-bundle 0.10.3
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqVoid"] = eqVoid;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $23 = compare(dictOrd)(a1)(a2);
              if ($23 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $27 = compare(dictOrd)(x)(y);
              if ($27 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($27 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($27 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ $27.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($33) {
                  return x;
              };
              if (!$33) {
                  return Data_Ring.negate(dictRing)(x);
              };
              throw new Error("Failed pattern match at Data.Ord line 158, column 9 - line 158, column 42: " + [ $33.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["abs"] = abs;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordVoid"] = ordVoid;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($32) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($32)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Const = PS["Data.Const"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var ApF = (function () {
      function ApF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ApF.create = function (value0) {
          return function (value1) {
              return new ApF(value0, value1);
          };
      };
      return ApF;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Ap = (function () {
      function Ap(value0) {
          this.value0 = value0;
      };
      Ap.create = function (value0) {
          return new Ap(value0);
      };
      return Ap;
  })();
  var retractFreeAp = function (dictApplicative) {
      return function (v) {
          if (v instanceof Pure) {
              return Control_Applicative.pure(dictApplicative)(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(retractFreeAp(dictApplicative)(v1.value1(Data_Unit.unit)))(v1.value0(Data_Unit.unit));
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 33, column 1 - line 33, column 32: " + [ v.constructor.name ]);
      };
  };
  var ap = function (v) {
      return function (k) {
          return new Ap(Data_Exists.mkExists(new ApF(v, k)));
      };
  };              
  var hoistFreeAp = function (k) {
      return function (v) {
          if (v instanceof Pure) {
              return new Pure(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return ap(function (v3) {
                      return k(v1.value0(Data_Unit.unit));
                  })(function (v3) {
                      return hoistFreeAp(k)(v1.value1(Data_Unit.unit));
                  });
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 45, column 1 - line 45, column 32: " + [ k.constructor.name, v.constructor.name ]);
      };
  };
  exports["hoistFreeAp"] = hoistFreeAp;
  exports["retractFreeAp"] = retractFreeAp;
})(PS["Control.Applicative.Free"] = PS["Control.Applicative.Free"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 3 - line 126, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 126, column 3 - line 126, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 124, column 3 - line 124, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 122, column 3 - line 122, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)))(p);
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["any"] = any;
  exports["find"] = find;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["sequence_"] = sequence_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]()))(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 3 - line 35, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 224, column 1 - line 224, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 42, column 3 - line 42, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 78, column 3 - line 78, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["readSTRef"] = $foreign.readSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = Partial_Unsafe.unsafePartial(function (dictPartial) {
              return function (v) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar15) {
                          return $dollar15;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (v instanceof Done) {
                          return v.value0;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 28 - line 130, column 42: " + [ v.constructor.name ]);
                  })());
              };
          });
          var f$prime = function ($47) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($47));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Loop) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($94) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($94));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 53, column 3 - line 53, column 69: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var $76 = v1.value0(Data_Unit.unit);
                      if ($76 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($76.value0(Data_Unit.unit))(function (v2) {
                              if (v2 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(v1.value1(v2.value0)));
                              };
                              if (v2 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(h)(v1.value1);
                                  })(v2.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 47, column 20 - line 49, column 67: " + [ v2.constructor.name ]);
                          });
                      };
                      if ($76 instanceof Bind) {
                          return Data_Exists.runExists(function (v2) {
                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value1(z))(v1.value1);
                              })));
                          })($76.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 45, column 5 - line 50, column 98: " + [ $76.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 43, column 3 - line 43, column 35: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 101, column 3 - line 101, column 30: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 75, column 15 - line 77, column 25: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["freeT"] = freeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadState = function (__superclass_Control$dotMonad$dotMonad_0, state) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  exports["MonadState"] = MonadState;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($87) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($87));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function ($88) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($88));
              })(function (a) {
                  var $56 = k(a);
                  return $56;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($89) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($89)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function (a) {
                  var $60 = k(a);
                  return $60;
              })(function ($91) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($91));
              }));
          };
      }, function ($92) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($92)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["except"] = except;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                                 
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Parallel = function (__superclass_Control$dotApplicative$dotApplicative_1, __superclass_Control$dotMonad$dotMonad_0, parallel, sequential) {
      this["__superclass_Control.Applicative.Applicative_1"] = __superclass_Control$dotApplicative$dotApplicative_1;
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($8) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel["__superclass_Control.Applicative.Applicative_1"]())(dictFoldable)(function ($9) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($9));
                  })($8));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictTraversable) {
          return parTraverse_(dictParallel)(dictTraversable["__superclass_Data.Foldable.Foldable_1"]())(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
  exports["parTraverse_"] = parTraverse_;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Parallel = PS["Control.Parallel"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Category = PS["Control.Category"];
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var runProcess = function (dictMonadRec) {
      return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($185) {
          return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($185));
      });
  };
  var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
          };
      };
  });
  var loop = function (dictFunctor) {
      return function (dictMonad) {
          return function (me) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                  return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
              })(Data_Unit.unit);
          };
      };
  };
  var fuseWithL = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (zap) {
                      return function (fs) {
                          return function (gs) {
                              var go = function (v) {
                                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (v1) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (v2) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(Data_Functor.map(dictFunctor2)(function (t) {
                                              return Control_Monad_Free_Trans.freeT(function (v3) {
                                                  return go(t);
                                              });
                                          })(zap(Data_Tuple.Tuple.create)(v1)(v2)));
                                      });
                                  }));
                              };
                              return Control_Monad_Free_Trans.freeT(function (v) {
                                  return go(new Data_Tuple.Tuple(fs, gs));
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictParallel) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel["__superclass_Control.Applicative.Applicative_1"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictParallel["__superclass_Control.Applicative.Applicative_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                          if (v1 instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(v1.value0));
                                          };
                                          if (v1 instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v2) {
                                                      return go(t);
                                                  });
                                              })(v1.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine line 76, column 5 - line 78, column 63: " + [ v1.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
  var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Emit(f(v.value0), g(v.value1));
          };
      };
  });
  var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
  var connect = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      return f(v.value1)(v1(v.value0));
                  };
              };
          });
      };
  };
  var emit = function (dictMonad) {
      return function (o) {
          return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
      };
  };
  var producer = function (dictMonad) {
      return function (recv) {
          return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
              };
              throw new Error("Failed pattern match at Control.Coroutine line 119, column 3 - line 121, column 29: " + [ v.constructor.name ]);
          }));
      };
  };
  var pullFrom = function (dictMonadRec) {
      return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
          return function (v) {
              return function (v1) {
                  return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
              };
          };
      });
  };
  var $$await = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Emit"] = Emit;
  exports["await"] = $$await;
  exports["connect"] = connect;
  exports["emit"] = emit;
  exports["fuseWith"] = fuseWith;
  exports["fuseWithL"] = fuseWithL;
  exports["loop"] = loop;
  exports["producer"] = producer;
  exports["pullFrom"] = pullFrom;
  exports["runProcess"] = runProcess;
  exports["bifunctorEmit"] = bifunctorEmit;
  exports["functorEmit"] = functorEmit;
  exports["profunctorAwait"] = profunctorAwait;
  exports["functorAwait"] = functorAwait;
})(PS["Control.Coroutine"] = PS["Control.Coroutine"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._cancelWith = function (nonCanceler, aff, canceler1) {
    return function (success, error) {
      var canceler2 = aff(success, error);

      return function (e) {
        return function (success, error) {
          var cancellations = 0;
          var result = false;
          var errored = false;

          var s = function (bool) {
            cancellations = cancellations + 1;
            result = result || bool;

            if (cancellations === 2 && !errored) {
              success(result);
            }
          };

          var f = function (err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          canceler2(e)(s, f);
          canceler1(e)(s, f);

          return nonCanceler;
        };
      };
    };
  };

  exports._forkAff = function (nonCanceler, aff) {
    var voidF = function () {};

    return function (success) {
      var canceler = aff(voidF, voidF);
      success(canceler);
      return nonCanceler;
    };
  };

  exports._forkAll = function (nonCanceler, foldl, affs) {
    var voidF = function () {};

    return function (success) {
      var cancelers = foldl(function (acc) {
        return function (aff) {
          acc.push(aff(voidF, voidF));
          return acc;
        };
      })([])(affs);

      var canceler = function (e) {
        return function (success, error) {
          var cancellations = 0;
          var result        = false;
          var errored       = false;

          var s = function (bool) {
            cancellations = cancellations + 1;
            result        = result || bool;

            if (cancellations === cancelers.length && !errored) {
              success(result);
            }
          };

          var f = function (err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          for (var i = 0; i < cancelers.length; i++) {
            cancelers[i](e)(s, f);
          }

          return nonCanceler;
        };
      };

      success(canceler);
      return nonCanceler;
    };
  };

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._throwError = function (nonCanceler, e) {
    return function (success, error) {
      error(e);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._attempt = function (Left, Right, aff) {
    return function (success) {
      return aff(function (v) {
        success(Right(v));
      }, function (e) {
        success(Left(e));
      });
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };

  exports._tailRecM = function (isLeft, f, a) {
    return function (success, error) {
      return function go (acc) {
        var result, status, canceler;

        // Observes synchronous effects using a flag.
        //   status = 0 (unresolved status)
        //   status = 1 (synchronous effect)
        //   status = 2 (asynchronous effect)

        var csuccess = function (v) {
          // If the status is still unresolved, we have observed a
          // synchronous effect. Otherwise, the status will be `2`.
          if (status === 0) {
            // Store the result for further synchronous processing.
            result = v;
            status = 1;
          } else {
            // When we have observed an asynchronous effect, we use normal
            // recursion. This is safe because we will be on a new stack.
            if (isLeft(v)) {
              go(v.value0);
            } else {
              success(v.value0);
            }
          }
        };

        while (true) {
          status = 0;
          canceler = f(acc)(csuccess, error);

          // If the status has already resolved to `1` by our Aff handler, then
          // we have observed a synchronous effect. Otherwise it will still be
          // `0`.
          if (status === 1) {
            // When we have observed a synchronous effect, we merely swap out the
            // accumulator and continue the loop, preserving stack.
            if (isLeft(result)) {
              acc = result.value0;
              continue;
            } else {
              success(result.value0);
            }
          } else {
            // If the status has not resolved yet, then we have observed an
            // asynchronous effect.
            status = 2;
          }
          return canceler;
        }

      }(a);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports._makeVar = function (nonCanceler) {
    return function (success) {
      success({
        consumers: [],
        producers: [],
        error: undefined
      });
      return nonCanceler;
    };
  };

  exports._takeVar = function (nonCanceler, avar) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        avar.producers.shift()(success, error);
      } else {
        avar.consumers.push({ peek: false, success: success, error: error });
      }

      return nonCanceler;
    };
  };

  exports._putVar = function (nonCanceler, avar, a) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        var shouldQueue = true;
        var consumers = [];
        var consumer;

        while (true) {
          consumer = avar.consumers.shift();
          if (consumer) {
            consumers.push(consumer);
            if (consumer.peek) {
              continue;
            } else {
              shouldQueue = false;
            }
          }
          break;
        }

        if (shouldQueue) {
          avar.producers.push(function (success) {
            success(a);
            return nonCanceler;
          });
        }

        for (var i = 0; i < consumers.length; i++) {
          consumers[i].success(a);
        }

        success({});
      }

      return nonCanceler;
    };
  };

  exports._killVar = function (nonCanceler, avar, e) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        avar.error = e;
        while (avar.consumers.length) {
          avar.consumers.shift().error(e);
        }
        success({});
      }

      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];                                           
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff.Internal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  exports["_killVar"] = $foreign._killVar;
  exports["_makeVar"] = $foreign._makeVar;
  exports["_putVar"] = $foreign._putVar;
  exports["_takeVar"] = $foreign._takeVar;
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Unit = PS["Data.Unit"];        
  var ParAff = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var functorParAff = functorAff;
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var cancel = function (v) {
      return v;
  };   
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var cancelWith = function (aff) {
      return function (c) {
          return $foreign._cancelWith(nonCanceler, aff, c);
      };
  };
  var forkAff = function (aff) {
      return $foreign._forkAff(nonCanceler, aff);
  };
  var forkAll = function (dictFoldable) {
      return function (affs) {
          return $foreign._forkAll(nonCanceler, Data_Foldable.foldl(dictFoldable), affs);
      };
  };
  var killVar = function (q) {
      return function (e) {
          return fromAVBox(Control_Monad_Aff_Internal._killVar(nonCanceler, q, e));
      };
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };
  var makeVar = fromAVBox(Control_Monad_Aff_Internal._makeVar(nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return fromAVBox(Control_Monad_Aff_Internal._putVar(nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._takeVar(nonCanceler, q));
  };
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (e) {
              return Control_Apply.apply(applyAff)(Data_Functor.map(functorAff)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(v(e)))(v1(e));
          };
      };
  });                                                                        
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, function (v) {
      return function (v1) {
          var putOrKill = function (v2) {
              return Data_Either.either(killVar(v2))(putVar(v2));
          };
          return Control_Bind.bind(bindAff)(makeVar)(function (v2) {
              return Control_Bind.bind(bindAff)(makeVar)(function (v3) {
                  return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v2))(attempt(v))))(function (v4) {
                      return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v3))(attempt(v1))))(function (v5) {
                          return cancelWith(Control_Apply.apply(applyAff)(takeVar(v2))(takeVar(v3)))(Data_Semigroup.append(semigroupCanceler)(v4)(v5));
                      });
                  });
              });
          });
      };
  });
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($53) {
      return ParAff(Control_Applicative.pure(applicativeAff)($53));
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          var isLoop = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return true;
              };
              return false;
          };
          return $foreign._tailRecM(isLoop, f, a);
      };
  });
  var parallelParAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, ParAff, function (v) {
      return v;
  });
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadAff;
  }, function (aff) {
      return function (ex) {
          return Control_Bind.bind(bindAff)(attempt(aff))(Data_Either.either(ex)(Control_Applicative.pure(applicativeAff)));
      };
  }, function (e) {
      return $foreign._throwError(nonCanceler, e);
  });
  exports["ParAff"] = ParAff;
  exports["attempt"] = attempt;
  exports["cancel"] = cancel;
  exports["cancelWith"] = cancelWith;
  exports["forkAff"] = forkAff;
  exports["forkAll"] = forkAll;
  exports["makeAff"] = makeAff;
  exports["makeAff'"] = makeAff$prime;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadRecAff"] = monadRecAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelParAff"] = parallelParAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var killVar = function (q) {
      return function (e) {
          return fromAVBox(Control_Monad_Aff_Internal._killVar(Control_Monad_Aff.nonCanceler, q, e));
      };
  };
  var makeVar = fromAVBox(Control_Monad_Aff_Internal._makeVar(Control_Monad_Aff.nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return fromAVBox(Control_Monad_Aff_Internal._putVar(Control_Monad_Aff.nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._takeVar(Control_Monad_Aff.nonCanceler, q));
  };
  exports["killVar"] = killVar;
  exports["makeVar"] = makeVar;
  exports["putVar"] = putVar;
  exports["takeVar"] = takeVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var MonadAff = function (__superclass_Control$dotMonad$dotEff$dotClass$dotMonadEff_0, liftAff) {
      this["__superclass_Control.Monad.Eff.Class.MonadEff_0"] = __superclass_Control$dotMonad$dotEff$dotClass$dotMonadEff_0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Control_Monad_Aff.monadEffAff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["MonadAff"] = MonadAff;
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeCoerceAff = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeCoerceAff"] = unsafeCoerceAff;
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["logShow"] = logShow;
  exports["error"] = $foreign.error;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var MonadFork = function (__superclass_Control$dotMonad$dotMonad_0, fork) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.fork = fork;
  };
  var monadForkAff = new MonadFork(function () {
      return Control_Monad_Aff.monadAff;
  }, function ($3) {
      return Data_Functor.map(Control_Monad_Aff.functorAff)(Control_Monad_Aff.cancel)(Control_Monad_Aff.forkAff($3));
  });
  var fork = function (dict) {
      return dict.fork;
  };
  exports["MonadFork"] = MonadFork;
  exports["fork"] = fork;
  exports["monadForkAff"] = monadForkAff;
})(PS["Control.Monad.Fork.Class"] = PS["Control.Monad.Fork.Class"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.replicate = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($78) {
          return Data_Maybe.maybe([  ])(singleton)(f($78));
      });
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["catMaybes"] = catMaybes;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["zipWithA"] = zipWithA;
  exports["drop"] = $foreign.drop;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);            
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      return function ($46) {
          return Data_Maybe.isJust(indexOf(pat)($46));
      };
  };
  exports["contains"] = contains;
  exports["indexOf"] = indexOf;
  exports["toChar"] = toChar;
  exports["joinWith"] = $foreign.joinWith;
  exports["singleton"] = $foreign.singleton;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var SigChar = (function () {
      function SigChar() {

      };
      SigChar.value = new SigChar();
      return SigChar;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var SigUnit = (function () {
      function SigUnit() {

      };
      SigUnit.value = new SigUnit();
      return SigUnit;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, SNumber.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create); 
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 396, column 7 - line 396, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return showParen(v > 10)(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 390, column 1 - line 398, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($274) {
          return genericShowPrec(0)(toSpine(dictGeneric)($274));
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SigChar"] = SigChar;
  exports["SigArray"] = SigArray;
  exports["SigUnit"] = SigUnit;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gShow"] = gShow;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericInt"] = genericInt;
  exports["genericBool"] = genericBool;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List.Types line 53, column 3 - line 53, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });              
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($134) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($135) {
                      return Control_Apply.lift2(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Function.flip(Cons.create))(acc)(f($135));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($134));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 85, column 3 - line 85, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 92, column 3 - line 92, column 19: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($137) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($137));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 352, column 1 - line 355, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Data_List_Types.Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 141, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $184 = start > end;
                  if ($184) {
                      return 1;
                  };
                  if (!$184) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 138, column 45 - line 138, column 74: " + [ $184.constructor.name ]);
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 141, column 65: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var $193 = f(v.value0);
                      if ($193 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($193 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Data_List_Types.Cons($193.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 405, column 5 - line 407, column 32: " + [ $193.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 401, column 1 - line 407, column 32: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 374, column 1 - line 379, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["catMaybes"] = catMaybes;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["range"] = range;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List_Types.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Inject = PS["Data.Inject"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var $21 = Data_CatList.uncons(v.value1);
              if ($21 instanceof Data_Maybe.Nothing) {
                  return new Return(Unsafe_Coerce.unsafeCoerce(v.value0.value0));
              };
              if ($21 instanceof Data_Maybe.Just) {
                  var __tco_v = Unsafe_Coerce.unsafeCoerce(concatF(runExpF($21.value0.value0)(v.value0.value0))($21.value0.value1));
                  v = __tco_v;
                  continue tco;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 173, column 7 - line 177, column 64: " + [ $21.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              return new Bind(v.value0.value0, function (a) {
                  return Unsafe_Coerce.unsafeCoerce(concatF(v.value0.value1(a))(v.value1));
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 171, column 3 - line 179, column 56: " + [ v.value0.constructor.name ]);
      };
  };
  var fromView = function (f) {
      return new Free(Unsafe_Coerce.unsafeCoerce(f), Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($57) {
              return Control_Applicative.pure(freeApplicative)(k($57));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(Unsafe_Coerce.unsafeCoerce(k)));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($58) {
      return fromView(Return.create($58));
  });
  var liftF = function (f) {
      return fromView(new Bind(Unsafe_Coerce.unsafeCoerce(f), function ($59) {
          return Control_Applicative.pure(freeApplicative)(Unsafe_Coerce.unsafeCoerce($59));
      }));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var $53 = toView(f);
              if ($53 instanceof Return) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())($53.value0));
              };
              if ($53 instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($61) {
                      return Control_Monad_Rec_Class.Loop.create($53.value1($61));
                  })(k($53.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 114, column 10 - line 116, column 37: " + [ $53.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["foldFree"] = foldFree;
  exports["liftF"] = liftF;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
    "use strict";

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };

  exports.stopPropagation = function (e) {
    return function () {
      return e.stopPropagation();
    };
  };
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };
  // jshint maxparams: 1

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";          

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Math"];
  exports["atan2"] = $foreign.atan2;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["pi"] = $foreign.pi;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 69, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var singleton = function ($36) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($36));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Boolean = PS["Data.Boolean"];
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (v.value0 + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 65, column 3 - line 66, column 3: " + [ v.constructor.name ]);
  });
  var fail = function ($112) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($112));
  };
  var parseJSON = function (json) {
      return $foreign.parseJSONImpl(function ($113) {
          return fail(JSONError.create($113));
      }, Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), json);
  };
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Data.Foreign line 149, column 1 - line 151, column 58: " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 108, column 1 - line 110, column 54: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($114) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($114));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  var readChar = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
      var fromString = function ($115) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_String.toChar($115));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
  };
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["fail"] = fail;
  exports["parseJSON"] = parseJSON;
  exports["readArray"] = readArray;
  exports["readBoolean"] = readBoolean;
  exports["readChar"] = readChar;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["showForeignError"] = showForeignError;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Newtype = PS["Data.Newtype"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var EventType = function (x) {
      return x;
  };
  var wheelEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var newtypeEventType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EventType);
  var mouseEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var keyboardEventToEvent = Unsafe_Coerce.unsafeCoerce;
  exports["EventType"] = EventType;
  exports["keyboardEventToEvent"] = keyboardEventToEvent;
  exports["mouseEventToEvent"] = mouseEventToEvent;
  exports["wheelEventToEvent"] = wheelEventToEvent;
  exports["newtypeEventType"] = newtypeEventType;
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Event.Event"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Event_EventPhase = PS["DOM.Event.EventPhase"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["preventDefault"] = $foreign.preventDefault;
  exports["stopPropagation"] = $foreign.stopPropagation;
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.key = function (e) {
    return e.key;
  };
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Event.KeyboardEvent"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["key"] = $foreign.key;
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
    "use strict";

  exports.buttons = function (e) {
    return e.buttons;
  };
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Event.MouseEvent"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["buttons"] = $foreign.buttons;
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];        
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;                        
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create("HTMLElement")($0))));
  })(function ($1) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
  });                                                                    
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;   
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["readHTMLElement"] = readHTMLElement;
  exports["windowToEventTarget"] = windowToEventTarget;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var load = "load";
  exports["load"] = load;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["appendChild"] = $foreign.appendChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";                                             

  exports.querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["querySelector"] = $foreign.querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  } 

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              Data_StrMap_ST.poke(v1)(k)(v)();
              return v1;
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["singleton"] = singleton;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var showJson = new Data_Show.Show($foreign.stringify);             
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(foldJsonString);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toNumber = toJsonType(foldJsonNumber);
  var foldJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var toBoolean = toJsonType(foldJsonBoolean);
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonBoolean"] = foldJsonBoolean;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonObject"] = foldJsonObject;
  exports["foldJsonString"] = foldJsonString;
  exports["toArray"] = toArray;
  exports["toBoolean"] = toBoolean;
  exports["toNumber"] = toNumber;
  exports["toObject"] = toObject;
  exports["toString"] = toString;
  exports["showJson"] = showJson;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromObject"] = $foreign.fromObject;
  exports["fromString"] = $foreign.fromString;
  exports["jsonNull"] = $foreign.jsonNull;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  exports.getLocalStorage = function() {
    return window.localStorage;
  }
})(PS["DOM.WebStorage.Storage"] = PS["DOM.WebStorage.Storage"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.WebStorage.Storage"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  exports["getLocalStorage"] = $foreign.getLocalStorage;
})(PS["DOM.WebStorage.Storage"] = PS["DOM.WebStorage.Storage"] || {});
(function(exports) {
    "use strict";

  exports.getItemImpl = function(nothing, just, storage, key) {
    var item = storage.getItem(key);
    return item == null ? nothing : just(item);
  };

  exports.setItemImpl = function(storage, key, item) {
    storage.setItem(key, item);
  };
})(PS["DOM.WebStorage.String"] = PS["DOM.WebStorage.String"] || {});
(function(exports) {

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Function.Eff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["runEffFn3"] = $foreign.runEffFn3;
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["DOM.WebStorage.String"];
  var Data_Function_Eff = PS["Data.Function.Eff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Var = PS["Control.Monad.Eff.Var"];
  var DOM_WebStorage_Storage = PS["DOM.WebStorage.Storage"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Category = PS["Control.Category"];        
  var setItem = Data_Function_Eff.runEffFn3($foreign.setItemImpl);                                          
  var getItem = Data_Function_Eff.runEffFn4($foreign.getItemImpl)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["getItem"] = getItem;
  exports["setItem"] = setItem;
})(PS["DOM.WebStorage.String"] = PS["DOM.WebStorage.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 406, column 1 - line 406, column 18: " + [ v.constructor.name ]);
  };
  var toList = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(toList(v.value0))(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value1, v.value2), toList(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(toList(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value1, v.value2), toList(v.value3)))(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value4, v.value5), toList(v.value6))));
      };
      throw new Error("Failed pattern match at Data.Map line 383, column 1 - line 383, column 18: " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (k) {
              return function (tree) {
                  if (tree instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var comp = Data_Ord.compare(dictOrd);
                  var __unused = function (dictPartial1) {
                      return function ($dollar42) {
                          return $dollar42;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (tree instanceof Two) {
                          var $177 = comp(k)(tree.value1);
                          if ($177 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          if ($177 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      if (tree instanceof Three) {
                          var $182 = comp(k)(tree.value1);
                          if ($182 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          var $184 = comp(k)(tree.value4);
                          if ($184 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value5);
                          };
                          if ($182 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          if ($184 instanceof Data_Ordering.GT) {
                              return lookup(dictOrd)(k)(tree.value6);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      throw new Error("Failed pattern match at Data.Map line 146, column 10 - line 160, column 39: " + [ tree.constructor.name ]);
                  })());
              };
          };
      });
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 400, column 1 - line 400, column 16: " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 71, column 3 - line 71, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var tree = __copy_tree;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof TwoRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 237, column 3 - line 242, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 235, column 1 - line 235, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 273, column 5 - line 278, column 104: " + [ v.value0.constructor.name, v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 271, column 3 - line 271, column 54: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var comp = Data_Ord.compare(dictOrd);
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var $305 = comp(k)(v1.value1);
                              if ($305 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if ($305 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var $310 = comp(k)(v1.value1);
                              if ($310 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var $312 = comp(k)(v1.value4);
                              if ($312 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if ($310 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if ($310 instanceof Data_Ordering.GT && $312 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 254, column 3 - line 254, column 52: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List_Types.Nil.value);
  };
  var pop = function (dictOrd) {
      var up = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar50) {
                              return $dollar50;
                          };
                      };
                      return __unused(dictPartial)((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 323, column 9 - line 340, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 320, column 5 - line 340, column 136: " + [ ctxs.constructor.name ]);
              };
          };
      });
      var removeMaxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar52) {
                          return $dollar52;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 352, column 5 - line 356, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
      });
      var maxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar54) {
                      return $dollar54;
                  };
              };
              return __unused(dictPartial)((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1, 
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4, 
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 343, column 33 - line 347, column 45: " + [ m.constructor.name ]);
              })());
          };
      });
      var comp = Data_Ord.compare(dictOrd);
      var down = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (k) {
                  return function (m) {
                      if (m instanceof Leaf) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var $523 = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && $523 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if ($523 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if ($523 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx))(k)(m.value0);
                          };
                          return down(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(k)(m.value3);
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var $532 = comp(k)(m.value1);
                          var $533 = comp(k)(m.value4);
                          if (leaves && $532 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && $533 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if ($532 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if ($533 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if ($532 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx))(k)(m.value0);
                          };
                          if ($532 instanceof Data_Ordering.GT && $533 instanceof Data_Ordering.LT) {
                              return down(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx))(k)(m.value3);
                          };
                          return down(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(k)(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 293, column 36 - line 316, column 82: " + [ m.constructor.name ]);
                  };
              };
          };
      });
      return down(Data_List_Types.Nil.value);
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["delete"] = $$delete;
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["keys"] = keys;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["pop"] = pop;
  exports["toList"] = toList;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];        
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.id(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var gEncodeJson$prime = (function () {
      var addField = function (field) {
          return Data_StrMap.insert(field.recLabel)(gEncodeJson$prime(field.recValue(Data_Unit.unit)));
      };
      return function (v) {
          if (v instanceof Data_Generic.SInt) {
              return Data_Argonaut_Core.fromNumber(Data_Int.toNumber(v.value0));
          };
          if (v instanceof Data_Generic.SString) {
              return Data_Argonaut_Core.fromString(v.value0);
          };
          if (v instanceof Data_Generic.SChar) {
              return Data_Argonaut_Core.fromString(Data_String.singleton(v.value0));
          };
          if (v instanceof Data_Generic.SNumber) {
              return Data_Argonaut_Core.fromNumber(v.value0);
          };
          if (v instanceof Data_Generic.SBoolean) {
              return Data_Argonaut_Core.fromBoolean(v.value0);
          };
          if (v instanceof Data_Generic.SArray) {
              return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(function ($38) {
                  return gEncodeJson$prime((function (v1) {
                      return v1(Data_Unit.unit);
                  })($38));
              })(v.value0));
          };
          if (v instanceof Data_Generic.SUnit) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Generic.SProd) {
              return Data_Argonaut_Core.fromObject(Data_StrMap.insert("tag")(encodeJson(encodeJsonJString)(v.value0))(Data_StrMap.singleton("values")(encodeJson(encodeJsonArray(encodeJsonJson))(Data_Functor.map(Data_Functor.functorArray)(function ($39) {
                  return gEncodeJson$prime((function (v1) {
                      return v1(Data_Unit.unit);
                  })($39));
              })(v.value1)))));
          };
          if (v instanceof Data_Generic.SRecord) {
              return Data_Argonaut_Core.fromObject(Data_Foldable.foldr(Data_Foldable.foldableArray)(addField)(Data_StrMap.empty)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Class line 26, column 16 - line 39, column 48: " + [ v.constructor.name ]);
      };
  })();
  var gEncodeJson = function (dictGeneric) {
      return function ($40) {
          return gEncodeJson$prime(Data_Generic.toSpine(dictGeneric)($40));
      };
  };
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJson"] = encodeJson;
  exports["gEncodeJson"] = gEncodeJson;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var gDecodeJson$prime = function (signature) {
      return function (json) {
          var mFail = function (msg) {
              return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
          };
          if (signature instanceof Data_Generic.SigNumber) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SNumber.create)(mFail("Expected a number")(Data_Argonaut_Core.toNumber(json)));
          };
          if (signature instanceof Data_Generic.SigInt) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SInt.create)(mFail("Expected an integer number")(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromNumber)(Data_Argonaut_Core.toNumber(json))));
          };
          if (signature instanceof Data_Generic.SigString) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SString.create)(mFail("Expected a string")(Data_Argonaut_Core.toString(json)));
          };
          if (signature instanceof Data_Generic.SigChar) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SChar.create)(mFail("Expected a char")(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_String.toChar)(Data_Argonaut_Core.toString(json))));
          };
          if (signature instanceof Data_Generic.SigBoolean) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SBoolean.create)(mFail("Expected a boolean")(Data_Argonaut_Core.toBoolean(json)));
          };
          if (signature instanceof Data_Generic.SigUnit) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Generic.SUnit.value);
          };
          if (signature instanceof Data_Generic.SigArray) {
              return Control_Bind.bind(Data_Either.bindEither)(mFail("Expected an array")(Data_Argonaut_Core.toArray(json)))(function (v) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SArray.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function ($62) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Function["const"])(gDecodeJson$prime(signature.value0(Data_Unit.unit))($62));
                  })(v));
              });
          };
          if (signature instanceof Data_Generic.SigRecord) {
              return Control_Bind.bind(Data_Either.bindEither)(mFail("Expected an object")(Data_Argonaut_Core.toObject(json)))(function (v) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SRecord.create)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(signature.value0)(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail("'" + (v1.recLabel + "' property missing"))(Data_StrMap.lookup(v1.recLabel)(v)))(function (v2) {
                          return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson$prime(v1.recValue(Data_Unit.unit))(v2))(function (v3) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                  recLabel: v1.recLabel, 
                                  recValue: Data_Function["const"](v3)
                              });
                          });
                      });
                  }));
              });
          };
          if (signature instanceof Data_Generic.SigProd) {
              var decodingErr = function (msg) {
                  return "When decoding a " + (signature.value0 + (": " + msg));
              };
              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(json)))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is missing"))(Data_StrMap.lookup("tag")(v)))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is not a string"))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                          var $44 = Data_Foldable.find(Data_Foldable.foldableArray)(function ($63) {
                              return (function (v3) {
                                  return v2 === v3;
                              })((function (v3) {
                                  return v3.sigConstructor;
                              })($63));
                          })(signature.value1);
                          if ($44 instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Left(decodingErr("'" + (v2 + "' isn't a valid constructor")));
                          };
                          if ($44 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'values' array is missing"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray)(Data_StrMap.lookup("values")(v))))(function (v3) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Array.zipWithA(Data_Either.applicativeEither)(function (k) {
                                      return gDecodeJson$prime(k(Data_Unit.unit));
                                  })($44.value0.sigValues)(v3))(function (v4) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd(v2, Data_Functor.map(Data_Functor.functorArray)(Data_Function["const"])(v4)));
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 60, column 5 - line 65, column 41: " + [ $44.constructor.name ]);
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 39, column 31 - line 65, column 41: " + [ signature.constructor.name ]);
      };
  };
  var gDecodeJson = function (dictGeneric) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function ($64) {
          return Data_Maybe.maybe(new Data_Either.Left("fromSpine failed"))(Data_Either.Right.create)(Data_Generic.fromSpine(dictGeneric)($64));
      })(gDecodeJson$prime(Data_Generic.toSignature(dictGeneric)((Type_Proxy["Proxy"]).value)));
  };
  exports["gDecodeJson"] = gDecodeJson;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Var = PS["Control.Monad.Eff.Var"];
  var Data_Argonaut_Decode = PS["Data.Argonaut.Decode"];
  var Data_Argonaut_Encode = PS["Data.Argonaut.Encode"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Either = PS["Data.Either"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM_WebStorage_Storage = PS["DOM.WebStorage.Storage"];
  var DOM_WebStorage_String = PS["DOM.WebStorage.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];        
  var stringify = function (dictGeneric) {
      return function ($10) {
          return Data_Show.show(Data_Argonaut_Core.showJson)(Data_Argonaut_Encode_Class.gEncodeJson(dictGeneric)($10));
      };
  };
  var setItem = function (dictGeneric) {
      return function (dictGeneric1) {
          return function (storage) {
              return function (key) {
                  var setItem$prime = function ($11) {
                      return DOM_WebStorage_String.setItem(storage)(Data_Generic.gShow(dictGeneric)($11));
                  };
                  return function ($12) {
                      return setItem$prime(key)(stringify(dictGeneric1)($12));
                  };
              };
          };
      };
  };
  var parse = function (dictGeneric) {
      return function (nothing) {
          return function (just) {
              return function ($14) {
                  return Data_Either.either(Data_Function["const"](nothing))(just)(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Argonaut_Decode_Class.gDecodeJson(dictGeneric))(Data_Argonaut_Parser.jsonParser)($14));
              };
          };
      };
  };
  var getItem = function (dictGeneric) {
      return function (dictGeneric1) {
          return function (storage) {
              return function (key) {
                  var getItem$prime = function ($16) {
                      return DOM_WebStorage_String.getItem(storage)(Data_Generic.gShow(dictGeneric)($16));
                  };
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(function (v) {
                      return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(parse(dictGeneric1)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(v);
                  })(getItem$prime(key));
              };
          };
      };
  };
  exports["getItem"] = getItem;
  exports["setItem"] = setItem;
})(PS["DOM.WebStorage.Generic"] = PS["DOM.WebStorage.Generic"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };                         
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                         
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["ix"] = ix;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Bind = PS["Control.Bind"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];        
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  var readGeneric = function (dictGeneric) {
      return function (v) {
          var go = function (v1) {
              return function (v2) {
                  if (v1 instanceof Data_Generic.SigUnit) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Generic.SUnit.value);
                  };
                  if (v1 instanceof Data_Generic.SigNumber) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic.SNumber.create)(Data_Foreign.readNumber(v2));
                  };
                  if (v1 instanceof Data_Generic.SigInt) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic.SInt.create)(Data_Foreign.readInt(v2));
                  };
                  if (v1 instanceof Data_Generic.SigChar) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic.SChar.create)(Data_Foreign.readChar(v2));
                  };
                  if (v1 instanceof Data_Generic.SigString) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic.SString.create)(Data_Foreign.readString(v2));
                  };
                  if (v1 instanceof Data_Generic.SigBoolean) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic.SBoolean.create)(Data_Foreign.readBoolean(v2));
                  };
                  if (v1 instanceof Data_Generic.SigArray) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readArray(v2))(function (v3) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Traversable.traversableArray)(v3)(function (f1) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go(v1.value0(Data_Unit.unit))(f1))(function (v4) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Function["const"](v4));
                              });
                          }))(function (v4) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SArray(v4));
                          });
                      });
                  };
                  if (v1 instanceof Data_Generic.SigRecord) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Traversable.traversableArray)(v1.value0)(function (prop) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.ix(Data_Foreign_Index.indexString)(v2)(prop.recLabel))(function (v3) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go(prop.recValue(Data_Unit.unit))(v3))(function (v4) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                                      recLabel: prop.recLabel, 
                                      recValue: Data_Function["const"](v4)
                                  });
                              });
                          });
                      }))(function (v3) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SRecord(v3));
                      });
                  };
                  if (v1 instanceof Data_Generic.SigProd && (v1.value1.length === 1 && ((v1.value1[0]).sigValues.length === 1 && v.unwrapNewtypes))) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go((v1.value1[0]).sigValues[0](Data_Unit.unit))(v2))(function (v3) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd((v1.value1[0]).sigConstructor, [ function (v4) {
                              return v3;
                          } ]));
                      });
                  };
                  if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Maybe.Maybe" && (v1.value1.length === 2 && ((v1.value1[0]).sigValues.length === 1 && v.maybeAsNull)))) {
                      var $118 = Data_Foreign.isNull(v2) || Data_Foreign.isUndefined(v2);
                      if ($118) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd("Data.Maybe.Nothing", [  ]));
                      };
                      if (!$118) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go((v1.value1[0]).sigValues[0](Data_Unit.unit))(v2))(function (v3) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd("Data.Maybe.Just", [ function (v4) {
                                  return v3;
                              } ]));
                          });
                      };
                      throw new Error("Failed pattern match at Data.Foreign.Generic line 86, column 5 - line 89, column 56: " + [ $118.constructor.name ]);
                  };
                  if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Tuple.Tuple" && (v1.value1.length === 1 && ((v1.value1[0]).sigValues.length === 2 && v.tupleAsArray)))) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readArray(v2))(function (v3) {
                          if (v3.length === 2) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go((v1.value1[0]).sigValues[0](Data_Unit.unit))(v3[0]))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go((v1.value1[0]).sigValues[1](Data_Unit.unit))(v3[1]))(function (v5) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd("Data.Tuple.Tuple", [ function (v6) {
                                          return v4;
                                      }, function (v6) {
                                          return v5;
                                      } ]));
                                  });
                              });
                          };
                          return Data_Foreign.fail(new Data_Foreign.TypeMismatch("array of length 2", "array"));
                      });
                  };
                  if (v1 instanceof Data_Generic.SigProd) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.prop(v.sumEncoding.value0.tagFieldName)(v2))(Data_Foreign.readString))(function (v3) {
                          var $143 = Data_Foldable.find(Data_Foldable.foldableArray)(function (alt) {
                              return alt.sigConstructor === v3;
                          })(v1.value1);
                          if ($143 instanceof Data_Maybe.Nothing) {
                              return Data_Foreign.fail(new Data_Foreign.TypeMismatch("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(Data_Functor.map(Data_Functor.functorArray)(function (v4) {
                                  return v4.sigConstructor;
                              })(v1.value1)), v3));
                          };
                          if ($143 instanceof Data_Maybe.Just && $143.value0.sigValues.length === 0) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd(v3, [  ]));
                          };
                          if ($143 instanceof Data_Maybe.Just && ($143.value0.sigValues.length === 1 && v.unwrapSingleArgumentConstructors)) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.prop(v.sumEncoding.value0.contentsFieldName)(v2))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(go($143.value0.sigValues[0](Data_Unit.unit))(v4))(function (v5) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd(v3, [ function (v6) {
                                          return v5;
                                      } ]));
                                  });
                              });
                          };
                          if ($143 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.prop(v.sumEncoding.value0.contentsFieldName)(v2))(Data_Foreign.readArray))(function (v4) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Array.zipWithA(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(function (k) {
                                      return go(k(Data_Unit.unit));
                                  })($143.value0.sigValues)(v4))(function (v5) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Generic.SProd(v3, Data_Functor.map(Data_Functor.functorArray)(Data_Function["const"])(v5)));
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Data.Foreign.Generic line 102, column 9 - line 112, column 45: " + [ $143.constructor.name ]);
                      });
                  };
                  throw new Error("Failed pattern match at Data.Foreign.Generic line 64, column 3 - line 64, column 28: " + [ v1.constructor.name, v2.constructor.name ]);
              };
          };
          var fromSpineUnsafe = function (sp) {
              var $161 = Data_Generic.fromSpine(dictGeneric)(sp);
              if ($161 instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("Invalid spine for signature");
              };
              if ($161 instanceof Data_Maybe.Just) {
                  return $161.value0;
              };
              throw new Error("Failed pattern match at Data.Foreign.Generic line 59, column 5 - line 61, column 18: " + [ $161.constructor.name ]);
          };
          return function ($171) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(fromSpineUnsafe)(go(Data_Generic.toSignature(dictGeneric)((Type_Proxy["Proxy"]).value))($171));
          };
      };
  };
  var defaultOptions = {
      sumEncoding: new TaggedObject({
          tagFieldName: "tag", 
          contentsFieldName: "contents"
      }), 
      unwrapNewtypes: false, 
      unwrapSingleArgumentConstructors: true, 
      maybeAsNull: true, 
      tupleAsArray: false
  };
  exports["TaggedObject"] = TaggedObject;
  exports["defaultOptions"] = defaultOptions;
  exports["readGeneric"] = readGeneric;
})(PS["Data.Foreign.Generic"] = PS["Data.Foreign.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Generic = PS["Data.Generic"];
  var Data_String = PS["Data.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 43, column 3 - line 44, column 3: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["print"] = print;
  exports["unCustomMethod"] = unCustomMethod;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
    "use strict";

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Field = PS["Data.Field"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];        
  var $$Set = (function () {
      function $$Set(value0) {
          this.value0 = value0;
      };
      $$Set.create = function (value0) {
          return new $$Set(value0);
      };
      return $$Set;
  })();
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map.member(dictOrd)(a)(v.value0);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map.insert(dictOrd)(a)(Data_Unit.unit)(v.value0));
          };
      };
  };
  var empty = new $$Set(Data_Map.empty);
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map["delete"](dictOrd)(a)(v.value0));
          };
      };
  };
  exports["delete"] = $$delete;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {exports.loadImageEff = function(url){
      return function(reject){
          return function(resolve){
              return function(){
                  var image = new Image();
                  image.onload = function(){
                      resolve(image)();
                  };
                  image.onerror = function(e){
                      reject(new Error("loadImage: " + url))();
                  }
                  image.src = url;
              }
          }
      }
  }
})(PS["Game.Cubbit.Aff"] = PS["Game.Cubbit.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.Aff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];        
  var wait = function (dictMonadAff) {
      return function (msecs) {
          return Control_Monad_Aff_Class.liftAff(dictMonadAff)(Control_Monad_Aff.makeAff(function (reject) {
              return function (resolve) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(msecs)(resolve(Data_Unit.unit)));
              };
          }));
      };
  };
  var loadImage = function (src) {
      return Control_Monad_Aff.makeAff($foreign.loadImageEff(src));
  };
  exports["loadImage"] = loadImage;
  exports["wait"] = wait;
})(PS["Game.Cubbit.Aff"] = PS["Game.Cubbit.Aff"] || {});
(function(exports) {
    "use strict";

  var _2_15 = 32768;       // 2^15
  var _2_16 = 65536;       // 2^16
  var _2_17 = 131072;      // 2^17
  var _2_34 = 17179869184; // 2^34

  exports.blockIndex = function(x){
      return function(y){
          return function(z){
              return (x + _2_17) * _2_34 + (z + _2_17) * _2_16 + (y + _2_15);
          };
      };
  };

  exports.runBlockIndex = function(bits){
      var cx = (bits / _2_34) | 0;
      var cz = ((bits - cx * _2_34) / _2_16) | 0;
      var cy = (bits - cx * _2_34 - cz * _2_16);
      var x = cx - _2_17;
      var z = cz - _2_17;
      var y = cy - _2_15;
      return { x: x, y: y, z: z };
  };

  exports.eqBlockIndex = function(a){
      return function(b){
          return a === b;
      };
  };
})(PS["Game.Cubbit.BlockIndex"] = PS["Game.Cubbit.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.BlockIndex"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var eq_BlockIndex = new Data_Eq.Eq($foreign.eqBlockIndex);
  var ordBlockIndex = new Data_Ord.Ord(function () {
      return eq_BlockIndex;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v)(v1);
      };
  });
  exports["eq_BlockIndex"] = eq_BlockIndex;
  exports["ordBlockIndex"] = ordBlockIndex;
  exports["blockIndex"] = $foreign.blockIndex;
  exports["eqBlockIndex"] = $foreign.eqBlockIndex;
  exports["runBlockIndex"] = $foreign.runBlockIndex;
})(PS["Game.Cubbit.BlockIndex"] = PS["Game.Cubbit.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_Generic = PS["Data.Generic"];
  var Data_Newtype = PS["Data.Newtype"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var woodBlock = 3;
  var waterBlock = 2;
  var leavesBlock = 4;
  var grassBlock = 1;
  var graniteBlock = 6;                                                          
  var eq_BlockType = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  var dirtBlock = 5;
  var bushBlock = 100;
  var airBlock = 0;
  var blockTypes = {
      airBlock: airBlock, 
      grassBlock: grassBlock, 
      waterBlock: waterBlock, 
      woodBlock: woodBlock, 
      leavesBlock: leavesBlock, 
      dirtBlock: dirtBlock, 
      graniteBlock: graniteBlock, 
      bushBlock: bushBlock
  };
  exports["airBlock"] = airBlock;
  exports["blockTypes"] = blockTypes;
  exports["bushBlock"] = bushBlock;
  exports["dirtBlock"] = dirtBlock;
  exports["graniteBlock"] = graniteBlock;
  exports["grassBlock"] = grassBlock;
  exports["leavesBlock"] = leavesBlock;
  exports["waterBlock"] = waterBlock;
  exports["woodBlock"] = woodBlock;
  exports["eq_BlockType"] = eq_BlockType;
})(PS["Game.Cubbit.BlockType"] = PS["Game.Cubbit.BlockType"] || {});
(function(exports) {
    "use strict";                              

  exports.insert = function(key){
      return function(value){
          return function(map){
              var m = new Uint8Array(map);
              m[key] = value;
              return m;
          };
      };
  };

  exports.lookupNullable = function(key){
      return function(map){
          return map[key];
      };
  };
})(PS["Game.Cubbit.BoxelMap"] = PS["Game.Cubbit.BoxelMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var terrainRenderingGroup = 1;
  var sliderMaxValue = 5;
  var skyBoxRenderingGruop = 0;
  var chunkSize = 16;
  exports["chunkSize"] = chunkSize;
  exports["skyBoxRenderingGruop"] = skyBoxRenderingGruop;
  exports["sliderMaxValue"] = sliderMaxValue;
  exports["terrainRenderingGroup"] = terrainRenderingGroup;
})(PS["Game.Cubbit.Constants"] = PS["Game.Cubbit.Constants"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var runLocalIndex = function (v) {
      var x = v / (Game_Cubbit_Constants.chunkSize * Game_Cubbit_Constants.chunkSize | 0) | 0;
      var i$prime = v - ((x * Game_Cubbit_Constants.chunkSize | 0) * Game_Cubbit_Constants.chunkSize | 0);
      var y = i$prime / Game_Cubbit_Constants.chunkSize | 0;
      var z = i$prime % Game_Cubbit_Constants.chunkSize;
      return {
          x: x, 
          y: y, 
          z: z
      };
  };             
  var localIndex = function (lx) {
      return function (ly) {
          return function (lz) {
              return (((Game_Cubbit_Constants.chunkSize * Game_Cubbit_Constants.chunkSize | 0) * lx | 0) + (Game_Cubbit_Constants.chunkSize * ly | 0) | 0) + lz | 0;
          };
      };
  };
  exports["localIndex"] = localIndex;
  exports["runLocalIndex"] = runLocalIndex;
})(PS["Game.Cubbit.LocalIndex"] = PS["Game.Cubbit.LocalIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.BoxelMap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];        
  var lookup = function (key) {
      return function (map) {
          return Data_Nullable.toMaybe($foreign.lookupNullable(key)(map));
      };
  };
  exports["lookup"] = lookup;
  exports["insert"] = $foreign.insert;
})(PS["Game.Cubbit.BoxelMap"] = PS["Game.Cubbit.BoxelMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ring = PS["Data.Ring"];
  var runChunkIndex = function (v) {
      return Game_Cubbit_BlockIndex.runBlockIndex(v);
  }; 
  var eqChunkIndex = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Game_Cubbit_BlockIndex.eqBlockIndex(v)(v1);
      };
  });
  var ordChunkIndex = new Data_Ord.Ord(function () {
      return eqChunkIndex;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Game_Cubbit_BlockIndex.ordBlockIndex)(v)(v1);
      };
  });
  var chunkIndexDistance = function (v) {
      return function (v1) {
          var k = Game_Cubbit_BlockIndex.runBlockIndex(v1);
          var i = Game_Cubbit_BlockIndex.runBlockIndex(v);
          var dz = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.z - k.z);
          var dy = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.y - k.y);
          var dx = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i.x - k.x);
          return Data_Ord.max(Data_Ord.ordInt)(dx)(Data_Ord.max(Data_Ord.ordInt)(dy)(dz));
      };
  };
  var chunkIndex = function (x) {
      return function (y) {
          return function (z) {
              return Game_Cubbit_BlockIndex.blockIndex(x)(y)(z);
          };
      };
  };
  exports["chunkIndex"] = chunkIndex;
  exports["chunkIndexDistance"] = chunkIndexDistance;
  exports["runChunkIndex"] = runChunkIndex;
  exports["eqChunkIndex"] = eqChunkIndex;
  exports["ordChunkIndex"] = ordChunkIndex;
})(PS["Game.Cubbit.ChunkIndex"] = PS["Game.Cubbit.ChunkIndex"] || {});
(function(exports) {
    "use strict";

  exports.abstractMeshToNode = function(mesh){
      return mesh;
  };

  exports.dispose = function(doNotRecurse){
      return function(mesh){
          return function(){
              mesh.dispose(doNotRecurse);
          };
      };
  };


  exports.setIsPickable = function(isPickable){
      return function(mesh){
          return function(){
              mesh.isPickable = isPickable;
          };
      };
  };

  exports.setPosition = function(position){
      return function(mesh){
          return function(){
              mesh.position = position;
          };
      };
  };

  exports.setRotation = function(rotation){
      return function(mesh){
          return function(){
              mesh.rotation = rotation;
          };
      };
  };

  exports.setIsVisible = function(isVisible){
      return function(mesh){
          return function(){
              mesh.isVisible = isVisible;
          };
      };
  };

  exports.setUseVertexColors  = function(useVertexColors ){
      return function(mesh){
          return function(){
              mesh.useVertexColors  = useVertexColors ;
          };
      };
  };

  exports.setRenderingGroupId = function(value){
      return function(mesh){
          return function(){
              mesh.renderingGroupId = value;
          };
      };
  };

  exports.setReceiveShadows = function(receiveShadows){
      return function(mesh){
          return function(){
              mesh.receiveShadows = receiveShadows;
          };
      };
  };

  exports._getSkeleton = function(mesh){
      return function(){
          return mesh.skeleton;
      };
  };

  exports.setMaterial = function(mat){
      return function(mesh){
          return function(){
              mesh.material = mat;
          };
      };
  };


  exports.setVisibility = function(visibility){
      return function(mesh){
          return function(){
              mesh.visibility = visibility;
          };
      };
  };
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.AbstractMesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];        
  var getSkeleton = function (mesh) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._getSkeleton(mesh));
  };
  exports["getSkeleton"] = getSkeleton;
  exports["abstractMeshToNode"] = $foreign.abstractMeshToNode;
  exports["dispose"] = $foreign.dispose;
  exports["setIsPickable"] = $foreign.setIsPickable;
  exports["setIsVisible"] = $foreign.setIsVisible;
  exports["setMaterial"] = $foreign.setMaterial;
  exports["setPosition"] = $foreign.setPosition;
  exports["setReceiveShadows"] = $foreign.setReceiveShadows;
  exports["setRenderingGroupId"] = $foreign.setRenderingGroupId;
  exports["setRotation"] = $foreign.setRotation;
  exports["setUseVertexColors"] = $foreign.setUseVertexColors;
  exports["setVisibility"] = $foreign.setVisibility;
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createMesh = function(id){
      return function(scene){
          return function(){
              return new BABYLON.Mesh(id, scene);
          };
      };
  };

  exports.meshToAbstractMesh = function(mesh){
      return mesh;
  };

  exports.createBox = function(id){
      return function(size){
          return function(scene){
              return function(){
                  return BABYLON.Mesh.CreateBox(id, size, scene);
              };
          };
      };
  };

  exports.setPosition = function(position){
      return function(mesh){
          return function(){
              mesh.position = position;
          };
      };
  };




  exports.setInfiniteDistance = function(value){
      return function(mesh){
          return function(){
              mesh.infiniteDistance = value;
          };
      };
  };
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Mesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createBox"] = $foreign.createBox;
  exports["createMesh"] = $foreign.createMesh;
  exports["meshToAbstractMesh"] = $foreign.meshToAbstractMesh;
  exports["setInfiniteDistance"] = $foreign.setInfiniteDistance;
  exports["setPosition"] = $foreign.setPosition;
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {
    "use strict";

  /* global CANNON */

  exports.createSphere = function(radius){
      return function(){
          return new CANNON.Sphere(radius);
      };
  };

  exports.createMaterial = function(options){
      return function(){
          return new CANNON.Material(options);
      };
  };
})(PS["Graphics.Cannon"] = PS["Graphics.Cannon"] || {});
(function(exports) {
    "use strict";

  /* global CANNON */

  exports.createVec3 = function(x){
      return function(y){
          return function(z){
              return function(){
                  return new CANNON.Vec3(x, y, z);
              };
          };
      };
  };

  exports.runVec3 = function(v){
      return function(){
          return { x: v.x, y: v.y, z: v.z };
      };
  };
})(PS["Graphics.Cannon.Vec3"] = PS["Graphics.Cannon.Vec3"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Cannon.Vec3"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["createVec3"] = $foreign.createVec3;
  exports["runVec3"] = $foreign.runVec3;
})(PS["Graphics.Cannon.Vec3"] = PS["Graphics.Cannon.Vec3"] || {});
(function(exports) {
    "use strict";

  /* global CANNON */

  exports.createBody = function(bodyProps){
      return function(){
          return new CANNON.Body(bodyProps);
      };
  };

  exports.defaultBodyProps = {
      mass: 0.0,
      position: new CANNON.Vec3(),
      fixedRotation: false,
      linearDamping: 0.01,
      material: new CANNON.Material(),
      collisionFilterGroup: 1,
      collisionFilterMask: 1
  };


  exports.getVelocity = function(body){
      return function(){
          return body.velocity;
      };
  };

  exports.setVelocity = function(value){
      return function(body){
          return function(){
              body.velocity.copy(value);
          };
      };
  };
  exports.getPosition = function(body){
      return function(){
          return body.position.clone();
      };
  };

  exports.setPosition = function(position){
      return function(body){
          return function(){
              body.position.copy(position);
          };
      };
  };

  exports._setTag = function(value){
      return function(body){
          return function(){
              body.tag = value;
          };
      };
  };

  exports._addShape = function(shape){
      return function(offset){
          return function(orientation){
              return function(body){
                  return function(){
                      body.addShape(shape, offset, orientation);
                  };
              };
          };
      };
  };

  exports.setFixedRotation = function(value){
      return function(body){
          return function(){
              body.fixedRotation = value;
          };
      };
  };

  exports.updateMassProperties = function(body){
      return function(){
          body.updateMassProperties();
      }
  }
})(PS["Graphics.Cannon.Body"] = PS["Graphics.Cannon.Body"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Cannon.Body"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];        
  var setTag = function (tag) {
      return function (body) {
          return $foreign._setTag(Data_Nullable.toNullable(tag))(body);
      };
  };
  var addShape = function (shape) {
      return function (offset) {
          return function (orientation) {
              return $foreign._addShape(shape)(Data_Nullable.toNullable(offset))(Data_Nullable.toNullable(orientation));
          };
      };
  };
  exports["addShape"] = addShape;
  exports["setTag"] = setTag;
  exports["createBody"] = $foreign.createBody;
  exports["defaultBodyProps"] = $foreign.defaultBodyProps;
  exports["getPosition"] = $foreign.getPosition;
  exports["getVelocity"] = $foreign.getVelocity;
  exports["setFixedRotation"] = $foreign.setFixedRotation;
  exports["setPosition"] = $foreign.setPosition;
  exports["setVelocity"] = $foreign.setVelocity;
  exports["updateMassProperties"] = $foreign.updateMassProperties;
})(PS["Graphics.Cannon.Body"] = PS["Graphics.Cannon.Body"] || {});
(function(exports) {
    "use strict";

  /* global CANNON */

  exports.addBody = function(body){
      return function(world){
          return function(){
              world.addBody(body);
          };
      };
  };

  exports.createWorld = function(){
      return new CANNON.World();
  };



  exports.removeBody = function(body){
      return function(world){
          return function(){
              world.removeBody(body);
          };
      };
  };

  exports.step = function(fixedTimeStep){
      return function(dt){
          return function(maxSubSteps){
              return function(world){
                  return function(){
                      world.step(fixedTimeStep, dt, maxSubSteps);
                  };
              };
          };
      };
  };


  exports.setGravity = function(vector){
      return function(world){
          return function(){
              world.gravity = vector;
          };
      };
  };
})(PS["Graphics.Cannon.World"] = PS["Graphics.Cannon.World"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Cannon.World"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  exports["addBody"] = $foreign.addBody;
  exports["createWorld"] = $foreign.createWorld;
  exports["removeBody"] = $foreign.removeBody;
  exports["setGravity"] = $foreign.setGravity;
  exports["step"] = $foreign.step;
})(PS["Graphics.Cannon.World"] = PS["Graphics.Cannon.World"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Cannon"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Graphics_Cannon_Vec3 = PS["Graphics.Cannon.Vec3"];
  var Graphics_Cannon_Body = PS["Graphics.Cannon.Body"];
  var Graphics_Cannon_World = PS["Graphics.Cannon.World"];
  var Graphics_Cannon_RaycastResult = PS["Graphics.Cannon.RaycastResult"];
  exports["createMaterial"] = $foreign.createMaterial;
  exports["createSphere"] = $foreign.createSphere;
})(PS["Graphics.Cannon"] = PS["Graphics.Cannon"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Cannon = PS["Graphics.Cannon"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Bind = PS["Control.Bind"];
  var MeshNotLoaded = (function () {
      function MeshNotLoaded() {

      };
      MeshNotLoaded.value = new MeshNotLoaded();
      return MeshNotLoaded;
  })();
  var MeshLoaded = (function () {
      function MeshLoaded(value0) {
          this.value0 = value0;
      };
      MeshLoaded.create = function (value0) {
          return new MeshLoaded(value0);
      };
      return MeshLoaded;
  })();
  var EmptyMeshLoaded = (function () {
      function EmptyMeshLoaded() {

      };
      EmptyMeshLoaded.value = new EmptyMeshLoaded();
      return EmptyMeshLoaded;
  })();
  var disposeLoadedMesh = function (v) {
      if (v instanceof MeshNotLoaded) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
      if (v instanceof MeshLoaded) {
          return Graphics_Babylon_AbstractMesh.dispose(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(v.value0));
      };
      if (v instanceof EmptyMeshLoaded) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at Game.Cubbit.Chunk line 50, column 21 - line 53, column 33: " + [ v.constructor.name ]);
  };
  var disposeChunk = function (chunk) {
      return function __do() {
          disposeLoadedMesh(chunk.standardMaterialMesh)();
          disposeLoadedMesh(chunk.waterMaterialMesh)();
          return disposeLoadedMesh(chunk.transparentMaterialMesh)();
      };
  };
  exports["MeshNotLoaded"] = MeshNotLoaded;
  exports["MeshLoaded"] = MeshLoaded;
  exports["EmptyMeshLoaded"] = EmptyMeshLoaded;
  exports["disposeChunk"] = disposeChunk;
  exports["disposeLoadedMesh"] = disposeLoadedMesh;
})(PS["Game.Cubbit.Chunk"] = PS["Game.Cubbit.Chunk"] || {});
(function(exports) {
    "use strict";

  exports.createChunkMap = function(){
      return { map: {}, list: [] };
  };

  exports._lookup = function(index){
      return function(obj){
          return function(){
              return obj.map[index] || null;
          };
      };
  };

  exports.insert = function(index){
      return function(value){
          return function(obj){
              return function(){
                  if(obj.map[index]){
                      var i = obj.list.findIndex(function(chunkWithMesh){
                          return chunkWithMesh.index === index;
                      });
                      if(i === -1){
                          // never come here
                          //debugger;
                          throw new Error();
                      }
                      obj.list.splice(i, 1, value);
                  }else{
                      obj.list.push(value);
                  }
                  obj.map[index] = value;
              };
          };
      };
  };

  exports.sort = function(cx){
      return function(cy){
          return function(cz){
              return function(obj){
                  return function(){
                      obj.list.sort(function(a, b){
                          var r = Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz));
                          var t = Math.max(Math.abs(b.x - cx), Math.abs(b.y - cy), Math.abs(b.z - cz));
                          return r - t;
                      });
                  };
              };
          };
      };
  };

  exports.delete = function(index){
      return function(obj){
          return function(){
              if(obj.map[index]){
                  var i = obj.list.findIndex(function(chunkWithMesh){
                      return chunkWithMesh.index === index;
                  });
                  obj.list.splice(i, 1);
                  delete obj.map[index];
              }
          };
      };
  };

  exports.size = function(obj){
      return function(){
          return obj.list.length;
      };
  };

  exports.slice = function(begin){
      return function(end){
          return function(obj){
              return function(){
                  return obj.list.slice(begin, end);
              };
          };
      };
  };


  exports.filterNeighbors = function(range){
      return function(cx){
          return function(cy){
              return function(cz){
                  return function(obj){
                      return function(){
                          return obj.list.filter(function(a){
                              return Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz)) <= range;
                          });
                      };
                  };
              };
          };
      };
  };


  exports.getSortedChunks = function(cx){
      return function(cy){
          return function(cz){
              return function(obj){
                  return function(){
                      var sorted = obj.list.slice();
                      sorted.sort(function(a, b){
                          var r = Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz));
                          var t = Math.max(Math.abs(b.x - cx), Math.abs(b.y - cy), Math.abs(b.z - cz));
                          return r - t;
                      });
                      return sorted;
                  };
              };
          };
      };
  };
})(PS["Game.Cubbit.ChunkMap"] = PS["Game.Cubbit.ChunkMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.ChunkMap"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var lookup = function (index) {
      return function (map) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lookup(index)(map));
      };
  };
  exports["lookup"] = lookup;
  exports["createChunkMap"] = $foreign.createChunkMap;
  exports["delete"] = $foreign["delete"];
  exports["filterNeighbors"] = $foreign.filterNeighbors;
  exports["getSortedChunks"] = $foreign.getSortedChunks;
  exports["insert"] = $foreign.insert;
  exports["size"] = $foreign.size;
})(PS["Game.Cubbit.ChunkMap"] = PS["Game.Cubbit.ChunkMap"] || {});
(function(exports) {
    "use strict";

  exports._buildCollesionBoxes = function(imports){
      return function(chunk) {
          return function(world) {
              return function() {

                  //console.profile("collesion");
                  //console.time("collesion");

                  var localIndex = imports.localIndex;
                  var chunkSize = imports.chunkSize;
                  var isSolidBlock = imports.isSolidBlock;


                  var blocks = chunk.blocks; // Uint8Array

                  var sx = 1.0;
                  var sy = 1.0;
                  var sz = 1.0;

                  var boxes = [];     // Array (Body String)
                  var boxified = new Array(chunkSize * chunkSize * chunkSize);  // Array Boolean
                  var boxShape = new CANNON.Box(new CANNON.Vec3(sx * 0.5, sy * 0.5, sz * 0.5));


                  // User must manually update the map for the first time.
                  function contains(xi, yi, zi){
                      return  xi >= 0 && xi < chunkSize &&
                              yi >= 0 && yi < chunkSize &&
                              zi >= 0 && zi < chunkSize;
                  }

                  function getBoxIndex(xi, yi, zi) {
                      return localIndex(xi)(yi)(zi);
                  }

                  function isFilled(xi, yi, zi) {
                      //console.assert(contains(xi, yi, zi));
                      //return map[getBoxIndex(xi, yi, zi)];
                      return isSolidBlock(blocks[getBoxIndex(xi, yi, zi)]);
                  }

                  function isBoxified(xi, yi, zi) {
                      //console.assert(contains(xi, yi, zi));
                      return boxified[getBoxIndex(xi, yi, zi)];
                  }

                  function setBoxified(xi, yi, zi, v) {
                      //console.assert(contains(xi, yi, zi));
                      boxified[getBoxIndex(xi, yi, zi)] = v;
                  }

                  //console.time("fill");
                  //console.profile("fill");
                  while (true) {
                      var box;

                      // 1. Get a filled box that we haven't boxified yet
                      (function(){
                          for (var i = 0; i < chunkSize; i++) {
                              for (var j = 0; j < chunkSize; j++) {
                                  for (var k = 0; k < chunkSize; k++) {
                                      if (isFilled(i, j, k) && ! isBoxified(i, j, k)) {
                                          box = new CANNON.Body({
                                              mass: 0
                                          });
                                          box.xi = i; // Position
                                          box.yi = j;
                                          box.zi = k;
                                          box.nx = 0; // Size
                                          box.ny = 0;
                                          box.nz = 0;
                                          boxes.push(box);
                                          return;
                                      }
                                  }
                              }
                          }
                      })();

                      // 2. Check if we can merge it with its neighbors
                      if (box) {

                          // Check what can be merged
                          var xi = box.xi,
                              yi = box.yi,
                              zi = box.zi;
                              box.nx = chunkSize, // merge=1 means merge just with the self box
                              box.ny = chunkSize,
                              box.nz = chunkSize;

                          // Merge in x
                          for (var i = xi; i < chunkSize; i++) {
                              if ( ! isFilled(i, yi, zi) || isBoxified(i, yi, zi)) {
                                  // Can't merge this box. Make sure we limit the mergeing
                                  break;
                              }
                          }
                          box.nx = i - xi;

                          // Merge in Z
                          for (var i = xi; i < xi + box.nx; i++) {
                              for (var j = zi; j < chunkSize; j++) {
                                  if ( ! isFilled(i, yi, j) || isBoxified(i,yi, j)) {
                                      // Can't merge this box. Make sure we limit the mergeing
                                      break;
                                  }
                              }
                              if (box.nz > j - zi) box.nz = j - zi;
                          }

                          // Merge in Y
                          for (var i = xi; i < xi + box.nx; i++) {
                              for (var j = zi; j < zi + box.nz; j++) {
                                  for (var k = yi; k < chunkSize; k++) {
                                      if ( ! isFilled(i, k, j) || isBoxified(i, k, j)) {
                                          // Can't merge this box. Make sure we limit the mergeing
                                          break;
                                      }
                                  }
                                  if (box.ny > k - yi) box.ny = k - yi;
                              }
                          }

                          // Set the merged boxes as boxified
                          for (var i = xi; i < xi + box.nx; i++) {
                              for (var j = yi; j < yi + box.ny; j++) {
                                  for (var k = zi; k < zi + box.nz; k++) {
                                      setBoxified(i, j, k, true);
                                  }
                              }
                          }

                          box = false;
                      } else {
                          break;
                      }
                  }
                  //console.profileEnd("fill");
                  //console.timeEnd("fill");

                  //console.time("body");
                  // Set box positions
                  var sx = sx,
                      sy = sy,
                      sz = sz;
                  for (var i = 0; i < boxes.length; i++) {
                      var b = boxes[i];
                      b.position.set(
                          chunkSize * chunk.x + b.xi * sx + b.nx * sx * 0.5,
                          chunkSize * chunk.y + b.yi * sy + b.ny * sy * 0.5,
                          chunkSize * chunk.z + b.zi * sz + b.nz * sz * 0.5
                      );

                      b.material = new CANNON.Material({
                          friction: 0.0,
                          restitution: 0.0
                      });

                      // Replace box shapes
                      b.addShape(new CANNON.Box(new CANNON.Vec3(b.nx * sx * 0.5, b.ny * sy * 0.5, b.nz * sz * 0.5)));
                      //b.aabbNeedsUpdate = true;
                      world.addBody(b);
                      //boxes.push(box);
                  }
                  //console.timeEnd("body");


                  //console.profileEnd("collesion");
                  //console.timeEnd("collesion");
                  //console.log(boxes.length);

                  return boxes;
              }
          }
      }
  }
})(PS["Game.Cubbit.Collesion"] = PS["Game.Cubbit.Collesion"] || {});
(function(exports) {
  /*
 * A speed-improved perlin and simplex noise algorithms for 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 * Converted to Javascript by Joseph Gentle.
 *
 * Version 2012-03-09
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 *
 */  

  "use strict";

  function Grad(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
  }

  Grad.prototype.dot2 = function(x, y) {
      return this.x * x + this.y * y;
  };

  Grad.prototype.dot3 = function(x, y, z) {
      return this.x * x + this.y * y + this.z * z;
  };

  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),
      new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),
      new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)
  ];

  var p = [151, 160, 137, 91, 90, 15,
      131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
      190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
      88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
      77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
      102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
      135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
      5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
      223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
      129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
      251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
      49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
      138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
  ];


  // Skewing and unskewing factors for 2, 3, and 4 dimensions
  var F2 = 0.5 * (Math.sqrt(3) - 1);
  var G2 = (3 - Math.sqrt(3)) / 6;

  exports.createNoise = function(_seed) {
      // This isn't a very good seeding function, but it works ok. It supports 2^16
      // different seed values. Write something better if you need more seeds.

      // To remove the need for index wrapping, double the permutation table length
      var perm = new Array(512);
      var gradP = new Array(512);

      var seed = _seed;
      if (seed > 0 && seed < 1) {
          // Scale the seed out
          seed *= 65536;
      }

      seed = Math.floor(seed);
      if (seed < 256) {
          seed |= seed << 8;
      }

      for (var i = 0; i < 256; i++) {
          var v;
          if (i & 1) {
              v = p[i] ^ (seed & 255);
          } else {
              v = p[i] ^ ((seed >> 8) & 255);
          }

          perm[i] = perm[i + 256] = v;
          gradP[i] = gradP[i + 256] = grad3[v % 12];
      }

      return {
          perm: perm,
          gradP: gradP
      };
  };

  exports.simplex2 = function(xin) {
      return function(yin) {
          return function(noise) {
              var n0, n1, n2; // Noise contributions from the three corners
              // Skew the input space to determine which simplex cell we're in
              var s = (xin + yin) * F2; // Hairy factor for 2D
              var i = Math.floor(xin + s);
              var j = Math.floor(yin + s);
              var t = (i + j) * G2;
              var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.
              var y0 = yin - j + t;
              // For the 2D case, the simplex shape is an equilateral triangle.
              // Determine which simplex we are in.
              var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
              if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
                  i1 = 1;
                  j1 = 0;
              } else { // upper triangle, YX order: (0,0)->(0,1)->(1,1)
                  i1 = 0;
                  j1 = 1;
              }
              // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
              // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
              // c = (3-sqrt(3))/6
              var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
              var y1 = y0 - j1 + G2;
              var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
              var y2 = y0 - 1 + 2 * G2;
              // Work out the hashed gradient indices of the three simplex corners
              i &= 255;
              j &= 255;
              var gi0 = noise.gradP[i + noise.perm[j]];
              var gi1 = noise.gradP[i + i1 + noise.perm[j + j1]];
              var gi2 = noise.gradP[i + 1 + noise.perm[j + 1]];
              // Calculate the contribution from the three corners
              var t0 = 0.5 - x0 * x0 - y0 * y0;
              if (t0 < 0) {
                  n0 = 0;
              } else {
                  t0 *= t0;
                  n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient
              }
              var t1 = 0.5 - x1 * x1 - y1 * y1;
              if (t1 < 0) {
                  n1 = 0;
              } else {
                  t1 *= t1;
                  n1 = t1 * t1 * gi1.dot2(x1, y1);
              }
              var t2 = 0.5 - x2 * x2 - y2 * y2;
              if (t2 < 0) {
                  n2 = 0;
              } else {
                  t2 *= t2;
                  n2 = t2 * t2 * gi2.dot2(x2, y2);
              }
              // Add contributions from each corner to get the final noise value.
              // The result is scaled to return values in the interval [-1,1].
              return 70 * (n0 + n1 + n2);
          };
      };
  };
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["PerlinNoise"];
  exports["createNoise"] = $foreign.createNoise;
  exports["simplex2"] = $foreign.simplex2;
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_ChunkMap = PS["Game.Cubbit.ChunkMap"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];
  var Game_Cubbit_Vec = PS["Game.Cubbit.Vec"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var PerlinNoise = PS["PerlinNoise"];
  var Prelude = PS["Prelude"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Applicative = PS["Control.Applicative"];
  var lookupChunk = function (index) {
      return function (v) {
          return Game_Cubbit_ChunkMap.lookup(index)(v.map);
      };
  };
  var isSolidBlock = function (block) {
      return Data_Eq.notEq(Game_Cubbit_BlockType.eq_BlockType)(block)(Game_Cubbit_BlockType.airBlock) && (Data_Eq.notEq(Game_Cubbit_BlockType.eq_BlockType)(block)(Game_Cubbit_BlockType.bushBlock) && Data_Eq.notEq(Game_Cubbit_BlockType.eq_BlockType)(block)(Game_Cubbit_BlockType.leavesBlock));
  };
  var insertChunk = function (cmesh) {
      return function (v) {
          return Game_Cubbit_ChunkMap.insert(cmesh.index)(cmesh)(v.map);
      };
  };
  var globalPositionToGlobalIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return Data_Int.floor(v + 1000000.0) - 1000000;
              };
              return Game_Cubbit_BlockIndex.blockIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var globalPositionToChunkIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return (Data_Int.floor(v + 1000000.0 * Data_Int.toNumber(Game_Cubbit_Constants.chunkSize)) / Game_Cubbit_Constants.chunkSize | 0) - 1000000;
              };
              return Game_Cubbit_ChunkIndex.chunkIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var globalIndexToChunkIndex = function (b) {
      var f = function (v) {
          return ((v + (1000000 * Game_Cubbit_Constants.chunkSize | 0) | 0) / Game_Cubbit_Constants.chunkSize | 0) - 1000000;
      };
      var bi = Game_Cubbit_BlockIndex.runBlockIndex(b);
      return Game_Cubbit_ChunkIndex.chunkIndex(f(bi.x))(f(bi.y))(f(bi.z));
  };
  var globalIndexToLocalIndex = function (index) {
      var globalIndex = Game_Cubbit_BlockIndex.runBlockIndex(index);
      var chunkIndex = Game_Cubbit_ChunkIndex.runChunkIndex(globalIndexToChunkIndex(index));
      var cx = globalIndex.x - (Game_Cubbit_Constants.chunkSize * chunkIndex.x | 0);
      var cy = globalIndex.y - (Game_Cubbit_Constants.chunkSize * chunkIndex.y | 0);
      var cz = globalIndex.z - (Game_Cubbit_Constants.chunkSize * chunkIndex.z | 0);
      return Game_Cubbit_LocalIndex.localIndex(cx)(cy)(cz);
  };
  var lookupBlock = function (globalIndex) {
      return function (v) {
          var chunkIndex = globalIndexToChunkIndex(globalIndex);
          var localIndex = globalIndexToLocalIndex(globalIndex);
          return function __do() {
              var v1 = Game_Cubbit_ChunkMap.lookup(chunkIndex)(v.map)();
              if (v1 instanceof Data_Maybe.Just) {
                  return Game_Cubbit_BoxelMap.lookup(localIndex)(v1.value0.blocks);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var lookupBlockByVec = function (p) {
      return function (v) {
          return lookupBlock(globalPositionToGlobalIndex(p.x)(p.y)(p.z))(v);
      };
  };
  var lookupSolidBlock = function (globalIndex) {
      return function (v) {
          var chunkIndex = globalIndexToChunkIndex(globalIndex);
          var localIndex = globalIndexToLocalIndex(globalIndex);
          return function __do() {
              var v1 = Game_Cubbit_ChunkMap.lookup(chunkIndex)(v.map)();
              if (v1 instanceof Data_Maybe.Just) {
                  var $27 = Game_Cubbit_BoxelMap.lookup(localIndex)(v1.value0.blocks);
                  if ($27 instanceof Data_Maybe.Just) {
                      var $28 = Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)($27.value0)(Game_Cubbit_BlockType.airBlock);
                      if ($28) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (!$28) {
                          return new Data_Maybe.Just($27.value0);
                      };
                      throw new Error("Failed pattern match at Game.Cubbit.Terrain line 81, column 40 - line 81, column 97: " + [ $28.constructor.name ]);
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var lookupSolidBlockByVec = function (p) {
      return function (v) {
          return lookupSolidBlock(globalPositionToGlobalIndex(p.x)(p.y)(p.z))(v);
      };
  };
  var createTerrain = function (seed) {
      return function __do() {
          var v = Game_Cubbit_ChunkMap.createChunkMap();
          return {
              map: v, 
              noise: PerlinNoise.createNoise(seed), 
              bodies: Data_Map.empty
          };
      };
  };
  exports["createTerrain"] = createTerrain;
  exports["globalIndexToChunkIndex"] = globalIndexToChunkIndex;
  exports["globalIndexToLocalIndex"] = globalIndexToLocalIndex;
  exports["globalPositionToChunkIndex"] = globalPositionToChunkIndex;
  exports["globalPositionToGlobalIndex"] = globalPositionToGlobalIndex;
  exports["insertChunk"] = insertChunk;
  exports["isSolidBlock"] = isSolidBlock;
  exports["lookupBlockByVec"] = lookupBlockByVec;
  exports["lookupChunk"] = lookupChunk;
  exports["lookupSolidBlock"] = lookupSolidBlock;
  exports["lookupSolidBlockByVec"] = lookupSolidBlockByVec;
})(PS["Game.Cubbit.Terrain"] = PS["Game.Cubbit.Terrain"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_WebStorage = PS["DOM.WebStorage"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var DOM_WebStorage_Storage = PS["DOM.WebStorage.Storage"];
  var DOM_WebStorage_Generic = PS["DOM.WebStorage.Generic"];
  var Control_Applicative = PS["Control.Applicative"];        
  var ConfigKey = (function () {
      function ConfigKey() {

      };
      ConfigKey.value = new ConfigKey();
      return ConfigKey;
  })();
  var Config = function (x) {
      return x;
  };
  var genericConfigKey = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Cubbit.Config.ConfigKey" && v.value1.length === 0)) {
          return new Data_Maybe.Just(ConfigKey.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Cubbit.Config.ConfigKey", [ {
          sigConstructor: "Game.Cubbit.Config.ConfigKey", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Cubbit.Config.ConfigKey", [  ]);
  });
  var genericConfig = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Cubbit.Config.Config" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Config))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 7) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (bgmVolume1) {
                      return function (chunkArea1) {
                          return function (mute1) {
                              return function (seVolume1) {
                                  return function (shadow1) {
                                      return function (shadowArea1) {
                                          return function (vertexColor1) {
                                              return {
                                                  bgmVolume: bgmVolume1, 
                                                  chunkArea: chunkArea1, 
                                                  mute: mute1, 
                                                  seVolume: seVolume1, 
                                                  shadow: shadow1, 
                                                  shadowArea: shadowArea1, 
                                                  vertexColor: vertexColor1
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[6]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Cubbit.Config.Config", [ {
          sigConstructor: "Game.Cubbit.Config.Config", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "bgmVolume", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "chunkArea", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "mute", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "seVolume", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "shadow", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "shadowArea", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "vertexColor", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Cubbit.Config.Config", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "bgmVolume", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.bgmVolume);
              }
          }, {
              recLabel: "chunkArea", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.chunkArea);
              }
          }, {
              recLabel: "mute", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.mute);
              }
          }, {
              recLabel: "seVolume", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.seVolume);
              }
          }, {
              recLabel: "shadow", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.shadow);
              }
          }, {
              recLabel: "shadowArea", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.shadowArea);
              }
          }, {
              recLabel: "vertexColor", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.vertexColor);
              }
          } ]);
      } ]);
  });
  var defaultConfig = {
      mute: false, 
      bgmVolume: 3, 
      seVolume: 3, 
      shadow: true, 
      shadowArea: 3, 
      vertexColor: true, 
      chunkArea: 3
  };
  var configKey = ConfigKey.value;
  var readConfig = function __do() {
      var v = DOM_WebStorage_Storage.getLocalStorage();
      var v1 = DOM_WebStorage_Generic.getItem(genericConfigKey)(genericConfig)(v)(configKey)();
      return Data_Maybe.fromMaybe(defaultConfig)(v1);
  };
  var writeConfig = function (config) {
      return function __do() {
          var v = DOM_WebStorage_Storage.getLocalStorage();
          return DOM_WebStorage_Generic.setItem(genericConfigKey)(genericConfig)(v)(configKey)(config)();
      };
  };
  exports["Config"] = Config;
  exports["readConfig"] = readConfig;
  exports["writeConfig"] = writeConfig;
  exports["genericConfig"] = genericConfig;
})(PS["Game.Cubbit.Config"] = PS["Game.Cubbit.Config"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Generic = PS["Data.Foreign.Generic"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];        
  var Options = function (x) {
      return x;
  };
  var genericOptions = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Cubbit.Option.Options" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Options))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 25) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (cameraFOV1) {
                      return function (cameraHorizontalSensitivity1) {
                          return function (cameraMaxZ1) {
                              return function (cameraMaximumRange1) {
                                  return function (cameraMinZ1) {
                                      return function (cameraMinimumRange1) {
                                          return function (cameraRotationSpeed1) {
                                              return function (cameraTargetSpeed1) {
                                                  return function (cameraVertialSensitivity1) {
                                                      return function (cameraZoomSpeed1) {
                                                          return function (chunkUnloadSpeed1) {
                                                              return function (enableWaterMaterial1) {
                                                                  return function (eyeHeight1) {
                                                                      return function (fogDensity1) {
                                                                          return function (gravity1) {
                                                                              return function (initialWorldSize1) {
                                                                                  return function (jumpVelocity1) {
                                                                                      return function (landingDuration1) {
                                                                                          return function (landingVelocityLimit1) {
                                                                                              return function (maximumLoadedChunks1) {
                                                                                                  return function (moveSpeed1) {
                                                                                                      return function (pointerHorizontalSensitivity1) {
                                                                                                          return function (pointerVerticalSensitivity1) {
                                                                                                              return function (shadowMapSize1) {
                                                                                                                  return function (skyboxRotationSpeed1) {
                                                                                                                      return {
                                                                                                                          cameraFOV: cameraFOV1, 
                                                                                                                          cameraHorizontalSensitivity: cameraHorizontalSensitivity1, 
                                                                                                                          cameraMaxZ: cameraMaxZ1, 
                                                                                                                          cameraMaximumRange: cameraMaximumRange1, 
                                                                                                                          cameraMinZ: cameraMinZ1, 
                                                                                                                          cameraMinimumRange: cameraMinimumRange1, 
                                                                                                                          cameraRotationSpeed: cameraRotationSpeed1, 
                                                                                                                          cameraTargetSpeed: cameraTargetSpeed1, 
                                                                                                                          cameraVertialSensitivity: cameraVertialSensitivity1, 
                                                                                                                          cameraZoomSpeed: cameraZoomSpeed1, 
                                                                                                                          chunkUnloadSpeed: chunkUnloadSpeed1, 
                                                                                                                          enableWaterMaterial: enableWaterMaterial1, 
                                                                                                                          eyeHeight: eyeHeight1, 
                                                                                                                          fogDensity: fogDensity1, 
                                                                                                                          gravity: gravity1, 
                                                                                                                          initialWorldSize: initialWorldSize1, 
                                                                                                                          jumpVelocity: jumpVelocity1, 
                                                                                                                          landingDuration: landingDuration1, 
                                                                                                                          landingVelocityLimit: landingVelocityLimit1, 
                                                                                                                          maximumLoadedChunks: maximumLoadedChunks1, 
                                                                                                                          moveSpeed: moveSpeed1, 
                                                                                                                          pointerHorizontalSensitivity: pointerHorizontalSensitivity1, 
                                                                                                                          pointerVerticalSensitivity: pointerVerticalSensitivity1, 
                                                                                                                          shadowMapSize: shadowMapSize1, 
                                                                                                                          skyboxRotationSpeed: skyboxRotationSpeed1
                                                                                                                      };
                                                                                                                  };
                                                                                                              };
                                                                                                          };
                                                                                                      };
                                                                                                  };
                                                                                              };
                                                                                          };
                                                                                      };
                                                                                  };
                                                                              };
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[2]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[3]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[4]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[5]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[6]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[7]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[8]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[9]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[10]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)((r.value0[11]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[12]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[13]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[14]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[15]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[16]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[17]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[18]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[19]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[20]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[21]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[22]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)((r.value0[23]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[24]).recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Cubbit.Option.Options", [ {
          sigConstructor: "Game.Cubbit.Option.Options", 
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "cameraFOV", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraHorizontalSensitivity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraMaxZ", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraMaximumRange", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraMinZ", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraMinimumRange", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraRotationSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraTargetSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraVertialSensitivity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cameraZoomSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "chunkUnloadSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "enableWaterMaterial", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "eyeHeight", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "fogDensity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gravity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "initialWorldSize", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "jumpVelocity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "landingDuration", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "landingVelocityLimit", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "maximumLoadedChunks", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "moveSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "pointerHorizontalSensitivity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "pointerVerticalSensitivity", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "shadowMapSize", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "skyboxRotationSpeed", 
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Cubbit.Option.Options", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "cameraFOV", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraFOV);
              }
          }, {
              recLabel: "cameraHorizontalSensitivity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraHorizontalSensitivity);
              }
          }, {
              recLabel: "cameraMaxZ", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraMaxZ);
              }
          }, {
              recLabel: "cameraMaximumRange", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraMaximumRange);
              }
          }, {
              recLabel: "cameraMinZ", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraMinZ);
              }
          }, {
              recLabel: "cameraMinimumRange", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraMinimumRange);
              }
          }, {
              recLabel: "cameraRotationSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraRotationSpeed);
              }
          }, {
              recLabel: "cameraTargetSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraTargetSpeed);
              }
          }, {
              recLabel: "cameraVertialSensitivity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraVertialSensitivity);
              }
          }, {
              recLabel: "cameraZoomSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.cameraZoomSpeed);
              }
          }, {
              recLabel: "chunkUnloadSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.chunkUnloadSpeed);
              }
          }, {
              recLabel: "enableWaterMaterial", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.enableWaterMaterial);
              }
          }, {
              recLabel: "eyeHeight", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.eyeHeight);
              }
          }, {
              recLabel: "fogDensity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.fogDensity);
              }
          }, {
              recLabel: "gravity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.gravity);
              }
          }, {
              recLabel: "initialWorldSize", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.initialWorldSize);
              }
          }, {
              recLabel: "jumpVelocity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.jumpVelocity);
              }
          }, {
              recLabel: "landingDuration", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.landingDuration);
              }
          }, {
              recLabel: "landingVelocityLimit", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.landingVelocityLimit);
              }
          }, {
              recLabel: "maximumLoadedChunks", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.maximumLoadedChunks);
              }
          }, {
              recLabel: "moveSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.moveSpeed);
              }
          }, {
              recLabel: "pointerHorizontalSensitivity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.pointerHorizontalSensitivity);
              }
          }, {
              recLabel: "pointerVerticalSensitivity", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.pointerVerticalSensitivity);
              }
          }, {
              recLabel: "shadowMapSize", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.shadowMapSize);
              }
          }, {
              recLabel: "skyboxRotationSpeed", 
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericNumber)(v.skyboxRotationSpeed);
              }
          } ]);
      } ]);
  });
  var readOptions = Data_Foreign_Generic.readGeneric(genericOptions)((function () {
      var $36 = {};
      for (var $37 in Data_Foreign_Generic.defaultOptions) {
          if (Data_Foreign_Generic.defaultOptions.hasOwnProperty($37)) {
              $36[$37] = Data_Foreign_Generic.defaultOptions[$37];
          };
      };
      $36.unwrapNewtypes = true;
      return $36;
  })());
  exports["Options"] = Options;
  exports["readOptions"] = readOptions;
  exports["genericOptions"] = genericOptions;
})(PS["Game.Cubbit.Option"] = PS["Game.Cubbit.Option"] || {});
(function(exports) {
    "use strict";

  exports.setHasAlpha = function(hasAplha){
      return function(mat){
          return function(){
              mat.hasAlpha = hasAplha;
          };
      };
  };
})(PS["Graphics.Babylon.BaseTexture"] = PS["Graphics.Babylon.BaseTexture"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.BaseTexture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["setHasAlpha"] = $foreign.setHasAlpha;
})(PS["Graphics.Babylon.BaseTexture"] = PS["Graphics.Babylon.BaseTexture"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createColor3 = function(r){
      return function(g){
          return function(b){
              return function(){
                  return new BABYLON.Color3(r, g, b);
              };
          };
      };
  };
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Color3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createColor3"] = $foreign.createColor3;
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {
    "use strict";

  exports.setFogEnabled = function(fogEnabled){
      return function(material){
          return function(){
              material.fogEnabled = fogEnabled;
          };
      };
  };

  exports.setZOffset = function(value){
      return function(mat){
          return function(){
              mat.zOffset = value;
          };
      };
  };

  exports.setWireframe = function(value){
      return function(mat){
          return function(){
              mat.wireframe = value;
          };
      };
  };

  exports.setAlpha = function(value){
      return function(mat){
          return function(){
              mat.alpha = value;
          };
      };
  };
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Material"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["setAlpha"] = $foreign.setAlpha;
  exports["setFogEnabled"] = $foreign.setFogEnabled;
  exports["setWireframe"] = $foreign.setWireframe;
  exports["setZOffset"] = $foreign.setZOffset;
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createShaderMaterial = function(name){
      return function(scene){
          return function(shaderPath){
              return function(options){
                  return function(){
                      return new BABYLON.ShaderMaterial(name, scene, shaderPath, options);
                  };
              };
          };
      };
  };

  exports.shaderMaterialToMaterial = function(mat){
      return mat;
  };

  exports.setTexture = function(name){
      return function(tex){
          return function(mat){
              return function(){
                  mat.setTexture(name, tex);
              };
          };
      };
  };

  exports.setVector3 = function(name){
      return function(vec){
          return function(mat){
              return function(){
                  mat.setVector3(name, vec);
              };
          };
      };
  };

  exports.setFloats = function(name){
      return function(fs){
          return function(mat){
              return function(){
                  mat.setFloats(name, fs);
              };
          };
      };
  };

  exports.setColor3 = function(name){
      return function(col){
          return function(mat){
              return function(){
                  mat.setColor3(name, col);
              };
          };
      };
  };
})(PS["Graphics.Babylon.ShaderMaterial"] = PS["Graphics.Babylon.ShaderMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.ShaderMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createShaderMaterial"] = $foreign.createShaderMaterial;
  exports["setColor3"] = $foreign.setColor3;
  exports["setFloats"] = $foreign.setFloats;
  exports["setTexture"] = $foreign.setTexture;
  exports["setVector3"] = $foreign.setVector3;
  exports["shaderMaterialToMaterial"] = $foreign.shaderMaterialToMaterial;
})(PS["Graphics.Babylon.ShaderMaterial"] = PS["Graphics.Babylon.ShaderMaterial"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createStandardMaterial = function(id){
      return function(scene){
          return function(){
              return new BABYLON.StandardMaterial(id, scene);
          };
      };
  };

  exports.setDiffuseTexture = function(tex){
      return function(mat){
          return function(){
              mat.diffuseTexture = tex;
          };
      };
  };

  exports.setReflectionTexture = function(tex){
      return function(mat){
          return function(){
              mat.reflectionTexture = tex;
          };
      };
  };

  exports.standardMaterialToMaterial = function(mat){
      return mat;
  };

  exports.setBackFaceCulling = function(value){
      return function(mat){
          return function(){
              mat.backFaceCulling = value;
          };
      };
  };

  exports.setDisableLighting  = function(value){
      return function(mat){
          return function(){
              mat.disableLighting = value;
          };
      };
  };

  exports.setDiffuseColor  = function(value){
      return function(mat){
          return function(){
              mat.diffuseColor  = value;
          };
      };
  };

  exports.setSpecularColor = function(value){
      return function(mat){
          return function(){
              mat.specularColor = value;
          };
      };
  };

  exports.setUseAlphaFromDiffuseTexture = function(useAlphaFromDiffuseTexture){
      return function(mat){
          return function(){
              mat.useAlphaFromDiffuseTexture = useAlphaFromDiffuseTexture;
          };
      };
  };
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.StandardMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createStandardMaterial"] = $foreign.createStandardMaterial;
  exports["setBackFaceCulling"] = $foreign.setBackFaceCulling;
  exports["setDiffuseColor"] = $foreign.setDiffuseColor;
  exports["setDiffuseTexture"] = $foreign.setDiffuseTexture;
  exports["setDisableLighting"] = $foreign.setDisableLighting;
  exports["setReflectionTexture"] = $foreign.setReflectionTexture;
  exports["setSpecularColor"] = $foreign.setSpecularColor;
  exports["setUseAlphaFromDiffuseTexture"] = $foreign.setUseAlphaFromDiffuseTexture;
  exports["standardMaterialToMaterial"] = $foreign.standardMaterialToMaterial;
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createTexture = function(path){
      return function(scene){
          return function(options){
              return function(){
                  return new BABYLON.Texture(path, scene, options.noMipmap, options.invertY, options.samplingMode, options.onLoad, options.onError);
              };
          };
      };
  };

  exports.tRILINEAR_SAMPLINGMODE = BABYLON.Texture.TRILINEAR_SAMPLINGMODE;

  exports.textureToBaseTexture = function(tex){
      return tex;
  };

  exports.sKYBOX_MODE = BABYLON.Texture.SKYBOX_MODE;

  exports.setCoordinatesMode = function(value){
      return function(tex){
          return function(){
              tex.coordinatesMode = value;
          };
      };
  };
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Texture"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Control_Applicative = PS["Control.Applicative"];        
  var defaultCreateTextureOptions = {
      noMipmap: false, 
      invertY: true, 
      samplingMode: $foreign.tRILINEAR_SAMPLINGMODE, 
      onLoad: Control_Applicative.pure(Control_Monad_Eff.applicativeEff), 
      onError: Control_Applicative.pure(Control_Monad_Eff.applicativeEff)
  };
  exports["defaultCreateTextureOptions"] = defaultCreateTextureOptions;
  exports["createTexture"] = $foreign.createTexture;
  exports["sKYBOX_MODE"] = $foreign.sKYBOX_MODE;
  exports["setCoordinatesMode"] = $foreign.setCoordinatesMode;
  exports["textureToBaseTexture"] = $foreign.textureToBaseTexture;
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createVector3 = function(x){
      return function(y){
          return function(z){
              return function(){
                  return new BABYLON.Vector3(x, y, z);
              };
          };
      };
  };

  exports.subtract = function(v){
      return function(r){
          return function(){
              return v.subtract(r);
          };
      };
  };

  exports.length = function(v){
      return function(){
          return v.length();
      };
  };

  exports.runVector3 = function(v){
      return function(){
          return { x: v.x, y: v.y, z: v.z };
      };
  };
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Vector3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createVector3"] = $foreign.createVector3;
  exports["length"] = $foreign.length;
  exports["runVector3"] = $foreign.runVector3;
  exports["subtract"] = $foreign.subtract;
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createWaterMaterial = function(name){
      return function(scene){
          return function(){
              return new BABYLON.WaterMaterial(name, scene);
          };
      };
  };

  exports.waterMaterialToMaterial = function(mat){
      return mat;
  };

  exports.setBumpTexture = function(tex){
      return function(mat){
          return function(){
              mat.bumpTexture = tex;
          };
      };
  };

  exports.addToRenderList = function(mesh){
      return function(mat){
          return function(){
              mat.addToRenderList(mesh);
          };
      };
  };

  exports.setWaveHeight = function(waveHeight){
      return function(mat){
          return function(){
              mat.waveHeight = waveHeight;
          };
      };
  };

  exports.setWindForce = function(windForce){
      return function(mat){
          return function(){
              mat.windForce = windForce;
          };
      };
  };
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.WaterMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["addToRenderList"] = $foreign.addToRenderList;
  exports["createWaterMaterial"] = $foreign.createWaterMaterial;
  exports["setBumpTexture"] = $foreign.setBumpTexture;
  exports["setWaveHeight"] = $foreign.setWaveHeight;
  exports["setWindForce"] = $foreign.setWindForce;
  exports["waterMaterialToMaterial"] = $foreign.waterMaterialToMaterial;
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Graphics_Babylon_BaseTexture = PS["Graphics.Babylon.BaseTexture"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_ShaderMaterial = PS["Graphics.Babylon.ShaderMaterial"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_WaterMaterial = PS["Graphics.Babylon.WaterMaterial"];
  var Prelude = PS["Prelude"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var initializeMaterials = function (scene) {
      return function (skybox) {
          return function (texture) {
              return function (alphaTexture) {
                  return function (v) {
                      return function __do() {
                          Graphics_Babylon_BaseTexture.setHasAlpha(true)(Graphics_Babylon_Texture.textureToBaseTexture(alphaTexture))();
                          var v1 = (function __do() {
                              var v1 = Graphics_Babylon_ShaderMaterial.createShaderMaterial("cellShading")(scene)("./alice/cellShading")({
                                  needAlphaBlending: false, 
                                  needAlphaTesting: false, 
                                  attributes: [ "position", "uv", "normal", "matricesIndices", "matricesWeights" ], 
                                  uniforms: [ "world", "viewProjection", "mBones" ], 
                                  samplers: [ "textureSampler" ], 
                                  defines: [  ]
                              })();
                              var v2 = Graphics_Babylon_Vector3.createVector3(0.0)(20.0)(-10.0)();
                              var v3 = Graphics_Babylon_Color3.createColor3(1.0)(1.0)(1.0)();
                              var v4 = Graphics_Babylon_Texture.createTexture("./alice/texture.png")(scene)(Graphics_Babylon_Texture.defaultCreateTextureOptions)();
                              Graphics_Babylon_ShaderMaterial.setTexture("textureSampler")(v4)(v1)();
                              Graphics_Babylon_ShaderMaterial.setVector3("vLightPosition")(v2)(v1)();
                              Graphics_Babylon_ShaderMaterial.setFloats("ToonThresholds")([ 0.2, -0.45, -5.0, -5.0 ])(v1)();
                              Graphics_Babylon_ShaderMaterial.setFloats("ToonBrightnessLevels")([ 1.0, 0.9, 0.75, 0.75, 0.75 ])(v1)();
                              Graphics_Babylon_ShaderMaterial.setColor3("vLightColor")(v3)(v1)();
                              return v1;
                          })();
                          var v2 = (function __do() {
                              var v2 = Graphics_Babylon_ShaderMaterial.createShaderMaterial("outlineShaderMaterial")(scene)("./alice/outline")({
                                  needAlphaBlending: false, 
                                  needAlphaTesting: false, 
                                  attributes: [ "position", "normal", "matricesIndices", "matricesWeights" ], 
                                  uniforms: [ "world", "viewProjection", "mBones" ], 
                                  samplers: [  ], 
                                  defines: [  ]
                              })();
                              return v2;
                          })();
                          var v3 = (function __do() {
                              var v3 = Graphics_Babylon_StandardMaterial.createStandardMaterial("grass-block")(scene)();
                              var v4 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                              Graphics_Babylon_StandardMaterial.setSpecularColor(v4)(v3)();
                              Graphics_Babylon_StandardMaterial.setDiffuseTexture(texture)(v3)();
                              return v3;
                          })();
                          var v4 = (function () {
                              if (v.enableWaterMaterial) {
                                  return function __do() {
                                      var v4 = Graphics_Babylon_WaterMaterial.createWaterMaterial("water-block")(scene)();
                                      var v5 = Graphics_Babylon_Texture.createTexture("waterbump.png")(scene)(Graphics_Babylon_Texture.defaultCreateTextureOptions)();
                                      Graphics_Babylon_WaterMaterial.setBumpTexture(v5)(v4)();
                                      Graphics_Babylon_WaterMaterial.addToRenderList(Graphics_Babylon_Mesh.meshToAbstractMesh(skybox))(v4)();
                                      Graphics_Babylon_WaterMaterial.setWaveHeight(0.0)(v4)();
                                      Graphics_Babylon_WaterMaterial.setWindForce(1.0)(v4)();
                                      return Graphics_Babylon_WaterMaterial.waterMaterialToMaterial(v4);
                                  };
                              };
                              if (!v.enableWaterMaterial) {
                                  return function __do() {
                                      var v4 = Graphics_Babylon_StandardMaterial.createStandardMaterial("water-block")(scene)();
                                      var v5 = Graphics_Babylon_Color3.createColor3(50.0 / 255.0)(50.0 / 255.0)(60.0 / 255.0)();
                                      Graphics_Babylon_StandardMaterial.setDiffuseColor(v5)(v4)();
                                      Graphics_Babylon_Material.setAlpha(0.7)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v4))();
                                      return Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v4);
                                  };
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Materials line 72, column 22 - line 87, column 50: " + [ v.enableWaterMaterial.constructor.name ]);
                          })()();
                          var v5 = (function __do() {
                              var v5 = Graphics_Babylon_StandardMaterial.createStandardMaterial("bush-material")(scene)();
                              Graphics_Babylon_StandardMaterial.setDiffuseTexture(alphaTexture)(v5)();
                              Graphics_Babylon_Material.setAlpha(0.8)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v5))();
                              var v6 = Graphics_Babylon_Color3.createColor3(0.35)(0.5)(0.3)();
                              Graphics_Babylon_StandardMaterial.setDiffuseColor(v6)(v5)();
                              Graphics_Babylon_StandardMaterial.setUseAlphaFromDiffuseTexture(true)(v5)();
                              return v5;
                          })();
                          return {
                              blockMaterial: Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v3), 
                              waterMaterial: v4, 
                              cellShadingMaterial: Graphics_Babylon_ShaderMaterial.shaderMaterialToMaterial(v1), 
                              bushMaterial: Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v5), 
                              outlineMaterial: Graphics_Babylon_ShaderMaterial.shaderMaterialToMaterial(v2)
                          };
                      };
                  };
              };
          };
      };
  };
  exports["initializeMaterials"] = initializeMaterials;
})(PS["Game.Cubbit.Materials"] = PS["Game.Cubbit.Materials"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports._loadSound = function(name){
      return function(url){
          return function(scene){
              return function(options){
                  return function(){
                      return function(resolve){
                          return function(){
                              var sound = new BABYLON.Sound(name, url, scene, function(){
                                  resolve(sound)();
                              }, options);
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Babylon.Aff.Sound"] = PS["Graphics.Babylon.Aff.Sound"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Aff.Sound"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var loadSound = function (name) {
      return function (url) {
          return function (scene) {
              return function (options) {
                  return Control_Monad_Aff.makeAff($foreign._loadSound(name)(url)(scene)(options));
              };
          };
      };
  };
  exports["loadSound"] = loadSound;
})(PS["Graphics.Babylon.Aff.Sound"] = PS["Graphics.Babylon.Aff.Sound"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.play = function(sound){
      return function(){
          //sound.play();
      };
  };

  exports.stop = function(sound){
      return function(){
          sound.stop();
      };
  };

  exports.setVolume = function(volume){
      return function(sound){
          return function(){
              sound.setVolume(volume);
          };
      };
  };
})(PS["Graphics.Babylon.Sound"] = PS["Graphics.Babylon.Sound"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Sound"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var defaultCreateSoundOptions = {
      loop: false, 
      autoplay: false, 
      playbackRate: 1.0, 
      volume: 1.0
  };
  exports["defaultCreateSoundOptions"] = defaultCreateSoundOptions;
  exports["play"] = $foreign.play;
  exports["setVolume"] = $foreign.setVolume;
  exports["stop"] = $foreign.stop;
})(PS["Graphics.Babylon.Sound"] = PS["Graphics.Babylon.Sound"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Array = PS["Data.Array"];
  var Data_Int = PS["Data.Int"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Aff = PS["Game.Cubbit.Aff"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Graphics_Babylon_Aff_Sound = PS["Graphics.Babylon.Aff.Sound"];
  var Graphics_Babylon_Sound = PS["Graphics.Babylon.Sound"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Prelude = PS["Prelude"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var stopBGMAff = function (volume) {
      return function (sounds) {
          var playVolume = Data_Int.toNumber(volume) / Data_Int.toNumber(Game_Cubbit_Constants.sliderMaxValue);
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableArray)(Data_Array.range(0)(9))(function (i) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(sounds.bgms)(Graphics_Babylon_Sound.setVolume(playVolume * (Data_Int.toNumber(10 - i) / 10.0)))))(function () {
                  return Game_Cubbit_Aff.wait(Control_Monad_Aff_Class.monadAffAff)(100);
              });
          }))(function () {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Aff.wait(Control_Monad_Aff_Class.monadAffAff)(1000))(function () {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(sounds.bgms)(Graphics_Babylon_Sound.stop));
              });
          });
      };
  };
  var stopBGM = function (volume) {
      return function (sounds) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.errorShow(Control_Monad_Eff_Exception.showError))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(stopBGMAff(volume)(sounds)));
      };
  };
  var setSEVolume = function (volume) {
      return function (sounds) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(sounds.ses)(Graphics_Babylon_Sound.setVolume(volume));
      };
  };
  var setMute = function (mute) {
      return function (sounds) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(sounds.all)(Graphics_Babylon_Sound.setVolume((function () {
              if (mute) {
                  return 0.0;
              };
              if (!mute) {
                  return 1.0;
              };
              throw new Error("Failed pattern match at Game.Cubbit.Sounds line 93, column 51 - line 93, column 76: " + [ mute.constructor.name ]);
          })()));
      };
  };
  var setBGMVolume = function (volume) {
      return function (sounds) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(sounds.bgms)(Graphics_Babylon_Sound.setVolume(volume));
      };
  };
  var playBGM = function (sound) {
      return function (volume) {
          return function (sounds) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.errorShow(Control_Monad_Eff_Exception.showError))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Control_Bind.bind(Control_Monad_Aff.bindAff)(stopBGMAff(volume)(sounds))(function () {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                      Graphics_Babylon_Sound.setVolume(Data_Int.toNumber(volume) / Data_Int.toNumber(Game_Cubbit_Constants.sliderMaxValue))(sound)();
                      return Graphics_Babylon_Sound.play(sound)();
                  });
              })));
          };
      };
  };
  var loadSounds = function (scene) {
      return function (inc) {
          var load = function (url) {
              return function (loop) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Aff_Sound.loadSound(url)(url)(scene)((function () {
                      var $11 = {};
                      for (var $12 in Graphics_Babylon_Sound.defaultCreateSoundOptions) {
                          if (Graphics_Babylon_Sound.defaultCreateSoundOptions.hasOwnProperty($12)) {
                              $11[$12] = Graphics_Babylon_Sound.defaultCreateSoundOptions[$12];
                          };
                      };
                      $11.autoplay = false;
                      $11.loop = loop;
                      return $11;
                  })()))(function (v) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(inc)(function () {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                      });
                  });
              };
          };
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/Your_natural.mp3")(true))(function (v) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/rye.mp3")(true))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/cleaningstream.mp3")(true))(function (v2) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/forest.mp3")(true))(function (v3) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/step13a.mp3")(true))(function (v4) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/tm2_switch001.mp3")(false))(function (v5) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/bosu06.mp3")(false))(function (v6) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/bosu28_c.mp3")(false))(function (v7) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(load("sound/warp01.mp3")(false))(function (v8) {
                                              var bgms = [ v1, v, v2 ];
                                              var ses = [ v3, v5, v6, v7, v4, v8 ];
                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                                                  rye: v1, 
                                                  yourNatural: v, 
                                                  cleaning: v2, 
                                                  forestSound: v3, 
                                                  switchSound: v5, 
                                                  pickSound: v6, 
                                                  putSound: v7, 
                                                  stepSound: v4, 
                                                  warpSound: v8, 
                                                  bgms: bgms, 
                                                  ses: ses, 
                                                  all: Data_Semigroup.append(Data_Semigroup.semigroupArray)(bgms)(ses)
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["loadSounds"] = loadSounds;
  exports["playBGM"] = playBGM;
  exports["setBGMVolume"] = setBGMVolume;
  exports["setMute"] = setMute;
  exports["setSEVolume"] = setSEVolume;
  exports["stopBGM"] = stopBGM;
})(PS["Game.Cubbit.Sounds"] = PS["Game.Cubbit.Sounds"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports._loadMesh = function(meshesNames){
      return function(rootUrl){
          return function(sceneFilename){
              return function(scene){
                  return function(onsuccess){
                      return function(progressCallBack){
                          return function(onerror){
                              return function(){
                                  BABYLON.SceneLoader.ImportMesh(
                                      meshesNames, rootUrl, sceneFilename, scene,
                                      function(result){
                                          onsuccess(result)();
                                      },
                                      function(e){
                                          progressCallBack(e)();
                                      },
                                      function(e){
                                          onerror(e)();
                                      }
                                  );
                              };
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Babylon.Aff.SceneLoader"] = PS["Graphics.Babylon.Aff.SceneLoader"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Aff.SceneLoader"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var loadMesh = function (meshesNames) {
      return function (rootUrl) {
          return function (sceneFilename) {
              return function (scene) {
                  return function (progressCallBack) {
                      return Control_Monad_Aff.makeAff(function (reject) {
                          return function (resolve) {
                              return $foreign._loadMesh(meshesNames)(rootUrl)(sceneFilename)(scene)(resolve)(progressCallBack)(reject);
                          };
                      });
                  };
              };
          };
      };
  };
  exports["loadMesh"] = loadMesh;
})(PS["Graphics.Babylon.Aff.SceneLoader"] = PS["Graphics.Babylon.Aff.SceneLoader"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports._loadTexture = function(path){
      return function(scene){
          return function(options){
              return function(reject){
                  return function(resolve){
                      return function(){
                          var texture = new BABYLON.Texture(path, scene, options.noMipmap, options.invertY, options.samplingMode,
                              function(){
                                  options.onLoad({})();
                                  resolve(texture)();
                              },
                              function(){
                                  options.onError({})();
                                  reject(new Error())();
                              })
                           ;
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Babylon.Aff.Texture"] = PS["Graphics.Babylon.Aff.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Aff.Texture"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var loadTexture = function (src) {
      return function (scene) {
          return function (options) {
              return Control_Monad_Aff.makeAff($foreign._loadTexture(src)(scene)(options));
          };
      };
  };
  exports["loadTexture"] = loadTexture;
})(PS["Graphics.Babylon.Aff.Texture"] = PS["Graphics.Babylon.Aff.Texture"] || {});
(function(exports) {
    "use strict";

  exports.setPosition = function(position){
      return function(camera){
          return function(){
              camera.position = position;
          };
      };
  };

  exports.setMaxZ = function(maxZ){
      return function(camera){
          return function(){
              camera.maxZ = maxZ;
          };
      };
  };

  exports.setMinZ = function(minZ){
      return function(camera){
          return function(){
              camera.minZ = minZ;
          };
      };
  };

  exports.setFOV = function(fov){
      return function(camera){
          return function(){
              camera.fov = fov;
          };
      };
  };
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Camera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["setFOV"] = $foreign.setFOV;
  exports["setMaxZ"] = $foreign.setMaxZ;
  exports["setMinZ"] = $foreign.setMinZ;
  exports["setPosition"] = $foreign.setPosition;
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createCubeTexture = function(path){
      return function(scene){
          return function(){

              // HACK
              ///BABYLON.CubeTexture.prototype.getTextureMatrix = function(){
              //    return this._textureMatrix;
              //}


              var tex = new BABYLON.CubeTexture(path, scene);



              return tex;
          };
      };
  };

  exports.cubeTextureToTexture = function(tex){
      return tex;
  };
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.CubeTexture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createCubeTexture"] = $foreign.createCubeTexture;
  exports["cubeTextureToTexture"] = $foreign.cubeTextureToTexture;
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createDirectionalLight = function(id){
      return function(direction){
          return function(scene){
              return function(){
                  return new BABYLON.DirectionalLight(id, direction, scene);
              };
          };
      };
  };


  exports.directionalLightToLight = function(light){
      return light;
  };
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.DirectionalLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createDirectionalLight"] = $foreign.createDirectionalLight;
  exports["directionalLightToLight"] = $foreign.directionalLightToLight;
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createEngine = function(canvas){
      return function(antialias){
          return function(){
              return new BABYLON.Engine(canvas, antialias);
          };
      };
  };


  exports.runRenderLoop = function(callback){
      return function(engine){
          return function(){
              engine.runRenderLoop(callback);
          };
      };
  };

  exports.getDeltaTime = function(engine){
      return function(){
          return engine.getDeltaTime();
      };
  };

  exports.resize = function(engine){
      return function(){
          engine.resize();
      };
  };
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Engine"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createEngine"] = $foreign.createEngine;
  exports["getDeltaTime"] = $foreign.getDeltaTime;
  exports["resize"] = $foreign.resize;
  exports["runRenderLoop"] = $foreign.runRenderLoop;
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createHemisphericLight = function(id){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.HemisphericLight(id, position, scene);
              };
          };
      };
  };


  exports.hemisphericLightToLight = function(light){
      return light;
  };
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.HemisphericLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createHemisphericLight"] = $foreign.createHemisphericLight;
  exports["hemisphericLightToLight"] = $foreign.hemisphericLightToLight;
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {
    "use strict";

  exports.setDiffuse = function(color){
      return function(light){
          return function(){
              light.diffuse = color;
          };
      };
  };
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Light"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["setDiffuse"] = $foreign.setDiffuse;
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
    "use strict";

  exports.getName = function(node){
      return node.name;
  };
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["getName"] = $foreign.getName;
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createScene = function(engine){
      return function(){
          return new BABYLON.Scene(engine);
      };
  };

  exports.render = function(scene){
      return function(){
          scene.render();
      };
  };

  exports.fOGMODE_EXP = BABYLON.Scene.FOGMODE_EXP;

  exports.setFogMode = function(fogMode){
      return function(scene){
          return function(){
              scene.fogMode = fogMode;
          };
      };
  };

  exports.setFogDensity = function(fogDensity){
      return function(scene){
          return function(){
              scene.fogDensity = fogDensity;
          };
      };
  };

  exports.setFogColor = function(fogColor){
      return function(scene){
          return function(){
              scene.fogColor = fogColor;
          };
      };
  };

  exports.setCollisionsEnabled = function(collisionsEnabled){
      return function(scene){
          return function(){
              scene.collisionsEnabled = collisionsEnabled;
          };
      };
  };

  exports.getDebugLayer = function(scene){
      return function(){
          return scene.debugLayer;
      };
  };

  exports.pick = function(x){
      return function(y){
          return function(predicate){
              return function(fastCheck){
                  return function(scene){
                      return function(){
                          return scene.pick(x, y, function(mesh){
                              return predicate(mesh)();
                          }, fastCheck);
                      };
                  };
              };
          };
      };
  };

  exports.pickWithRay = function(ray){
      return function(predicate){
          return function(fastCheck){
              return function(scene){
                  return function(){
                      return scene.pickWithRay(ray, function(mesh){
                          return predicate(mesh)();
                      }, fastCheck);
                  };
              };
          };
      };
  };

  exports.setActiveCamera = function(camera){
      return function(scene){
          return function(){
              scene.activeCamera = camera;
          };
      };
  };

  exports.setActiveCameras = function(cameras){
      return function(scene){
          return function(){
              scene.activeCameras = cameras;
          };
      };
  };
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Scene"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createScene"] = $foreign.createScene;
  exports["fOGMODE_EXP"] = $foreign.fOGMODE_EXP;
  exports["getDebugLayer"] = $foreign.getDebugLayer;
  exports["pick"] = $foreign.pick;
  exports["pickWithRay"] = $foreign.pickWithRay;
  exports["render"] = $foreign.render;
  exports["setActiveCamera"] = $foreign.setActiveCamera;
  exports["setActiveCameras"] = $foreign.setActiveCameras;
  exports["setCollisionsEnabled"] = $foreign.setCollisionsEnabled;
  exports["setFogColor"] = $foreign.setFogColor;
  exports["setFogDensity"] = $foreign.setFogDensity;
  exports["setFogMode"] = $foreign.setFogMode;
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createShadowGenerator = function(size){
      return function(light){
          return function(){
              return new BABYLON.ShadowGenerator(size, light);
          };
      };
  };

  exports.getShadowMap = function(shadowGenerator){
      return function(){
          return shadowGenerator.getShadowMap();
      };
  };

  exports.setRenderList = function(renderList){
      return function(shadowMap){
          return function(){
              shadowMap.renderList = renderList.filter(function(mesh){
                  return (0 < mesh.getTotalVertices()) && ( ( ! mesh.skeleton) || mesh.skeleton.getTransformMatrices(mesh) );
              });
          };
      };
  };

  exports.setBias = function(bias){
      return function(generator){
          return function(){
              generator.bias = bias;
          };
      };
  };

  exports.setUsePoissonSampling = function(usePoissonSampling){
      return function(generator){
          return function(){
              generator.usePoissonSampling = usePoissonSampling;
          };
      };
  };
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.ShadowGenerator"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createShadowGenerator"] = $foreign.createShadowGenerator;
  exports["getShadowMap"] = $foreign.getShadowMap;
  exports["setBias"] = $foreign.setBias;
  exports["setRenderList"] = $foreign.setRenderList;
  exports["setUsePoissonSampling"] = $foreign.setUsePoissonSampling;
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createTargetCamera = function(name){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.TargetCamera(name, position, scene);
              };
          };
      };
  };

  exports.targetCameraToCamera = function(camera){
      return camera;
  };

  exports.setTarget = function(position){
      return function(camera){
          return function(){
              camera.setTarget(position);
          };
      };
  };
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.TargetCamera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createTargetCamera"] = $foreign.createTargetCamera;
  exports["setTarget"] = $foreign.setTarget;
  exports["targetCameraToCamera"] = $foreign.targetCameraToCamera;
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  // module Network.HTTP.Affjax

  // jshint maxparams: 5
  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function () {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        try {
          for (var i = 0, header; (header = options.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        }
        catch (e) {
          errback(e)();
        }
      }
      xhr.onerror = function () {
        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
      };
      xhr.onload = function () {
        callback({
          status: xhr.status,
          headers: xhr.getAllResponseHeaders().split("\r\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          response: platformSpecific.getResponse(xhr)
        })();
      };
      xhr.responseType = options.responseType;
      xhr.withCredentials = options.withCredentials;
      xhr.send(options.content);
      return canceler(xhr);
    };
  };

  // jshint maxparams: 4
  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
    return function () {
      try { xhr.abort(); } catch (e) { return callback(false)(); }
      return callback(true)();
    };
  };
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce($0));
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 49, column 1 - line 50, column 1: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                                                                                                                                        
  var responsableString = new Respondable(Data_Foreign.readString, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, StringResponse.value));
  var responsableForeign = new Respondable(function ($9) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Unsafe_Coerce.unsafeCoerce($9));
  }, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, JSONResponse.value));                                                                                               
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["Respondable"] = Respondable;
  exports["fromResponse"] = fromResponse;
  exports["responseType"] = responseType;
  exports["responseTypeToString"] = responseTypeToString;
  exports["responsableForeign"] = responsableForeign;
  exports["responsableString"] = responsableString;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 30, column 1 - line 30, column 41: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 25, column 1 - line 26, column 1: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Show = PS["Data.Show"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value), 
      url: "/", 
      headers: [  ], 
      content: Data_Maybe.Nothing.value, 
      username: Data_Maybe.Nothing.value, 
      password: Data_Maybe.Nothing.value, 
      withCredentials: false
  };
  var cancelAjax = function (xhr) {
      return function (err) {
          return Control_Monad_Aff.makeAff(function (eb) {
              return function (cb) {
                  return $foreign._cancelAjax(xhr, err, eb, cb);
              };
          });
      };
  };
  var affjax$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              return function (eb) {
                  return function (cb) {
                      var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
                      var requestSettings = (function () {
                          var $55 = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                          if ($55 instanceof Data_Maybe.Nothing) {
                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          if ($55 instanceof Data_Maybe.Just) {
                              return new Data_Tuple.Tuple($55.value0.value0, new Data_Maybe.Just($55.value0.value1));
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 257, column 21 - line 259, column 49: " + [ $55.constructor.name ]);
                      })();
                      var fromResponse$prime = (function () {
                          var $59 = Data_Tuple.snd(responseSettings);
                          if ($59 instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.parseJSON)(Data_Foreign.readString));
                          };
                          return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
                      })();
                      var cb$prime = function (res) {
                          var $63 = Data_Functor.map(Data_Either.functorEither)(function (v) {
                              var $60 = {};
                              for (var $61 in res) {
                                  if (res.hasOwnProperty($61)) {
                                      $60[$61] = res[$61];
                                  };
                              };
                              $60.response = v;
                              return $60;
                          })(Control_Monad_Except.runExcept(fromResponse$prime(res.response)));
                          if ($63 instanceof Data_Either.Left) {
                              return eb(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))($63.value0)));
                          };
                          if ($63 instanceof Data_Either.Right) {
                              return cb($63.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 276, column 13 - line 278, column 26: " + [ $63.constructor.name ]);
                      };
                      var addHeader = function (mh) {
                          return function (hs) {
                              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                                  return Data_Array.snoc(hs)(mh.value0);
                              };
                              return hs;
                          };
                      };
                      var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
                      var req$prime = {
                          method: Data_HTTP_Method.print(req.method), 
                          url: req.url, 
                          headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                              return {
                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                              };
                          })(headers), 
                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
                          username: Data_Nullable.toNullable(req.username), 
                          password: Data_Nullable.toNullable(req.password), 
                          withCredentials: req.withCredentials
                      };
                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
                  };
              };
          };
      };
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function ($93) {
              return Control_Monad_Aff["makeAff'"](affjax$prime(dictRequestable)(dictRespondable)($93));
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $71 = {};
              for (var $72 in defaultRequest) {
                  if (defaultRequest.hasOwnProperty($72)) {
                      $71[$72] = defaultRequest[$72];
                  };
              };
              $71.url = u;
              return $71;
          })());
      };
  };
  exports["affjax"] = affjax;
  exports["defaultRequest"] = defaultRequest;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
    "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var DOM = PS["DOM"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Aff = PS["Game.Cubbit.Aff"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Materials = PS["Game.Cubbit.Materials"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_Sounds = PS["Game.Cubbit.Sounds"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Aff_SceneLoader = PS["Graphics.Babylon.Aff.SceneLoader"];
  var Graphics_Babylon_Aff_Texture = PS["Graphics.Babylon.Aff.Texture"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_CubeTexture = PS["Graphics.Babylon.CubeTexture"];
  var Graphics_Babylon_DirectionalLight = PS["Graphics.Babylon.DirectionalLight"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_HemisphericLight = PS["Graphics.Babylon.HemisphericLight"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_ShadowGenerator = PS["Graphics.Babylon.ShadowGenerator"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Applicative = PS["Control.Applicative"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];        

  /**
 *  Note: Keep the number up-to-date
 */  
  var resourceCount = 20;
  var loadResources = function (canvasGL) {
      return function (inc) {
          var loadImage$prime = function (url) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Aff.loadImage(url))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(inc)(function () {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                  });
              });
          };
          var loadTexture$prime = function (url) {
              return function (s) {
                  return function (o) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Aff_Texture.loadTexture(url)(s)(o))(function (v) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(inc)(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                          });
                      });
                  };
              };
          };
          var loadMesh$prime = function (name) {
              return function (dir) {
                  return function (file) {
                      return function (s) {
                          return function (p) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Aff_SceneLoader.loadMesh(name)(dir)(file)(s)(p))(function (v) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(inc)(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                                  });
                              });
                          };
                      };
                  };
              };
          };
          var loadText = function (url) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableString)(url))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(inc)(function () {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.response);
                  });
              });
          };
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableForeign)("options.json"))(function (v) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                  var $43 = Control_Monad_Except.runExcept(Game_Cubbit_Option.readOptions(v.response));
                  if ($43 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))($43.value0)));
                  };
                  if ($43 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)($43.value0);
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Resources line 92, column 24 - line 94, column 30: " + [ $43.constructor.name ]);
              })())(function (v1) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Graphics_Babylon_Engine.createEngine(canvasGL)(true)))(function (v2) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                          var v3 = Graphics_Babylon_Scene.createScene(v2)();
                          Graphics_Babylon_Scene.setFogMode(Graphics_Babylon_Scene.fOGMODE_EXP)(v3)();
                          Graphics_Babylon_Scene.setFogDensity(v1.fogDensity)(v3)();
                          var v4 = Graphics_Babylon_Color3.createColor3(155.0 / 255.0)(181.0 / 255.0)(230.0 / 255.0)();
                          Graphics_Babylon_Scene.setFogColor(v4)(v3)();
                          Graphics_Babylon_Scene.setCollisionsEnabled(true)(v3)();
                          return v3;
                      }))(function (v3) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadImage$prime("./image/title.png"))(function () {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadImage$prime("./image/screenshade.png"))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadTexture$prime("./image/texture.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function (v4) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadTexture$prime("./image/alpha.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function (v5) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadTexture$prime("./alice/texture.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function () {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadMesh$prime("")("./alice/")("alice.babylon")(v3)(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)))(function (v6) {
                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadText("./alice/cellShading.fragment.fx"))(function () {
                                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadText("./alice/cellShading.vertex.fx"))(function () {
                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadText("./alice/outline.fragment.fx"))(function () {
                                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadText("./alice/outline.vertex.fx"))(function () {
                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(loadText("./alice/alice.babylon.manifest"))(function () {
                                                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Sounds.loadSounds(v3)(inc))(function (v7) {
                                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                                                              var v8 = Graphics_Babylon_Mesh.createBox("cursor")(1.0)(v3)();
                                                                              Graphics_Babylon_AbstractMesh.setRenderingGroupId(1)(Graphics_Babylon_Mesh.meshToAbstractMesh(v8))();
                                                                              Graphics_Babylon_AbstractMesh.setIsPickable(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v8))();
                                                                              Graphics_Babylon_AbstractMesh.setIsVisible(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v8))();
                                                                              var v9 = Graphics_Babylon_StandardMaterial.createStandardMaterial("cursormat")(v3)();
                                                                              Graphics_Babylon_Material.setWireframe(true)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v9))();
                                                                              Graphics_Babylon_Material.setZOffset(-1.0e-2)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v9))();
                                                                              Graphics_Babylon_AbstractMesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v9))(Graphics_Babylon_Mesh.meshToAbstractMesh(v8))();
                                                                              return v8;
                                                                          }))(function (v8) {
                                                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                                                                  var v9 = Graphics_Babylon_CubeTexture.createCubeTexture("skybox/skybox")(v3)();
                                                                                  Graphics_Babylon_Texture.setCoordinatesMode(Graphics_Babylon_Texture.sKYBOX_MODE)(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v9))();
                                                                                  var v10 = Graphics_Babylon_StandardMaterial.createStandardMaterial("skyBox/skybox")(v3)();
                                                                                  Graphics_Babylon_Material.setFogEnabled(false)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v10))();
                                                                                  Graphics_Babylon_StandardMaterial.setBackFaceCulling(false)(v10)();
                                                                                  Graphics_Babylon_StandardMaterial.setDisableLighting(true)(v10)();
                                                                                  var v11 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                                                                                  Graphics_Babylon_StandardMaterial.setDiffuseColor(v11)(v10)();
                                                                                  var v12 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                                                                                  Graphics_Babylon_StandardMaterial.setSpecularColor(v12)(v10)();
                                                                                  Graphics_Babylon_StandardMaterial.setReflectionTexture(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v9))(v10)();
                                                                                  var v13 = Graphics_Babylon_Mesh.createBox("skybox")(1000.0)(v3)();
                                                                                  Graphics_Babylon_AbstractMesh.setRenderingGroupId(Game_Cubbit_Constants.skyBoxRenderingGruop)(Graphics_Babylon_Mesh.meshToAbstractMesh(v13))();
                                                                                  Graphics_Babylon_AbstractMesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v10))(Graphics_Babylon_Mesh.meshToAbstractMesh(v13))();
                                                                                  Graphics_Babylon_Mesh.setInfiniteDistance(true)(v13)();
                                                                                  return v13;
                                                                              }))(function (v9) {
                                                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Game_Cubbit_Materials.initializeMaterials(v3)(v9)(v4)(v5)(v1)))(function (v10) {
                                                                                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                                                                          var v11 = (function __do() {
                                                                                              var v11 = Graphics_Babylon_Vector3.createVector3(10.0)(20.0)(-10.0)();
                                                                                              var v12 = Graphics_Babylon_TargetCamera.createTargetCamera("target-camera")(v11)(v3)();
                                                                                              var v13 = Graphics_Babylon_Vector3.createVector3(0.0)(8.0)(0.0)();
                                                                                              Graphics_Babylon_TargetCamera.setTarget(v13)(v12)();
                                                                                              Graphics_Babylon_Camera.setMaxZ(v1.cameraMaxZ)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v12))();
                                                                                              Graphics_Babylon_Camera.setMinZ(v1.cameraMinZ)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v12))();
                                                                                              Graphics_Babylon_Camera.setFOV(v1.cameraFOV)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v12))();
                                                                                              return v12;
                                                                                          })();
                                                                                          Graphics_Babylon_Scene.setActiveCameras([ Graphics_Babylon_TargetCamera.targetCameraToCamera(v11) ])(v3)();
                                                                                          Graphics_Babylon_Scene.setActiveCamera(Graphics_Babylon_TargetCamera.targetCameraToCamera(v11))(v3)();
                                                                                          (function __do() {
                                                                                              var v12 = Graphics_Babylon_Vector3.createVector3(0.0)(1.0)(0.0)();
                                                                                              var v13 = Graphics_Babylon_HemisphericLight.createHemisphericLight("Hemi0")(v12)(v3)();
                                                                                              var v14 = Graphics_Babylon_Color3.createColor3(0.6)(0.6)(0.6)();
                                                                                              return Graphics_Babylon_Light.setDiffuse(v14)(Graphics_Babylon_HemisphericLight.hemisphericLightToLight(v13))();
                                                                                          })();
                                                                                          var v12 = (function __do() {
                                                                                              var v12 = Graphics_Babylon_Vector3.createVector3(0.3)(-1.0)(0.5)();
                                                                                              var v13 = Graphics_Babylon_DirectionalLight.createDirectionalLight("light1")(v12)(v3)();
                                                                                              var v14 = Graphics_Babylon_Color3.createColor3(0.8)(0.8)(0.8)();
                                                                                              Graphics_Babylon_Light.setDiffuse(v14)(Graphics_Babylon_DirectionalLight.directionalLightToLight(v13))();
                                                                                              var v15 = Graphics_Babylon_ShadowGenerator.createShadowGenerator(v1.shadowMapSize)(v13)();
                                                                                              Graphics_Babylon_ShadowGenerator.setBias(5.0e-6)(v15)();
                                                                                              Graphics_Babylon_ShadowGenerator.setUsePoissonSampling(true)(v15)();
                                                                                              return Graphics_Babylon_ShadowGenerator.getShadowMap(v15)();
                                                                                          })();
                                                                                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(v6)(function (mesh) {
                                                                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                                                                  var v13 = Graphics_Babylon_Vector3.createVector3(0.5)(13.0)(0.5)();
                                                                                                  Graphics_Babylon_AbstractMesh.setPosition(v13)(mesh)();
                                                                                                  Graphics_Babylon_AbstractMesh.setRenderingGroupId(1)(mesh)();
                                                                                                  Graphics_Babylon_AbstractMesh.setReceiveShadows(true)(mesh)();
                                                                                                  var v14 = Graphics_Babylon_AbstractMesh.getSkeleton(mesh)();
                                                                                                  var name = Graphics_Babylon_Node.getName(Unsafe_Coerce.unsafeCoerce(mesh));
                                                                                                  Graphics_Babylon_AbstractMesh.setMaterial((function () {
                                                                                                      var $79 = Data_String.contains("-outline")(name);
                                                                                                      if ($79) {
                                                                                                          return v10.outlineMaterial;
                                                                                                      };
                                                                                                      if (!$79) {
                                                                                                          return v10.cellShadingMaterial;
                                                                                                      };
                                                                                                      throw new Error("Failed pattern match at Game.Cubbit.Resources line 204, column 26 - line 204, column 129: " + [ $79.constructor.name ]);
                                                                                                  })())(mesh)();
                                                                                                  return Graphics_Babylon_AbstractMesh.setIsVisible(false)(mesh)();
                                                                                              });
                                                                                          })();
                                                                                          return {
                                                                                              options: v1, 
                                                                                              engine: v2, 
                                                                                              scene: v3, 
                                                                                              skybox: v9, 
                                                                                              cursor: v8, 
                                                                                              materials: v10, 
                                                                                              shadowMap: v12, 
                                                                                              targetCamera: v11, 
                                                                                              playerMeshes: v6, 
                                                                                              sounds: v7
                                                                                          };
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["loadResources"] = loadResources;
  exports["resourceCount"] = resourceCount;
})(PS["Game.Cubbit.Resources"] = PS["Game.Cubbit.Resources"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var DOM_WebStorage = PS["DOM.WebStorage"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Set = PS["Data.Set"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Resources = PS["Game.Cubbit.Resources"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Vec = PS["Game.Cubbit.Vec"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];        
  var Loading = (function () {
      function Loading(value0) {
          this.value0 = value0;
      };
      Loading.create = function (value0) {
          return new Loading(value0);
      };
      return Loading;
  })();
  var Complete = (function () {
      function Complete(value0) {
          this.value0 = value0;
      };
      Complete.create = function (value0) {
          return new Complete(value0);
      };
      return Complete;
  })();
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var Put = (function () {
      function Put(value0) {
          this.value0 = value0;
      };
      Put.create = function (value0) {
          return new Put(value0);
      };
      return Put;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  var TitleSceneState = (function () {
      function TitleSceneState(value0) {
          this.value0 = value0;
      };
      TitleSceneState.create = function (value0) {
          return new TitleSceneState(value0);
      };
      return TitleSceneState;
  })();
  var PlayingSceneState = (function () {
      function PlayingSceneState(value0) {
          this.value0 = value0;
      };
      PlayingSceneState.create = function (value0) {
          return new PlayingSceneState(value0);
      };
      return PlayingSceneState;
  })();
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Move && y instanceof Move) {
              return true;
          };
          if (x instanceof Put && y instanceof Put) {
              return Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(x.value0)(y.value0);
          };
          if (x instanceof Remove && y instanceof Remove) {
              return true;
          };
          return false;
      };
  });
  exports["Move"] = Move;
  exports["Put"] = Put;
  exports["Remove"] = Remove;
  exports["Loading"] = Loading;
  exports["Complete"] = Complete;
  exports["TitleSceneState"] = TitleSceneState;
  exports["PlayingSceneState"] = PlayingSceneState;
  exports["eqMode"] = eqMode;
})(PS["Game.Cubbit.Types"] = PS["Game.Cubbit.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.Collesion"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Cannon = PS["Graphics.Cannon"];
  var Graphics_Cannon_Body = PS["Graphics.Cannon.Body"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Graphics_Cannon_Vec3 = PS["Graphics.Cannon.Vec3"];
  var Graphics_Cannon_World = PS["Graphics.Cannon.World"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];        
  var updatePhysics = function (deltaTime) {
      return function (playerBox) {
          return function (world) {
              return function (v) {
                  if (v.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v);
                  };
                  if (v.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                      return function __do() {
                          var v1 = Graphics_Cannon_Vec3.createVec3(v.sceneState.value0.position.x)(v.sceneState.value0.position.y)(v.sceneState.value0.position.z)();
                          Graphics_Cannon_Body.setPosition(v1)(playerBox)();
                          var v2 = Graphics_Cannon_Vec3.createVec3(v.sceneState.value0.velocity.x)(v.sceneState.value0.velocity.y)(v.sceneState.value0.velocity.z)();
                          Graphics_Cannon_Body.setVelocity(v2)(playerBox)();
                          Graphics_Cannon_World.step(1.0 / 60.0)(1000.0 / deltaTime)(10)(world)();
                          var v3 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Cannon_Body.getPosition(playerBox))(Graphics_Cannon_Vec3.runVec3)();
                          var v4 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Cannon_Body.getVelocity(playerBox))(Graphics_Cannon_Vec3.runVec3)();
                          var $38 = {};
                          for (var $39 in v) {
                              if (v.hasOwnProperty($39)) {
                                  $38[$39] = v[$39];
                              };
                          };
                          $38.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                              var $35 = {};
                              for (var $36 in v.sceneState.value0) {
                                  if (v.sceneState.value0.hasOwnProperty($36)) {
                                      $35[$36] = v.sceneState.value0[$36];
                                  };
                              };
                              $35.position = v3;
                              $35.velocity = v4;
                              return $35;
                          })());
                          return $38;
                      };
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Collesion line 67, column 57 - line 86, column 10: " + [ v.sceneState.constructor.name ]);
              };
          };
      };
  };
  var createPlayerCollesion = function __do() {
      var v = Graphics_Cannon_Vec3.createVec3(0.5)(0.5)(0.5)();
      var v1 = Graphics_Cannon_Vec3.createVec3(2.5)(17.0)(2.5)();
      var v2 = Graphics_Cannon.createMaterial({
          friction: 0.0, 
          restitution: 0.0
      })();
      var v3 = Graphics_Cannon_Body.createBody((function () {
          var $45 = {};
          for (var $46 in Graphics_Cannon_Body.defaultBodyProps) {
              if (Graphics_Cannon_Body.defaultBodyProps.hasOwnProperty($46)) {
                  $45[$46] = Graphics_Cannon_Body.defaultBodyProps[$46];
              };
          };
          $45.mass = 1.0;
          $45.material = v2;
          return $45;
      })())();
      var v4 = Graphics_Cannon.createSphere(0.4)();
      var v5 = Graphics_Cannon_Vec3.createVec3(0.0)(1.2)(0.0)();
      Graphics_Cannon_Body.addShape(v4)(new Data_Maybe.Just(v5))(Data_Maybe.Nothing.value)(v3)();
      var v6 = Graphics_Cannon.createSphere(0.4)();
      var v7 = Graphics_Cannon_Vec3.createVec3(0.0)(0.4)(0.0)();
      Graphics_Cannon_Body.addShape(v6)(new Data_Maybe.Just(v7))(Data_Maybe.Nothing.value)(v3)();
      Graphics_Cannon_Body.setPosition(v1)(v3)();
      Graphics_Cannon_Body.setTag(new Data_Maybe.Just("player"))(v3)();
      Graphics_Cannon_Body.setFixedRotation(true)(v3)();
      Graphics_Cannon_Body.updateMassProperties(v3)();
      return v3;
  };
  var buildCollesionBoxes = $foreign._buildCollesionBoxes({
      chunkSize: Game_Cubbit_Constants.chunkSize, 
      localIndex: Game_Cubbit_LocalIndex.localIndex, 
      isSolidBlock: Game_Cubbit_Terrain.isSolidBlock
  });
  var buildCollesionTerrain = function (v) {
      return function (world) {
          return function (index) {
              var ri = Game_Cubbit_ChunkIndex.runChunkIndex(index);
              var bodyMap = Data_Map.toList(v.bodies);
              var externals = Data_List.filter(function (v1) {
                  return 1 < Game_Cubbit_ChunkIndex.chunkIndexDistance(v1.value0)(index);
              })(bodyMap);
              return function __do() {
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Types.foldableList)(externals)(function (v1) {
                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(v1.value1)(function (body) {
                          return Graphics_Cannon_World.removeBody(body)(world);
                      });
                  })();
                  var internals = Data_List.filter(function (v1) {
                      return Game_Cubbit_ChunkIndex.chunkIndexDistance(v1.value0)(index) <= 1;
                  })(bodyMap);
                  var internalsMap = Data_Map.fromFoldable(Game_Cubbit_ChunkIndex.ordChunkIndex)(Data_List_Types.foldableList)(internals);
                  var indices = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(ri.x - 1)(ri.x + 1 | 0))(function (v1) {
                      return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(ri.y - 1)(ri.y + 1 | 0))(function (v2) {
                          return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(ri.z - 1)(ri.z + 1 | 0))(function (v3) {
                              var i = Game_Cubbit_ChunkIndex.chunkIndex(v1)(v2)(v3);
                              var $68 = Data_Map.lookup(Game_Cubbit_ChunkIndex.ordChunkIndex)(i)(internalsMap);
                              if ($68 instanceof Data_Maybe.Just) {
                                  return Data_Monoid.mempty(Data_List_Types.monoidList);
                              };
                              if ($68 instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(Data_List_Types.applicativeList)(i);
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Collesion line 140, column 13 - line 142, column 34: " + [ $68.constructor.name ]);
                          });
                      });
                  });
                  var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_List.catMaybes)(Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List_Types.traversableList)(indices)(function (i) {
                      return Game_Cubbit_Terrain.lookupChunk(i)(v);
                  }))();
                  if (v1 instanceof Data_List_Types.Nil) {
                      return v;
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      var v2 = buildCollesionBoxes(v1.value0)(world)();
                      var $73 = {};
                      for (var $74 in v) {
                          if (v.hasOwnProperty($74)) {
                              $73[$74] = v[$74];
                          };
                      };
                      $73.bodies = Data_Map.fromFoldable(Game_Cubbit_ChunkIndex.ordChunkIndex)(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v1.value0.index, v2), internals));
                      return $73;
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Collesion line 147, column 5 - line 153, column 13: " + [ v1.constructor.name ]);
              };
          };
      };
  };
  var updateChunkCollesion = function (v) {
      return function (world) {
          return function (index) {
              var $81 = Data_Map.lookup(Game_Cubbit_ChunkIndex.ordChunkIndex)(index)(v.bodies);
              if ($81 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v);
              };
              if ($81 instanceof Data_Maybe.Just) {
                  return function __do() {
                      Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($81.value0)(function (body) {
                          return Graphics_Cannon_World.removeBody(body)(world);
                      })();
                      var bodies$prime = Data_Map["delete"](Game_Cubbit_ChunkIndex.ordChunkIndex)(index)(v.bodies);
                      var v1 = Game_Cubbit_Terrain.lookupChunk(index)(v)();
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var $84 = {};
                          for (var $85 in v) {
                              if (v.hasOwnProperty($85)) {
                                  $84[$85] = v[$85];
                              };
                          };
                          $84.bodies = bodies$prime;
                          return $84;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          var v2 = buildCollesionBoxes(v1.value0)(world)();
                          var $88 = {};
                          for (var $89 in v) {
                              if (v.hasOwnProperty($89)) {
                                  $88[$89] = v[$89];
                              };
                          };
                          $88.bodies = Data_Map.insert(Game_Cubbit_ChunkIndex.ordChunkIndex)(index)(v2)(Data_Map["delete"](Game_Cubbit_ChunkIndex.ordChunkIndex)(index)(v.bodies));
                          return $88;
                      };
                      throw new Error("Failed pattern match at Game.Cubbit.Collesion line 104, column 13 - line 112, column 22: " + [ v1.constructor.name ]);
                  };
              };
              throw new Error("Failed pattern match at Game.Cubbit.Collesion line 95, column 5 - line 112, column 22: " + [ $81.constructor.name ]);
          };
      };
  };
  exports["buildCollesionBoxes"] = buildCollesionBoxes;
  exports["buildCollesionTerrain"] = buildCollesionTerrain;
  exports["createPlayerCollesion"] = createPlayerCollesion;
  exports["updateChunkCollesion"] = updateChunkCollesion;
  exports["updatePhysics"] = updatePhysics;
})(PS["Game.Cubbit.Collesion"] = PS["Game.Cubbit.Collesion"] || {});
(function(exports) {
    "use strict";

  exports._getPickedPoint = function(info){
      return info.pickedPoint;
  };
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.PickingInfo"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var getPickedPoint = function ($0) {
      return Data_Nullable.toMaybe($foreign._getPickedPoint($0));
  };
  exports["getPickedPoint"] = getPickedPoint;
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {
    "use strict";

  exports._beginAnimation = function(name){
      return function(loop){
          return function(speedRatio){
              return function(onAnimationEnd){
                  return function(skeleton){
                      return function(){
                          return skeleton.beginAnimation(name, loop, speedRatio, function(){
                              onAnimationEnd({})();
                          });
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Babylon.Skeleton"] = PS["Graphics.Babylon.Skeleton"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Skeleton"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];        
  var beginAnimation = function (name) {
      return function (loop) {
          return function (speedRatio) {
              return function (onAnimationEnd) {
                  return function (skeleton) {
                      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._beginAnimation(name)(loop)(speedRatio)(onAnimationEnd)(skeleton));
                  };
              };
          };
      };
  };
  exports["beginAnimation"] = beginAnimation;
})(PS["Graphics.Babylon.Skeleton"] = PS["Graphics.Babylon.Skeleton"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_Skeleton = PS["Graphics.Babylon.Skeleton"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var playAnimation = function (name) {
      return function (playerMeshes) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(playerMeshes)(function (mesh) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                  var v = Graphics_Babylon_AbstractMesh.getSkeleton(mesh)();
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Babylon_Skeleton.beginAnimation(name)(true)(1.0)(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(v.value0)();
                      return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Maybe.isNothing(v1))(Control_Monad_Eff_Console.error("playAnimation: animation named \"" + (name + "\" not found.")))();
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Control line 31, column 9 - line 36, column 91: " + [ v.constructor.name ]);
              });
          });
      };
  };
  var pickBlock = function (scene) {
      return function (cursor) {
          return function (mode) {
              return function (terrain) {
                  return function (screenX) {
                      return function (screenY) {
                          var predicate = function (mesh) {
                              var name = Graphics_Babylon_Node.getName(Graphics_Babylon_AbstractMesh.abstractMeshToNode(mesh));
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(name !== "cursor");
                          };
                          return function __do() {
                              var v = Graphics_Babylon_Scene.pick(screenX)(screenY)(predicate)(false)(scene)();
                              var $22 = Graphics_Babylon_PickingInfo.getPickedPoint(v);
                              if ($22 instanceof Data_Maybe.Nothing) {
                                  return Data_Maybe.Nothing.value;
                              };
                              if ($22 instanceof Data_Maybe.Just) {
                                  var v1 = Graphics_Babylon_Vector3.runVector3($22.value0)();
                                  var dx = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v1.x - $$Math.round(v1.x));
                                  var dy = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v1.y - $$Math.round(v1.y));
                                  var dz = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v1.z - $$Math.round(v1.z));
                                  var minDelta = Data_Ord.min(Data_Ord.ordNumber)(dx)(Data_Ord.min(Data_Ord.ordNumber)(dy)(dz));
                                  var lookupBlock$prime = function (x) {
                                      return function (y) {
                                          return function (z) {
                                              return Game_Cubbit_Terrain.lookupSolidBlockByVec({
                                                  x: x, 
                                                  y: y, 
                                                  z: z
                                              })(terrain);
                                          };
                                      };
                                  };
                                  var putCursor = function (bi) {
                                      var rbi = Game_Cubbit_BlockIndex.runBlockIndex(bi);
                                      return function __do() {
                                          var v2 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                          return Graphics_Babylon_Mesh.setPosition(v2)(cursor)();
                                      };
                                  };
                                  if (mode instanceof Game_Cubbit_Types.Put) {
                                      var $26 = minDelta === dx;
                                      if ($26) {
                                          var v2 = lookupBlock$prime(v1.x + 0.5)(v1.y)(v1.z)();
                                          var v3 = lookupBlock$prime(v1.x - 0.5)(v1.y)(v1.z)();
                                          if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x - 0.5)(v1.y)(v1.z));
                                          };
                                          if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x + 0.5)(v1.y)(v1.z));
                                          };
                                          return Data_Maybe.Nothing.value;
                                      };
                                      if (!$26) {
                                          var $33 = minDelta === dy;
                                          if ($33) {
                                              var v2 = lookupBlock$prime(v1.x)(v1.y + 0.5)(v1.z)();
                                              var v3 = lookupBlock$prime(v1.x)(v1.y - 0.5)(v1.z)();
                                              if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y - 0.5)(v1.z));
                                              };
                                              if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y + 0.5)(v1.z));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          if (!$33) {
                                              var v2 = lookupBlock$prime(v1.x)(v1.y)(v1.z + 0.5)();
                                              var v3 = lookupBlock$prime(v1.x)(v1.y)(v1.z - 0.5)();
                                              if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y)(v1.z - 0.5));
                                              };
                                              if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y)(v1.z + 0.5));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Control line 69, column 30 - line 82, column 57: " + [ $33.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Control line 62, column 26 - line 82, column 57: " + [ $26.constructor.name ]);
                                  };
                                  if (mode instanceof Game_Cubbit_Types.Remove) {
                                      var $47 = minDelta === dx;
                                      if ($47) {
                                          var v2 = lookupBlock$prime(v1.x + 0.5)(v1.y)(v1.z)();
                                          var v3 = lookupBlock$prime(v1.x - 0.5)(v1.y)(v1.z)();
                                          if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x + 0.5)(v1.y)(v1.z));
                                          };
                                          if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x - 0.5)(v1.y)(v1.z));
                                          };
                                          return Data_Maybe.Nothing.value;
                                      };
                                      if (!$47) {
                                          var $54 = minDelta === dy;
                                          if ($54) {
                                              var v2 = lookupBlock$prime(v1.x)(v1.y + 0.5)(v1.z)();
                                              var v3 = lookupBlock$prime(v1.x)(v1.y - 0.5)(v1.z)();
                                              if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y + 0.5)(v1.z));
                                              };
                                              if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y - 0.5)(v1.z));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          if (!$54) {
                                              var v2 = lookupBlock$prime(v1.x)(v1.y)(v1.z + 0.5)();
                                              var v3 = lookupBlock$prime(v1.x)(v1.y)(v1.z - 0.5)();
                                              if (v2 instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y)(v1.z + 0.5));
                                              };
                                              if (v2 instanceof Data_Maybe.Nothing && v3 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v1.x)(v1.y)(v1.z - 0.5));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Control line 91, column 30 - line 104, column 57: " + [ $54.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Control line 84, column 27 - line 104, column 57: " + [ $47.constructor.name ]);
                                  };
                                  if (mode instanceof Game_Cubbit_Types.Move) {
                                      return Data_Maybe.Nothing.value;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Control line 61, column 13 - line 106, column 30: " + [ mode.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Control line 46, column 5 - line 106, column 30: " + [ $22.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["pickBlock"] = pickBlock;
  exports["playAnimation"] = playAnimation;
})(PS["Game.Cubbit.Control"] = PS["Game.Cubbit.Control"] || {});
(function(exports) {
    "use strict";

  /* global document */

  exports.focus = function(id){
      return function(){
          document.getElementById(id).focus();
      };
  };
})(PS["Game.Cubbit.Event"] = PS["Game.Cubbit.Event"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.Event"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["focus"] = $foreign.focus;
})(PS["Game.Cubbit.Event"] = PS["Game.Cubbit.Event"] || {});
(function(exports) {
    "use strict";

  exports._createBlockMapJS = function(imports) {
      return function(noise) {
          return function(index) {

              var chunkSize = imports.chunkSize;
              var terrainScale = imports.terrainScale;
              var waterBlockHeight = imports.waterBlockHeight;
              var maxHeight = imports.maxHeight;
              var simplex2 = imports.simplex2;
              var blockTypes = imports.blockTypes;
              var runChunkIndex = imports.runChunkIndex;

              var airBlock = blockTypes.airBlock;
              var grassBlock = blockTypes.grassBlock;
              var waterBlock = blockTypes.waterBlock;
              var woodBlock = blockTypes.woodBlock;
              var leavesBlock = blockTypes.leavesBlock;
              var dirtBlock = blockTypes.dirtBlock;
              var bushBlock = blockTypes.bushBlock;

              var rci = runChunkIndex(index);
              var cx = rci.x
              var cy = rci.y
              var cz = rci.z

              var chunkBlockCount = chunkSize * chunkSize * chunkSize;

              if (cy < 0) {
                  return Uint8Array.from({
                      length: chunkBlockCount
                  }, function(v, k) {
                      return dirtBlock
                  })
              } else if (0 < cy) {
                  return new Uint8Array(chunkBlockCount)
              } else {

                  // var stmap = Object.create({});
                  var stmap = new Uint8Array(chunkBlockCount);

                  function lookup(lx, ly, lz) {
                      if (0 <= lx && lx < chunkSize && 0 <= ly && ly < chunkSize && 0 <= lz && lz < chunkSize) {
                          return stmap[chunkSize * chunkSize * lx + chunkSize * ly + lz];
                      } else {
                          return airBlock
                      }
                  }

                  function put(lx, ly, lz, value) {
                      if (0 <= lx && lx < chunkSize && 0 <= ly && ly < chunkSize && 0 <= lz && lz < chunkSize) {
                          stmap[chunkSize * chunkSize * lx + chunkSize * ly + lz] = value;
                      }
                  }


                  function getHeight(gx, gz) {
                      var r = (simplex2(gx * terrainScale)(gz * terrainScale)(noise) + 1.0) * 0.5;
                      return Math.floor(r * maxHeight);
                  }

  /*
                if(cx == 0 && cy == 0 && cz == 0){
                    for (var lz = 0; lz <= chunkSize - 1; lz++) {
                        for (var lx = 0; lx <= chunkSize - 1; lx++) {
                            var h = lx < 4 ? 4 : 5;
                            for (var ly = 0; ly < h; ly++) {
                                put(lx, ly, lz, grassBlock);
                            }
                        }
                    }
                    return stmap;
                }
*/  




                  // terrain
                  for (var lz = 0; lz <= chunkSize - 1; lz++) {
                      for (var lx = 0; lx <= chunkSize - 1; lx++) {
                          var gx = chunkSize * cx + lx
                          var gz = chunkSize * cz + lz
                          var h = getHeight(gx, gz)
                          for (var ly = 0; ly < chunkSize; ly++) {
                              var gy = chunkSize * cy + ly;
                              var ly = gy - chunkSize * cy;
                              if (gy == h) {
                                  put(lx, ly, lz, grassBlock);
                              } else if (gy < h) {
                                  put(lx, ly, lz, dirtBlock);
                              } else if (gy <= waterBlockHeight) {
                                  put(lx, ly, lz, waterBlock);
                              }
                          }
                      }
                  }

                  // woods and bushes
                  for (var lz = 0; lz <= chunkSize - 1; lz++) {
                      for (var lx = 0; lx <= chunkSize - 1; lx++) {
                          var gx = chunkSize * cx + lx
                          var gz = chunkSize * cz + lz
                          var h = getHeight(gx, gz)
                          if (waterBlockHeight <= h) {

                              var lh = h - chunkSize * cy


                              var r = ((simplex2(1234 + gx)(5678 + gz)(noise) + 1) * 10000) | 0;

                              if ((r % 97) === 29) {
                                  // get height
                                  var top = null;
                                  for (var ly = chunkSize - 1; 0 <= ly; ly--) {
                                      if (lookup(lx, ly, lz) === grassBlock) {
                                          top = ly;
                                          break;
                                      }
                                  }
                                  if (top !== null) {
                                      for (var i = 0; i < 3 && top + 1 + i < chunkSize; i++) {
                                          put(lx, top + 1 + i, lz, woodBlock);
                                      }
                                      for (var i = 3; i < 6 && top + 1 + i < chunkSize; i++) {
                                          for (var dx = -1; dx <= 1; dx++) {
                                              for (var dz = -1; dz <= 1; dz++) {
                                                  put(lx + dx, top + 1 + i, lz + dz, leavesBlock);
                                              }
                                          }
                                      }
                                  }
                              } else if ((r % 93) < 10) {
                                  put(lx, lh + 1, lz, bushBlock);
                              }
                          }
                      }
                  }



                  return stmap;
              };
          };
      };
  };
})(PS["Game.Cubbit.Generation"] = PS["Game.Cubbit.Generation"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.Generation"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var PerlinNoise = PS["PerlinNoise"];        
  var generateReferences = {
      chunkSize: Game_Cubbit_Constants.chunkSize, 
      terrainScale: 1.0e-2, 
      waterBlockHeight: 3, 
      maxHeight: 15, 
      blockTypes: Game_Cubbit_BlockType.blockTypes, 
      simplex2: PerlinNoise.simplex2, 
      runChunkIndex: Game_Cubbit_ChunkIndex.runChunkIndex
  };
  var createBlockMap = $foreign._createBlockMapJS(generateReferences);
  exports["createBlockMap"] = createBlockMap;
})(PS["Game.Cubbit.Generation"] = PS["Game.Cubbit.Generation"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_Event_KeyboardEvent = PS["DOM.Event.KeyboardEvent"];
  var DOM_Event_MouseEvent = PS["DOM.Event.MouseEvent"];
  var DOM_Event_WheelEvent = PS["DOM.Event.WheelEvent"];
  var DOM_WebStorage = PS["DOM.WebStorage"];
  var Data_Void = PS["Data.Void"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Game_Cubbit_Vec = PS["Game.Cubbit.Vec"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Cannon = PS["Graphics.Cannon"];
  var Halogen = PS["Halogen"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];        
  var SetCursorPosition = (function () {
      function SetCursorPosition(value0) {
          this.value0 = value0;
      };
      SetCursorPosition.create = function (value0) {
          return new SetCursorPosition(value0);
      };
      return SetCursorPosition;
  })();
  var SetMode = (function () {
      function SetMode(value0) {
          this.value0 = value0;
      };
      SetMode.create = function (value0) {
          return new SetMode(value0);
      };
      return SetMode;
  })();
  var SetPosition = (function () {
      function SetPosition(value0) {
          this.value0 = value0;
      };
      SetPosition.create = function (value0) {
          return new SetPosition(value0);
      };
      return SetPosition;
  })();
  var TogglePointerLock = (function () {
      function TogglePointerLock() {

      };
      TogglePointerLock.value = new TogglePointerLock();
      return TogglePointerLock;
  })();
  var SetMousePosition = (function () {
      function SetMousePosition(value0) {
          this.value0 = value0;
      };
      SetMousePosition.create = function (value0) {
          return new SetMousePosition(value0);
      };
      return SetMousePosition;
  })();
  var OnMouseClick = (function () {
      function OnMouseClick(value0) {
          this.value0 = value0;
      };
      OnMouseClick.create = function (value0) {
          return new OnMouseClick(value0);
      };
      return OnMouseClick;
  })();
  var Zoom = (function () {
      function Zoom(value0) {
          this.value0 = value0;
      };
      Zoom.create = function (value0) {
          return new Zoom(value0);
      };
      return Zoom;
  })();
  var OnKeyDown = (function () {
      function OnKeyDown(value0) {
          this.value0 = value0;
      };
      OnKeyDown.create = function (value0) {
          return new OnKeyDown(value0);
      };
      return OnKeyDown;
  })();
  var OnKeyUp = (function () {
      function OnKeyUp(value0) {
          this.value0 = value0;
      };
      OnKeyUp.create = function (value0) {
          return new OnKeyUp(value0);
      };
      return OnKeyUp;
  })();
  var SetCenterPanelVisible = (function () {
      function SetCenterPanelVisible(value0) {
          this.value0 = value0;
      };
      SetCenterPanelVisible.create = function (value0) {
          return new SetCenterPanelVisible(value0);
      };
      return SetCenterPanelVisible;
  })();
  var Home = (function () {
      function Home() {

      };
      Home.value = new Home();
      return Home;
  })();
  var PlayingSceneQuery = (function () {
      function PlayingSceneQuery(value0) {
          this.value0 = value0;
      };
      PlayingSceneQuery.create = function (value0) {
          return new PlayingSceneQuery(value0);
      };
      return PlayingSceneQuery;
  })();
  var PreventDefault = (function () {
      function PreventDefault(value0) {
          this.value0 = value0;
      };
      PreventDefault.create = function (value0) {
          return new PreventDefault(value0);
      };
      return PreventDefault;
  })();
  var Nop = (function () {
      function Nop(value0) {
          this.value0 = value0;
      };
      Nop.create = function (value0) {
          return new Nop(value0);
      };
      return Nop;
  })();
  var ToggleMute = (function () {
      function ToggleMute() {

      };
      ToggleMute.value = new ToggleMute();
      return ToggleMute;
  })();
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var ShowConfig = (function () {
      function ShowConfig() {

      };
      ShowConfig.value = new ShowConfig();
      return ShowConfig;
  })();
  var CloseConfig = (function () {
      function CloseConfig() {

      };
      CloseConfig.value = new CloseConfig();
      return CloseConfig;
  })();
  var SetBGMVolume = (function () {
      function SetBGMVolume(value0) {
          this.value0 = value0;
      };
      SetBGMVolume.create = function (value0) {
          return new SetBGMVolume(value0);
      };
      return SetBGMVolume;
  })();
  var SetSEVolume = (function () {
      function SetSEVolume(value0) {
          this.value0 = value0;
      };
      SetSEVolume.create = function (value0) {
          return new SetSEVolume(value0);
      };
      return SetSEVolume;
  })();
  var StopPropagation = (function () {
      function StopPropagation(value0) {
          this.value0 = value0;
      };
      StopPropagation.create = function (value0) {
          return new StopPropagation(value0);
      };
      return StopPropagation;
  })();
  var ToggleShadow = (function () {
      function ToggleShadow() {

      };
      ToggleShadow.value = new ToggleShadow();
      return ToggleShadow;
  })();
  var ToggleVertexColor = (function () {
      function ToggleVertexColor() {

      };
      ToggleVertexColor.value = new ToggleVertexColor();
      return ToggleVertexColor;
  })();
  var SetShadowArea = (function () {
      function SetShadowArea(value0) {
          this.value0 = value0;
      };
      SetShadowArea.create = function (value0) {
          return new SetShadowArea(value0);
      };
      return SetShadowArea;
  })();
  var SetChunkArea = (function () {
      function SetChunkArea(value0) {
          this.value0 = value0;
      };
      SetChunkArea.create = function (value0) {
          return new SetChunkArea(value0);
      };
      return SetChunkArea;
  })();
  var Repaint = (function () {
      function Repaint(value0) {
          this.value0 = value0;
      };
      Repaint.create = function (value0) {
          return new Repaint(value0);
      };
      return Repaint;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  exports["SetCursorPosition"] = SetCursorPosition;
  exports["SetMode"] = SetMode;
  exports["SetPosition"] = SetPosition;
  exports["TogglePointerLock"] = TogglePointerLock;
  exports["SetMousePosition"] = SetMousePosition;
  exports["OnMouseClick"] = OnMouseClick;
  exports["Zoom"] = Zoom;
  exports["OnKeyDown"] = OnKeyDown;
  exports["OnKeyUp"] = OnKeyUp;
  exports["SetCenterPanelVisible"] = SetCenterPanelVisible;
  exports["Home"] = Home;
  exports["Query"] = Query;
  exports["PlayingSceneQuery"] = PlayingSceneQuery;
  exports["PreventDefault"] = PreventDefault;
  exports["Nop"] = Nop;
  exports["ToggleMute"] = ToggleMute;
  exports["Start"] = Start;
  exports["ShowConfig"] = ShowConfig;
  exports["CloseConfig"] = CloseConfig;
  exports["SetBGMVolume"] = SetBGMVolume;
  exports["SetSEVolume"] = SetSEVolume;
  exports["StopPropagation"] = StopPropagation;
  exports["ToggleShadow"] = ToggleShadow;
  exports["ToggleVertexColor"] = ToggleVertexColor;
  exports["SetShadowArea"] = SetShadowArea;
  exports["SetChunkArea"] = SetChunkArea;
  exports["Repaint"] = Repaint;
})(PS["Game.Cubbit.Hud.Type"] = PS["Game.Cubbit.Hud.Type"] || {});
(function(exports) {
    "use strict";

  exports.createTerrainGeometryJS = function(references) {
      return function(terrain) {
          return function(chunk) {

              var chunkSize = references.chunkSize;
              var blockTypes = references.blockTypes;
              var runChunkIndex = references.runChunkIndex;
              var blockIndex = references.blockIndex;
              var globalIndexToChunkIndex = references.globalIndexToChunkIndex;
              var globalIndexToLocalIndex = references.globalIndexToLocalIndex;
              var simplex2 = references.simplex2;

              var noise = terrain.noise;

              var chunkMap = terrain.map.map;

              var TEXTURE_SIZE = 4096;
              var CHIP_SIZE = 64;
              var CHIP_RATIO_0 = 0;
              var CHIP_RATIO_1 = CHIP_SIZE / TEXTURE_SIZE;
              var CHIP_RATIO_2 = CHIP_RATIO_1 * 2;
              var CHIP_RATIO_3 = CHIP_RATIO_1 * 3;
              var CHIP_RATIO_4 = CHIP_RATIO_1 * 4;

              function nxUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }

              function pxUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }

              function nyUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(CHIP_RATIO_3);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(CHIP_RATIO_3);
              }

              function pyUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }

              function nzUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }

              function pzUV(uvs, dx) {
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
              }

              var airBlock = blockTypes.airBlock;
              var waterBlock = blockTypes.waterBlock;
              var bushBlock = blockTypes.bushBlock;

              var blocks = chunk.blocks;

              function prepareArray() {
                  return {
                      offset: 0,
                      indices: [],
                      positions: [],
                      normals: [],
                      uvs: [],
                      colors: []
                  };
              }

              var standardMaterialBlockStore = prepareArray();
              var waterBlockStore = prepareArray();
              var transparentMaterialVertexData = prepareArray();

              var chunkIndex = runChunkIndex(chunk.index);
              var ox = chunkSize * chunkIndex.x;
              var oy = chunkSize * chunkIndex.y;
              var oz = chunkSize * chunkIndex.z;


              function solidBounds(block) {
                  return block !== airBlock && block !== waterBlock && block !== bushBlock;
              }

              function waterBounds(block) {
                  return block !== airBlock;
              }

              function exists(gx, gy, gz, bounds) {
                  var lx = gx - ox;
                  var ly = gy - oy;
                  var lz = gz - oz;
                  if (
                      0 <= lx && lx < chunkSize &&
                      0 <= ly && ly < chunkSize &&
                      0 <= lz && lz < chunkSize
                  ) {
                      var t = blocks[chunkSize * chunkSize * lx + chunkSize * ly + lz];
                      return bounds(t);
                  } else {
                      var gi = blockIndex(gx)(gy)(gz);
                      var chunkWithMesh = chunkMap[globalIndexToChunkIndex(gi)];
                      if (chunkWithMesh) {
                          var block = chunkWithMesh.blocks[globalIndexToLocalIndex(gi)];
                          if (typeof block == "undefined") {
                              // nerver come here
                              debugger;
                          }
                          return bounds(block);
                      } else {
                          // nerver come here
                          debugger;
                          return true;
                      }
                  }
              }




              for (var lx = 0; lx < chunkSize; lx++) {
                  for (var lz = 0; lz < chunkSize; lz++) {

                      var gx = chunkSize * chunkIndex.x + lx;
                      var gz = chunkSize * chunkIndex.z + lz;
                      var random = (simplex2(gx)(gz)(noise) + 1.0) * 0.5;

                      for (var ly = 0; ly < chunkSize; ly++) {

                          var block = blocks[chunkSize * chunkSize * lx + chunkSize * ly + lz];

                          // global coordinates of the block
                          var px = ox + lx;
                          var py = oy + ly;
                          var pz = oz + lz;

                          var store = block === waterBlock ? waterBlockStore :
                              block === bushBlock ? transparentMaterialVertexData :
                              standardMaterialBlockStore;

                          // nx, ny, nz: normal vector
                          function square(nx, ny, nz, u, bounds) {
                              if (!exists(px + nx, py + ny, pz + nz, bounds)) {

                                  // horizontal extent vector of the plane
                                  var ax = ny;
                                  var ay = nz;
                                  var az = nx;

                                  // vertical extent vector of the plane
                                  var bx = ay * nz - ay * nx;
                                  var by = az * nx - ax * nz;
                                  var bz = ax * ny - ay * nx;

                                  // half-sized normal vector
                                  var dx = nx * 0.5;
                                  var dy = ny * 0.5;
                                  var dz = nz * 0.5;

                                  // half-sized horizontal vector
                                  var sx = ax * 0.5;
                                  var sy = ay * 0.5;
                                  var sz = az * 0.5;

                                  // half-sized vertical vector
                                  var tx = bx * 0.5;
                                  var ty = by * 0.5;
                                  var tz = bz * 0.5;

                                  // center of the plane
                                  var vx = px + 0.5 + dx;
                                  var vy = py + 0.5 + dy;
                                  var vz = pz + 0.5 + dz;

                                  // vertex index offset
                                  var offset = store.offset;

                                  store.indices.push(offset + 0);
                                  store.indices.push(offset + 1);
                                  store.indices.push(offset + 2);
                                  store.indices.push(offset + 0);
                                  store.indices.push(offset + 2);
                                  store.indices.push(offset + 3);

                                  store.positions.push(vx - sx - tx);
                                  store.positions.push(vy - sy - ty);
                                  store.positions.push(vz - sz - tz);
                                  store.positions.push(vx + sx - tx);
                                  store.positions.push(vy + sy - ty);
                                  store.positions.push(vz + sz - tz);
                                  store.positions.push(vx + sx + tx);
                                  store.positions.push(vy + sy + ty);
                                  store.positions.push(vz + sz + tz);
                                  store.positions.push(vx - sx + tx);
                                  store.positions.push(vy - sy + ty);
                                  store.positions.push(vz - sz + tz);

                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);


                                  var add = 0.2;
                                  var base = 0.4;

                                  var brightness =
                                      (exists(px + nx - ax, py + ny - ay, pz + nz - az, bounds) ? 0 : add) +
                                      (exists(px + nx - bx, py + ny - by, pz + nz - bz, bounds) ? 0 : add) +
                                      (exists(px + nx - ax - bx, py + ny - ay - by, pz + nz - az - bz, bounds) ? 0 : add) + base;

                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);


                                  var brightness =
                                      (exists(px + nx + ax, py + ny + ay, pz + nz + az, bounds) ? 0 : add) +
                                      (exists(px + nx - bx, py + ny - by, pz + nz - bz, bounds) ? 0 : add) +
                                      (exists(px + nx + ax - bx, py + ny + ay - by, pz + nz + az - bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  var brightness =
                                      (exists(px + nx + ax, py + ny + ay, pz + nz + az, bounds) ? 0 : add) +
                                      (exists(px + nx + bx, py + ny + by, pz + nz + bz, bounds) ? 0 : add) +
                                      (exists(px + nx + ax + bx, py + ny + ay + by, pz + nz + az + bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  var brightness =
                                      (exists(px + nx - ax, py + ny - ay, pz + nz - az, bounds) ? 0 : add) +
                                      (exists(px + nx + bx, py + ny + by, pz + nz + bz, bounds) ? 0 : add) +
                                      (exists(px + nx - ax + bx, py + ny - ay + by, pz + nz - az + bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  //u(store.uvs, CHIP_RATIO_1 * block);
                                  u(store.uvs, CHIP_RATIO_1 * block);

                                  store.offset += 4;
                              }
                          }

                          function bush() {
                              var bushHeight = 1.0;

                              var offset = store.offset;

                              store.indices.push(offset + 0);
                              store.indices.push(offset + 1);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 0);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 3);

                              store.indices.push(offset + 2);
                              store.indices.push(offset + 1);
                              store.indices.push(offset + 0);
                              store.indices.push(offset + 3);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 0);

                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 1);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 3);

                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 1);
                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 3);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 0);


                              var rot = Math.PI * 2 * random;
                              //var rot = Math.PI * 0.20;
                              var rec = Math.PI * 0.5;
                              var w = 0.6;

                              var cx = px + 0.5;
                              var cz = pz + 0.5;

                              var x0 = cx + Math.cos(rot + rec * 0) * w;
                              var z0 = cz + Math.sin(rot + rec * 0) * w;

                              var x1 = cx + Math.cos(-rot + rec * 1) * w;
                              var z1 = cz + Math.sin(-rot + rec * 1) * w;

                              var x2 = cx + Math.cos(rot + rec * 2) * w;
                              var z2 = cz + Math.sin(rot + rec * 2) * w;

                              var x3 = cx + Math.cos(-rot + rec * 3) * w;
                              var z3 = cz + Math.sin(-rot + rec * 3) * w;

                              store.positions.push(x0);
                              store.positions.push(py);
                              store.positions.push(z0);

                              store.positions.push(x2);
                              store.positions.push(py);
                              store.positions.push(z2);

                              store.positions.push(x2);
                              store.positions.push(py + bushHeight);
                              store.positions.push(z2);

                              store.positions.push(x0);
                              store.positions.push(py + bushHeight);
                              store.positions.push(z0);

                              store.positions.push(x3);
                              store.positions.push(py);
                              store.positions.push(z1);

                              store.positions.push(x1);
                              store.positions.push(py);
                              store.positions.push(z3);

                              store.positions.push(x1);
                              store.positions.push(py + bushHeight);
                              store.positions.push(z3);

                              store.positions.push(x3);
                              store.positions.push(py + bushHeight);
                              store.positions.push(z1);

                              var nx = 0,
                                  ny = 0,
                                  nz = 1;
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);

                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);

                              var r = 1,
                                  g = 1,
                                  b = 1;

                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);

                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);


                              store.uvs.push(0);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(0);
                              store.uvs.push(0);
                              store.uvs.push(0);


                              store.uvs.push(0);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(0);
                              store.uvs.push(0);
                              store.uvs.push(0);

                              store.offset += 8;
                          }

                          switch (block) {
                              case airBlock:
                                  break;
                              case waterBlock:
                                  square(-1, 0, 0, nxUV, waterBounds);
                                  square(1, 0, 0, pxUV, waterBounds);
                                  square(0, -1, 0, nyUV, waterBounds);
                                  square(0, 1, 0, pyUV, waterBounds);
                                  square(0, 0, -1, nzUV, waterBounds);
                                  square(0, 0, 1, pzUV, waterBounds);
                                  break;

                              case bushBlock:
                                  bush();
                                  break;

                              default:
                                  square(-1, 0, 0, nxUV, solidBounds);
                                  square(1, 0, 0, pxUV, solidBounds);
                                  square(0, -1, 0, nyUV, solidBounds);
                                  square(0, 1, 0, pyUV, solidBounds);
                                  square(0, 0, -1, nzUV, solidBounds);
                                  square(0, 0, 1, pzUV, solidBounds);
                                  break;
                          }
                      }
                  }
              }

              return {
                  standardMaterialBlocks: standardMaterialBlockStore,
                  waterMaterialBlocks: waterBlockStore,
                  transparentMaterialVertexData: transparentMaterialVertexData
              };
          };
      };
  };
})(PS["Game.Cubbit.MeshBuilder"] = PS["Game.Cubbit.MeshBuilder"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createVertexData = function(props){
      return function(){
          var v = new BABYLON.VertexData();
          v.indices = props.indices;
          v.positions = props.positions;
          v.normals = props.normals;
          v.uvs = props.uvs;
          v.colors = props.colors;
          return v;
      };
  };

  exports.applyToMesh = function(mesh){
      return function(updatable){
          return function(vertexData){
              return function(){
                  vertexData.applyToMesh(mesh, updatable);
              };
          };
      };
  };
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.VertexData"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["applyToMesh"] = $foreign.applyToMesh;
  exports["createVertexData"] = $foreign.createVertexData;
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.MeshBuilder"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Generation = PS["Game.Cubbit.Generation"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];
  var Game_Cubbit_Materials = PS["Game.Cubbit.Materials"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_VertexData = PS["Graphics.Babylon.VertexData"];
  var PerlinNoise = PS["PerlinNoise"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];        
  var generateMesh = function (index) {
      return function (verts) {
          return function (mat) {
              return function (scene) {
                  return function (v) {
                      var rci = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                      return function __do() {
                          var v1 = Graphics_Babylon_Mesh.createMesh("terrain")(scene)();
                          Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Graphics_Babylon_VertexData.applyToMesh(v1)(false))(Graphics_Babylon_VertexData.createVertexData(verts))();
                          Graphics_Babylon_AbstractMesh.setRenderingGroupId(Game_Cubbit_Constants.terrainRenderingGroup)(Graphics_Babylon_Mesh.meshToAbstractMesh(v1))();
                          Graphics_Babylon_AbstractMesh.setReceiveShadows(v.shadow)(Graphics_Babylon_Mesh.meshToAbstractMesh(v1))();
                          Graphics_Babylon_AbstractMesh.setUseVertexColors(v.vertexColor)(Graphics_Babylon_Mesh.meshToAbstractMesh(v1))();
                          Graphics_Babylon_AbstractMesh.setMaterial(mat)(Graphics_Babylon_Mesh.meshToAbstractMesh(v1))();
                          Graphics_Babylon_AbstractMesh.setIsPickable(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v1))();
                          return v1;
                      };
                  };
              };
          };
      };
  };
  var createTerrainGeometryReferences = {
      chunkSize: Game_Cubbit_Constants.chunkSize, 
      blockTypes: Game_Cubbit_BlockType.blockTypes, 
      runChunkIndex: Game_Cubbit_ChunkIndex.runChunkIndex, 
      blockIndex: Game_Cubbit_BlockIndex.blockIndex, 
      globalIndexToChunkIndex: Game_Cubbit_Terrain.globalIndexToChunkIndex, 
      globalIndexToLocalIndex: Game_Cubbit_Terrain.globalIndexToLocalIndex, 
      simplex2: PerlinNoise.simplex2
  };
  var createTerrainGeometry = $foreign.createTerrainGeometryJS(createTerrainGeometryReferences);
  var generateChunk = function (v) {
      return function (materials) {
          return function (scene) {
              return function (index) {
                  return function (v1) {
                      return function (v2) {
                          if (v.res instanceof Game_Cubbit_Types.Loading) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
                          };
                          if (v.res instanceof Game_Cubbit_Types.Complete) {
                              var i = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                              return function __do() {
                                  Control_Monad_Eff.forE(i.x - 1)(i.x + 2 | 0)(function (x) {
                                      return Control_Monad_Eff.forE(i.y - 1)(i.y + 2 | 0)(function (y) {
                                          return Control_Monad_Eff.forE(i.z - 1)(i.z + 2 | 0)(function (z) {
                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                                  var loadingChunkIndex = Game_Cubbit_ChunkIndex.chunkIndex(x)(y)(z);
                                                  return function __do() {
                                                      var v3 = Game_Cubbit_Terrain.lookupChunk(loadingChunkIndex)(v.terrain)();
                                                      if (v3 instanceof Data_Maybe.Just) {
                                                          return false;
                                                      };
                                                      if (v3 instanceof Data_Maybe.Nothing) {
                                                          Game_Cubbit_Terrain.insertChunk({
                                                              x: x, 
                                                              y: y, 
                                                              z: z, 
                                                              index: loadingChunkIndex, 
                                                              blocks: Game_Cubbit_Generation.createBlockMap(v.terrain.noise)(loadingChunkIndex), 
                                                              standardMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value, 
                                                              waterMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value, 
                                                              transparentMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value
                                                          })(v.terrain)();
                                                          return true;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 70, column 25 - line 84, column 42: " + [ v3.constructor.name ]);
                                                  };
                                              })());
                                          });
                                      });
                                  })();
                                  var v3 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
                                  var v4 = (function () {
                                      if (v3 instanceof Data_Maybe.Nothing) {
                                          return Game_Cubbit_Generation.createBlockMap(v.terrain.noise)(index);
                                      };
                                      if (v3 instanceof Data_Maybe.Just) {
                                          return v3.value0.blocks;
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 88, column 28 - line 90, column 47: " + [ v3.constructor.name ]);
                                  })();
                                  var $46 = createTerrainGeometry(v.terrain)({
                                      index: index, 
                                      blocks: v4
                                  });
                                  var v5 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
                                  (function () {
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return Game_Cubbit_Chunk.disposeChunk(v5.value0);
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 99, column 21 - line 101, column 65: " + [ v5.constructor.name ]);
                                  })()();
                                  var ci = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                                  var gen = function (vertices) {
                                      return function (mat) {
                                          return function (gruop) {
                                              var $50 = 0 < Data_Array.length(vertices.indices);
                                              if ($50) {
                                                  return function __do() {
                                                      var v6 = generateMesh(index)(vertices)(mat)(scene)(v2)();
                                                      Graphics_Babylon_AbstractMesh.setRenderingGroupId(gruop)(Graphics_Babylon_Mesh.meshToAbstractMesh(v6))();
                                                      return new Game_Cubbit_Chunk.MeshLoaded(v6);
                                                  };
                                              };
                                              if (!$50) {
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Game_Cubbit_Chunk.EmptyMeshLoaded.value);
                                              };
                                              throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 106, column 50 - line 112, column 53: " + [ $50.constructor.name ]);
                                          };
                                      };
                                  };
                                  var v6 = gen($46.standardMaterialBlocks)(materials.blockMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                                  var v7 = gen($46.waterMaterialBlocks)(materials.waterMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                                  var v8 = gen($46.transparentMaterialVertexData)(materials.bushMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                                  Game_Cubbit_Terrain.insertChunk({
                                      x: ci.x, 
                                      y: ci.y, 
                                      z: ci.z, 
                                      index: index, 
                                      blocks: v4, 
                                      standardMaterialMesh: v6, 
                                      waterMaterialMesh: v7, 
                                      transparentMaterialMesh: v8
                                  })(v.terrain)();
                                  return 0 < (Data_Array.length($46.standardMaterialBlocks.indices) + Data_Array.length($46.waterMaterialBlocks.indices) | 0);
                              };
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 59, column 5 - line 130, column 109: " + [ v.res.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var updateChunkMesh = function (ref) {
      return function (materials) {
          return function (scene) {
              return function (chunkWithMesh) {
                  return function (v) {
                      return function (v1) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                              var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                              var v3 = createTerrainGeometry(v2.terrain)({
                                  index: chunkWithMesh.index, 
                                  blocks: chunkWithMesh.blocks
                              });
                              var v4 = Game_Cubbit_Terrain.lookupChunk(chunkWithMesh.index)(v2.terrain)();
                              (function () {
                                  if (v4 instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                  };
                                  if (v4 instanceof Data_Maybe.Just) {
                                      return Game_Cubbit_Chunk.disposeChunk(v4.value0);
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 191, column 5 - line 193, column 49: " + [ v4.constructor.name ]);
                              })()();
                              var v5 = generateMesh(chunkWithMesh.index)(v3.standardMaterialBlocks)(materials.blockMaterial)(scene)(v1)();
                              var v6 = generateMesh(chunkWithMesh.index)(v3.waterMaterialBlocks)(materials.waterMaterial)(scene)(v1)();
                              var v7 = generateMesh(chunkWithMesh.index)(v3.transparentMaterialVertexData)(materials.bushMaterial)(scene)(v1)();
                              var ci = Game_Cubbit_ChunkIndex.runChunkIndex(chunkWithMesh.index);
                              var v8 = {
                                  x: ci.x, 
                                  y: ci.y, 
                                  z: ci.z, 
                                  index: chunkWithMesh.index, 
                                  blocks: chunkWithMesh.blocks, 
                                  standardMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v5), 
                                  waterMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v6), 
                                  transparentMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v7)
                              };
                              return Game_Cubbit_Terrain.insertChunk(v8)(v2.terrain)();
                          });
                      };
                  };
              };
          };
      };
  };
  var editBlock = function (ref) {
      return function (globalBlockIndex) {
          return function (block) {
              return function __do() {
                  var v = Control_Monad_Eff_Ref.readRef(ref)();
                  var editChunkIndex = Game_Cubbit_Terrain.globalIndexToChunkIndex(globalBlockIndex);
                  var v1 = Game_Cubbit_Terrain.lookupChunk(editChunkIndex)(v.terrain)();
                  if (v1 instanceof Data_Maybe.Just && v.res instanceof Game_Cubbit_Types.Complete) {
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                          var localIndex = Game_Cubbit_Terrain.globalIndexToLocalIndex(globalBlockIndex);
                          var li = Game_Cubbit_LocalIndex.runLocalIndex(localIndex);
                          return function __do() {
                              updateChunkMesh(ref)(v.res.value0.materials)(v.res.value0.scene)((function () {
                                  var $79 = {};
                                  for (var $80 in v1.value0) {
                                      if (v1.value0.hasOwnProperty($80)) {
                                          $79[$80] = v1.value0[$80];
                                      };
                                  };
                                  $79.blocks = Game_Cubbit_BoxelMap.insert(localIndex)(block)(v1.value0.blocks);
                                  return $79;
                              })())(v.res.value0.options)(v.config)();
                              var eci = Game_Cubbit_ChunkIndex.runChunkIndex(editChunkIndex);
                              var refreash = function (dx) {
                                  return function (dy) {
                                      return function (dz) {
                                          return function __do() {
                                              var v2 = Game_Cubbit_Terrain.lookupChunk(Game_Cubbit_ChunkIndex.chunkIndex(eci.x + dx | 0)(eci.y + dy | 0)(eci.z + dz | 0))(v.terrain)();
                                              if (v2 instanceof Data_Maybe.Nothing) {
                                                  return Data_Unit.unit;
                                              };
                                              if (v2 instanceof Data_Maybe.Just) {
                                                  return updateChunkMesh(ref)(v.res.value0.materials)(v.res.value0.scene)(v2.value0)(v.res.value0.options)(v.config)();
                                              };
                                              throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 168, column 21 - line 170, column 133: " + [ v2.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.x === 0)(refreash(-1)(0)(0))();
                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.x === Game_Cubbit_Constants.chunkSize - 1)(refreash(1)(0)(0))();
                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.y === 0)(refreash(0)(-1)(0))();
                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.y === Game_Cubbit_Constants.chunkSize - 1)(refreash(0)(1)(0))();
                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.z === 0)(refreash(0)(0)(-1))();
                              return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.z === Game_Cubbit_Constants.chunkSize - 1)(refreash(0)(0)(1))();
                          };
                      })())();
                  };
                  return Data_Unit.unit;
              };
          };
      };
  };
  exports["editBlock"] = editBlock;
  exports["generateChunk"] = generateChunk;
})(PS["Game.Cubbit.MeshBuilder"] = PS["Game.Cubbit.MeshBuilder"] || {});
(function(exports) {
    "use strict";

  /* global document */

  exports.requestPointerLock = function(callback){
      return function(onExit){
          return function(){
              var mousemoveListener = function(e){
                  callback(e)();
              };
              var pointerlockchangeListener = function(){
                  if( ! document.pointerLockElement){
                      document.body.removeEventListener("mousemove", mousemoveListener);
                      document.removeEventListener("pointerlockchange", pointerlockchangeListener);
                      onExit();
                  }
              };
              document.body.addEventListener("mousemove", mousemoveListener);
              document.addEventListener("pointerlockchange", pointerlockchangeListener);

              if(document.body.requestPointerLock){
                  document.body.requestPointerLock();
              }else if(document.body.webkitRequestPointerLock){
                  document.body.webkitRequestPointerLock();
              }else if(document.body.mozRequestPointerLock){
                  document.body.mozRequestPointerLock();
              }else if(document.body.msRequestPointerLock){
                  document.body.msRequestPointerLock();
              }
          };
      };
  };

  exports.exitPointerLock = function(){
      document.exitPointerLock();
  };
})(PS["Game.Cubbit.PointerLock"] = PS["Game.Cubbit.PointerLock"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.PointerLock"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["exitPointerLock"] = $foreign.exitPointerLock;
  exports["requestPointerLock"] = $foreign.requestPointerLock;
})(PS["Game.Cubbit.PointerLock"] = PS["Game.Cubbit.PointerLock"] || {});
(function(exports) {
    "use strict";

  exports._show = function(showUI){
      return function(camera){
          return function(rootElement){
              return function(debugLayer){
                  return function(){
                      debugLayer.show(showUI, camera, rootElement);
                  };
              };
          };
      };
  };

  exports.hide = function(debugLayer){
      return function(){
          debugLayer.hide();
      };
  };
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.DebugLayer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var show = function (shoUI) {
      return function (camera) {
          return function (rootElement) {
              return function (debugLayer) {
                  return $foreign._show(shoUI)(camera)(Data_Nullable.toNullable(rootElement))(debugLayer);
              };
          };
      };
  };
  exports["show"] = show;
  exports["hide"] = $foreign.hide;
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Listening = (function () {
      function Listening() {

      };
      Listening.value = new Listening();
      return Listening;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var unEventSource = function (v) {
      return v;
  };
  var eqSubscribeStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Listening && y instanceof Listening) {
              return true;
          };
          if (x instanceof Done && y instanceof Done) {
              return true;
          };
          return false;
      };
  });
  exports["Listening"] = Listening;
  exports["Done"] = Done;
  exports["unEventSource"] = unEventSource;
  exports["eqSubscribeStatus"] = eqSubscribeStatus;
})(PS["Halogen.Query.EventSource"] = PS["Halogen.Query.EventSource"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var unChildQuery = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  exports["unChildQuery"] = unChildQuery;
})(PS["Halogen.Query.ChildQuery"] = PS["Halogen.Query.ChildQuery"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var unFork = Unsafe_Coerce.unsafeCoerce;
  exports["unFork"] = unFork;
})(PS["Halogen.Query.ForkF"] = PS["Halogen.Query.ForkF"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Fork = PS["Control.Monad.Fork"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_List = PS["Data.List"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_Query_ChildQuery = PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];
  var HalogenM = function (x) {
      return x;
  };
  var GetState = (function () {
      function GetState(value0) {
          this.value0 = value0;
      };
      GetState.create = function (value0) {
          return new GetState(value0);
      };
      return GetState;
  })();
  var ModifyState = (function () {
      function ModifyState(value0) {
          this.value0 = value0;
      };
      ModifyState.create = function (value0) {
          return new ModifyState(value0);
      };
      return ModifyState;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Halt = (function () {
      function Halt(value0) {
          this.value0 = value0;
      };
      Halt.create = function (value0) {
          return new Halt(value0);
      };
      return Halt;
  })();
  var GetSlots = (function () {
      function GetSlots(value0) {
          this.value0 = value0;
      };
      GetSlots.create = function (value0) {
          return new GetSlots(value0);
      };
      return GetSlots;
  })();
  var CheckSlot = (function () {
      function CheckSlot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CheckSlot.create = function (value0) {
          return function (value1) {
              return new CheckSlot(value0, value1);
          };
      };
      return CheckSlot;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0) {
          this.value0 = value0;
      };
      ChildQuery.create = function (value0) {
          return new ChildQuery(value0);
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0) {
          this.value0 = value0;
      };
      Fork.create = function (value0) {
          return new Fork(value0);
      };
      return Fork;
  })();                                                                                                             
  var functorHalogenM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v);
      };
  });
  var applyHalogenM = new Control_Apply.Apply(function () {
      return functorHalogenM;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Control_Monad_Free.freeApply)(v)(v1);
      };
  });
  var bindHalogenM = new Control_Bind.Bind(function () {
      return applyHalogenM;
  }, function (v) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(v)(function (x) {
              var $79 = f(x);
              return $79;
          });
      };
  });                                                       
  var applicativeHalogenM = new Control_Applicative.Applicative(function () {
      return applyHalogenM;
  }, function (a) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(a);
  });
  var monadHalogenM = new Control_Monad.Monad(function () {
      return applicativeHalogenM;
  }, function () {
      return bindHalogenM;
  });
  var monadEffHalogenM = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadHalogenM;
      }, function (eff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Eff_Class.liftEff(dictMonadEff)(eff))));
      });
  };
  var monadAffHalogenM = function (dictMonadAff) {
      return new Control_Monad_Aff_Class.MonadAff(function () {
          return monadEffHalogenM(dictMonadAff["__superclass_Control.Monad.Eff.Class.MonadEff_0"]());
      }, function (aff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Aff_Class.liftAff(dictMonadAff)(aff))));
      });
  };
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($85) {
      return HalogenM(Control_Monad_Free.liftF(ModifyState.create($85)));
  });
  exports["GetState"] = GetState;
  exports["ModifyState"] = ModifyState;
  exports["Subscribe"] = Subscribe;
  exports["Lift"] = Lift;
  exports["Halt"] = Halt;
  exports["GetSlots"] = GetSlots;
  exports["CheckSlot"] = CheckSlot;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["HalogenM"] = HalogenM;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applyHalogenM"] = applyHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadHalogenM"] = monadHalogenM;
  exports["monadEffHalogenM"] = monadEffHalogenM;
  exports["monadAffHalogenM"] = monadAffHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
})(PS["Halogen.Query.HalogenM"] = PS["Halogen.Query.HalogenM"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var action = function (act) {
      return act(Data_Unit.unit);
  };
  exports["action"] = action;
})(PS["Halogen.Query"] = PS["Halogen.Query"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_Event_KeyboardEvent = PS["DOM.Event.KeyboardEvent"];
  var DOM_Event_MouseEvent = PS["DOM.Event.MouseEvent"];
  var DOM_Event_WheelEvent = PS["DOM.Event.WheelEvent"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Set = PS["Data.Set"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Game_Cubbit_Aff = PS["Game.Cubbit.Aff"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_Collesion = PS["Game.Cubbit.Collesion"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Control = PS["Game.Cubbit.Control"];
  var Game_Cubbit_Hud_Type = PS["Game.Cubbit.Hud.Type"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_PointerLock = PS["Game.Cubbit.PointerLock"];
  var Game_Cubbit_Sounds = PS["Game.Cubbit.Sounds"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_DebugLayer = PS["Graphics.Babylon.DebugLayer"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_Sound = PS["Graphics.Babylon.Sound"];
  var Halogen = PS["Halogen"];
  var Halogen_Query = PS["Halogen.Query"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var DOM_Event_Types = PS["DOM.Event.Types"];        
  var repaint = function (driver) {
      return function (state) {
          return driver.query(Halogen_Query.action(Game_Cubbit_Hud_Type.Query.create(new Game_Cubbit_Hud_Type.Repaint(state))));
      };
  };
  var offsetY = function (e) {
      return (Unsafe_Coerce.unsafeCoerce(e)).offsetY;
  };
  var offsetX = function (e) {
      return (Unsafe_Coerce.unsafeCoerce(e)).offsetX;
  };
  var modifyAppState = function (ref) {
      return function (f) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
              var state$prime = f(v);
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.writeRef(ref)(state$prime)))(function () {
                  return Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(state$prime);
              });
          });
      };
  };
  var deltaY = function (e) {
      return (Unsafe_Coerce.unsafeCoerce(e)).deltaY;
  };
  var $$eval = function (ref) {
      return function (query) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
              if (v.res instanceof Game_Cubbit_Types.Loading) {
                  return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(query.value1)((function () {
                      if (query.value0 instanceof Game_Cubbit_Hud_Type.Repaint) {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.writeRef(ref)(query.value0.value0)))(function () {
                              return Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(query.value0.value0);
                          });
                      };
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  })());
              };
              if (v.res instanceof Game_Cubbit_Types.Complete) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.res.value0.options))(function (v1) {
                      return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(query.value1)((function () {
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.Repaint) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.writeRef(ref)(query.value0.value0)))(function () {
                                  return Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(query.value0.value0);
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.PreventDefault) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(DOM_Event_Event.preventDefault(query.value0.value0)))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(DOM_Event_Event.stopPropagation(query.value0.value0));
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.Nop) {
                              return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                  DOM_Event_Event.preventDefault(query.value0.value0)();
                                  return DOM_Event_Event.stopPropagation(query.value0.value0)();
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.StopPropagation) {
                              return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(DOM_Event_Event.stopPropagation(query.value0.value0));
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.ShowConfig) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $64 = {};
                                  for (var $65 in v2) {
                                      if (v2.hasOwnProperty($65)) {
                                          $64[$65] = v2[$65];
                                      };
                                  };
                                  $64.configVisible = true;
                                  return $64;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound));
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.CloseConfig) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $68 = {};
                                  for (var $69 in v2) {
                                      if (v2.hasOwnProperty($69)) {
                                          $68[$69] = v2[$69];
                                      };
                                  };
                                  $68.configVisible = false;
                                  return $68;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound));
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.SetBGMVolume) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $75 = {};
                                  for (var $76 in v2) {
                                      if (v2.hasOwnProperty($76)) {
                                          $75[$76] = v2[$76];
                                      };
                                  };
                                  $75.config = (function () {
                                      var $72 = {};
                                      for (var $73 in v2.config) {
                                          if (v2.config.hasOwnProperty($73)) {
                                              $72[$73] = v2.config[$73];
                                          };
                                      };
                                      $72.bgmVolume = query.value0.value0;
                                      return $72;
                                  })();
                                  return $75;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      Game_Cubbit_Sounds.setBGMVolume(Data_Int.toNumber(query.value0.value0) / 8.0)(v.res.value0.sounds)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.SetSEVolume) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $85 = {};
                                  for (var $86 in v2) {
                                      if (v2.hasOwnProperty($86)) {
                                          $85[$86] = v2[$86];
                                      };
                                  };
                                  $85.config = (function () {
                                      var $82 = {};
                                      for (var $83 in v2.config) {
                                          if (v2.config.hasOwnProperty($83)) {
                                              $82[$83] = v2.config[$83];
                                          };
                                      };
                                      $82.seVolume = query.value0.value0;
                                      return $82;
                                  })();
                                  return $85;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      Game_Cubbit_Sounds.setSEVolume(Data_Int.toNumber(query.value0.value0) / 8.0)(v.res.value0.sounds)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.ToggleShadow) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $95 = {};
                                  for (var $96 in v2) {
                                      if (v2.hasOwnProperty($96)) {
                                          $95[$96] = v2[$96];
                                      };
                                  };
                                  $95.config = (function () {
                                      var $92 = {};
                                      for (var $93 in v2.config) {
                                          if (v2.config.hasOwnProperty($93)) {
                                              $92[$93] = v2.config[$93];
                                          };
                                      };
                                      $92.shadow = !v2.config.shadow;
                                      return $92;
                                  })();
                                  return $95;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.ToggleVertexColor) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $104 = {};
                                  for (var $105 in v2) {
                                      if (v2.hasOwnProperty($105)) {
                                          $104[$105] = v2[$105];
                                      };
                                  };
                                  $104.config = (function () {
                                      var $101 = {};
                                      for (var $102 in v2.config) {
                                          if (v2.config.hasOwnProperty($102)) {
                                              $101[$102] = v2.config[$102];
                                          };
                                      };
                                      $101.vertexColor = !v2.config.vertexColor;
                                      return $101;
                                  })();
                                  return $104;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.SetShadowArea) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $113 = {};
                                  for (var $114 in v2) {
                                      if (v2.hasOwnProperty($114)) {
                                          $113[$114] = v2[$114];
                                      };
                                  };
                                  $113.config = (function () {
                                      var $110 = {};
                                      for (var $111 in v2.config) {
                                          if (v2.config.hasOwnProperty($111)) {
                                              $110[$111] = v2.config[$111];
                                          };
                                      };
                                      $110.shadowArea = query.value0.value0;
                                      return $110;
                                  })();
                                  return $113;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.SetChunkArea) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $123 = {};
                                  for (var $124 in v2) {
                                      if (v2.hasOwnProperty($124)) {
                                          $123[$124] = v2[$124];
                                      };
                                  };
                                  $123.config = (function () {
                                      var $120 = {};
                                      for (var $121 in v2.config) {
                                          if (v2.config.hasOwnProperty($121)) {
                                              $120[$121] = v2.config[$121];
                                          };
                                      };
                                      $120.chunkArea = query.value0.value0;
                                      return $120;
                                  })();
                                  return $123;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.Start) {
                              var nextScene = new Game_Cubbit_Types.PlayingSceneState({
                                  cameraYaw: 0.0, 
                                  cameraPitch: 0.7, 
                                  cameraRange: 5.0, 
                                  firstPersonView: false, 
                                  firstPersonViewPitch: 0.0, 
                                  position: {
                                      x: 0.5, 
                                      y: 10.0, 
                                      z: 0.5
                                  }, 
                                  velocity: {
                                      x: 0.0, 
                                      y: 0.0, 
                                      z: 0.0
                                  }, 
                                  playerRotation: 0.5, 
                                  playerPitch: 0.0, 
                                  animation: "", 
                                  mode: Game_Cubbit_Types.Move.value, 
                                  landing: 0, 
                                  cursorPosition: Game_Cubbit_BlockIndex.blockIndex(0)(0)(0), 
                                  centerPanelVisible: false, 
                                  life: 10, 
                                  maxLife: 12
                              });
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Graphics_Babylon_Sound.play(v.res.value0.sounds.warpSound)))(function () {
                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                      var $130 = {};
                                      for (var $131 in v2) {
                                          if (v2.hasOwnProperty($131)) {
                                              $130[$131] = v2[$131];
                                          };
                                      };
                                      $130.nextScene = new Data_Maybe.Just(nextScene);
                                      return $130;
                                  }))(function () {
                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Game_Cubbit_Aff.wait(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(1000))(function () {
                                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                              var $134 = {};
                                              for (var $135 in v2) {
                                                  if (v2.hasOwnProperty($135)) {
                                                      $134[$135] = v2[$135];
                                                  };
                                              };
                                              $134.cameraPosition = {
                                                  x: 10.0, 
                                                  y: 20.0, 
                                                  z: -10.0
                                              };
                                              $134.cameraTarget = {
                                                  x: 0.5, 
                                                  y: 11.0, 
                                                  z: 0.5
                                              };
                                              $134.sceneState = nextScene;
                                              return $134;
                                          }))(function () {
                                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                                  var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                                  Game_Cubbit_Sounds.stopBGM(v2.config.bgmVolume)(v.res.value0.sounds)();
                                                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(v.res.value0.playerMeshes)(function (mesh) {
                                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Babylon_AbstractMesh.setIsVisible(true)(mesh));
                                                  })();
                                              }))(function () {
                                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Game_Cubbit_Aff.wait(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(1000))(function () {
                                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                                          Graphics_Babylon_Sound.play(v.res.value0.sounds.forestSound)();
                                                          var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                                          return Game_Cubbit_Sounds.playBGM(v.res.value0.sounds.rye)(v2.config.bgmVolume)(v.res.value0.sounds)();
                                                      }))(function () {
                                                          return modifyAppState(ref)(function (v2) {
                                                              var $142 = {};
                                                              for (var $143 in v2) {
                                                                  if (v2.hasOwnProperty($143)) {
                                                                      $142[$143] = v2[$143];
                                                                  };
                                                              };
                                                              $142.nextScene = Data_Maybe.Nothing.value;
                                                              return $142;
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.ToggleMute) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v2) {
                                  var $149 = {};
                                  for (var $150 in v2) {
                                      if (v2.hasOwnProperty($150)) {
                                          $149[$150] = v2[$150];
                                      };
                                  };
                                  $149.config = (function () {
                                      var $146 = {};
                                      for (var $147 in v2.config) {
                                          if (v2.config.hasOwnProperty($147)) {
                                              $146[$147] = v2.config[$147];
                                          };
                                      };
                                      $146.mute = !v2.config.mute;
                                      return $146;
                                  })();
                                  return $149;
                              }))(function () {
                                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                      var v2 = Control_Monad_Eff_Ref.readRef(ref)();
                                      Game_Cubbit_Sounds.setMute(v2.config.mute)(v.res.value0.sounds)();
                                      return Game_Cubbit_Config.writeConfig(v2.config)();
                                  });
                              });
                          };
                          if (query.value0 instanceof Game_Cubbit_Hud_Type.PlayingSceneQuery) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.readRef(ref)))(function (v2) {
                                  if (v2.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                  };
                                  if (v2.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.SetCursorPosition) {
                                          return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Game_Cubbit_BlockIndex.eq_BlockIndex)(query.value0.value0.value0)(v2.sceneState.value0.cursorPosition))(modifyAppState(ref)(function (v3) {
                                              var $163 = {};
                                              for (var $164 in v3) {
                                                  if (v3.hasOwnProperty($164)) {
                                                      $163[$164] = v3[$164];
                                                  };
                                              };
                                              $163.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                  var $160 = {};
                                                  for (var $161 in v2.sceneState.value0) {
                                                      if (v2.sceneState.value0.hasOwnProperty($161)) {
                                                          $160[$161] = v2.sceneState.value0[$161];
                                                      };
                                                  };
                                                  $160.cursorPosition = query.value0.value0.value0;
                                                  return $160;
                                              })());
                                              return $163;
                                          }));
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.SetMode) {
                                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Eq.notEq(Game_Cubbit_Types.eqMode)(v2.sceneState.value0.mode)(query.value0.value0.value0))(Graphics_Babylon_Sound.play(v.res.value0.sounds.switchSound))))(function () {
                                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v3) {
                                                  var $171 = {};
                                                  for (var $172 in v3) {
                                                      if (v3.hasOwnProperty($172)) {
                                                          $171[$172] = v3[$172];
                                                      };
                                                  };
                                                  $171.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                      var $168 = {};
                                                      for (var $169 in v2.sceneState.value0) {
                                                          if (v2.sceneState.value0.hasOwnProperty($169)) {
                                                              $168[$169] = v2.sceneState.value0[$169];
                                                          };
                                                      };
                                                      $168.mode = query.value0.value0.value0;
                                                      return $168;
                                                  })());
                                                  return $171;
                                              }))(function () {
                                                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                              });
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.SetPosition) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                              var $179 = {};
                                              for (var $180 in v3) {
                                                  if (v3.hasOwnProperty($180)) {
                                                      $179[$180] = v3[$180];
                                                  };
                                              };
                                              $179.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                  var $176 = {};
                                                  for (var $177 in v2.sceneState.value0) {
                                                      if (v2.sceneState.value0.hasOwnProperty($177)) {
                                                          $176[$177] = v2.sceneState.value0[$177];
                                                      };
                                                  };
                                                  $176.position = query.value0.value0.value0;
                                                  return $176;
                                              })());
                                              return $179;
                                          }));
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.TogglePointerLock) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))((function () {
                                              var firstPersonView = !v2.sceneState.value0.firstPersonView;
                                              return function __do() {
                                                  Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                      var $187 = {};
                                                      for (var $188 in v3) {
                                                          if (v3.hasOwnProperty($188)) {
                                                              $187[$188] = v3[$188];
                                                          };
                                                      };
                                                      $187.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                          var $184 = {};
                                                          for (var $185 in v2.sceneState.value0) {
                                                              if (v2.sceneState.value0.hasOwnProperty($185)) {
                                                                  $184[$185] = v2.sceneState.value0[$185];
                                                              };
                                                          };
                                                          $184.firstPersonView = firstPersonView;
                                                          return $184;
                                                      })());
                                                      return $187;
                                                  })();
                                                  if (firstPersonView) {
                                                      return Game_Cubbit_PointerLock.requestPointerLock(function (e) {
                                                          return function __do() {
                                                              Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                                  var $198 = {};
                                                                  for (var $199 in v3) {
                                                                      if (v3.hasOwnProperty($199)) {
                                                                          $198[$199] = v3[$199];
                                                                      };
                                                                  };
                                                                  $198.sceneState = (function () {
                                                                      if (v3.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                                                                          return new Game_Cubbit_Types.TitleSceneState(v3.sceneState.value0);
                                                                      };
                                                                      if (v3.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                                                                          return new Game_Cubbit_Types.PlayingSceneState((function () {
                                                                              var $194 = {};
                                                                              for (var $195 in v3.sceneState.value0) {
                                                                                  if (v3.sceneState.value0.hasOwnProperty($195)) {
                                                                                      $194[$195] = v3.sceneState.value0[$195];
                                                                                  };
                                                                              };
                                                                              $194.playerRotation = v3.sceneState.value0.playerRotation + e.movementX * v1.pointerHorizontalSensitivity;
                                                                              $194.playerPitch = Data_Ord.max(Data_Ord.ordNumber)(-$$Math.pi * 0.45)(Data_Ord.min(Data_Ord.ordNumber)($$Math.pi * 0.45)(v3.sceneState.value0.playerPitch) - e.movementY * v1.pointerVerticalSensitivity);
                                                                              return $194;
                                                                          })());
                                                                      };
                                                                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 292, column 70 - line 297, column 62: " + [ v3.sceneState.constructor.name ]);
                                                                  })();
                                                                  return $198;
                                                              })();
                                                              return Data_Unit.unit;
                                                          };
                                                      })(Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                          var $208 = {};
                                                          for (var $209 in v3) {
                                                              if (v3.hasOwnProperty($209)) {
                                                                  $208[$209] = v3[$209];
                                                              };
                                                          };
                                                          $208.sceneState = (function () {
                                                              if (v3.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                                                                  return new Game_Cubbit_Types.TitleSceneState(v3.sceneState.value0);
                                                              };
                                                              if (v3.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                                                                  return new Game_Cubbit_Types.PlayingSceneState((function () {
                                                                      var $204 = {};
                                                                      for (var $205 in v3.sceneState.value0) {
                                                                          if (v3.sceneState.value0.hasOwnProperty($205)) {
                                                                              $204[$205] = v3.sceneState.value0[$205];
                                                                          };
                                                                      };
                                                                      $204.firstPersonView = false;
                                                                      return $204;
                                                                  })());
                                                              };
                                                              throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 301, column 66 - line 305, column 58: " + [ v3.sceneState.constructor.name ]);
                                                          })();
                                                          return $208;
                                                      }))();
                                                  };
                                                  if (!firstPersonView) {
                                                      return Game_Cubbit_PointerLock.exitPointerLock();
                                                  };
                                                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 289, column 45 - line 307, column 69: " + [ firstPersonView.constructor.name ]);
                                              };
                                          })());
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.SetMousePosition) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                              var isRightButton = DOM_Event_MouseEvent.buttons(query.value0.value0.value0) === 2;
                                              var dy = offsetY(query.value0.value0.value0) - v3.mousePosition.y;
                                              var dx = offsetX(query.value0.value0.value0) - v3.mousePosition.x;
                                              var $217 = {};
                                              for (var $218 in v3) {
                                                  if (v3.hasOwnProperty($218)) {
                                                      $217[$218] = v3[$218];
                                                  };
                                              };
                                              $217.mousePosition = {
                                                  x: offsetX(query.value0.value0.value0), 
                                                  y: offsetY(query.value0.value0.value0)
                                              };
                                              $217.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                  var $214 = {};
                                                  for (var $215 in v2.sceneState.value0) {
                                                      if (v2.sceneState.value0.hasOwnProperty($215)) {
                                                          $214[$215] = v2.sceneState.value0[$215];
                                                      };
                                                  };
                                                  $214.cameraYaw = (function () {
                                                      if (isRightButton) {
                                                          return v2.sceneState.value0.cameraYaw + Data_Int.toNumber(dx) * v1.cameraHorizontalSensitivity;
                                                      };
                                                      if (!isRightButton) {
                                                          return v2.sceneState.value0.cameraYaw;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 321, column 81 - line 321, column 215: " + [ isRightButton.constructor.name ]);
                                                  })();
                                                  $214.cameraPitch = (function () {
                                                      if (isRightButton) {
                                                          return Data_Ord.max(Data_Ord.ordNumber)(-$$Math.pi * 0.45)(Data_Ord.min(Data_Ord.ordNumber)($$Math.pi * 0.45)(v2.sceneState.value0.cameraPitch + Data_Int.toNumber(dy) * v1.cameraVertialSensitivity));
                                                      };
                                                      if (!isRightButton) {
                                                          return v2.sceneState.value0.cameraPitch;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 322, column 83 - line 322, column 255: " + [ isRightButton.constructor.name ]);
                                                  })();
                                                  return $214;
                                              })());
                                              return $217;
                                          }));
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.OnMouseClick) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                              var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                              Control_Monad_Eff_Ref.modifyRef(ref)(function (v4) {
                                                  var $223 = {};
                                                  for (var $224 in v4) {
                                                      if (v4.hasOwnProperty($224)) {
                                                          $223[$224] = v4[$224];
                                                      };
                                                  };
                                                  $223.mousePosition = {
                                                      x: offsetX(query.value0.value0.value0), 
                                                      y: offsetY(query.value0.value0.value0)
                                                  };
                                                  return $223;
                                              })();
                                              return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(DOM_Event_MouseEvent.buttons(query.value0.value0.value0) === 1)((function () {
                                                  var put = function (block) {
                                                      return function __do() {
                                                          var v4 = Game_Cubbit_Control.pickBlock(v.res.value0.scene)(v.res.value0.cursor)(v2.sceneState.value0.mode)(v3.terrain)(v3.mousePosition.x)(v3.mousePosition.y)();
                                                          if (v4 instanceof Data_Maybe.Nothing) {
                                                              return Data_Unit.unit;
                                                          };
                                                          if (v4 instanceof Data_Maybe.Just) {
                                                              Game_Cubbit_MeshBuilder.editBlock(ref)(v4.value0)(block)();
                                                              var v5 = Game_Cubbit_Collesion.updateChunkCollesion(v3.terrain)(v3.world)(Game_Cubbit_Terrain.globalIndexToChunkIndex(v4.value0))();
                                                              return Control_Monad_Eff_Ref.modifyRef(ref)(function (v6) {
                                                                  var $230 = {};
                                                                  for (var $231 in v6) {
                                                                      if (v6.hasOwnProperty($231)) {
                                                                          $230[$231] = v6[$231];
                                                                      };
                                                                  };
                                                                  $230.terrain = v5;
                                                                  return $230;
                                                              })();
                                                          };
                                                          throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 345, column 57 - line 352, column 66: " + [ v4.constructor.name ]);
                                                      };
                                                  };
                                                  if (v2.sceneState.value0.mode instanceof Game_Cubbit_Types.Put) {
                                                      return function __do() {
                                                          put(v2.sceneState.value0.mode.value0)();
                                                          return Graphics_Babylon_Sound.play(v.res.value0.sounds.putSound)();
                                                      };
                                                  };
                                                  if (v2.sceneState.value0.mode instanceof Game_Cubbit_Types.Remove) {
                                                      return function __do() {
                                                          put(Game_Cubbit_BlockType.airBlock)();
                                                          return Graphics_Babylon_Sound.play(v.res.value0.sounds.pickSound)();
                                                      };
                                                  };
                                                  if (v2.sceneState.value0.mode instanceof Game_Cubbit_Types.Move) {
                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                                  };
                                                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 354, column 49 - line 361, column 70: " + [ v2.sceneState.value0.mode.constructor.name ]);
                                              })())();
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.Zoom) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                              Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                  var $241 = {};
                                                  for (var $242 in v3) {
                                                      if (v3.hasOwnProperty($242)) {
                                                          $241[$242] = v3[$242];
                                                      };
                                                  };
                                                  $241.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                      var $238 = {};
                                                      for (var $239 in v2.sceneState.value0) {
                                                          if (v2.sceneState.value0.hasOwnProperty($239)) {
                                                              $238[$239] = v2.sceneState.value0[$239];
                                                          };
                                                      };
                                                      $238.cameraRange = Data_Ord.max(Data_Ord.ordNumber)(v1.cameraMinimumRange)(Data_Ord.min(Data_Ord.ordNumber)(v1.cameraMaximumRange)(v2.sceneState.value0.cameraRange + Data_Int.toNumber(deltaY(query.value0.value0.value0)) * v1.cameraZoomSpeed));
                                                      return $238;
                                                  })());
                                                  return $241;
                                              })();
                                              DOM_Event_Event.preventDefault(DOM_Event_Types.wheelEventToEvent(query.value0.value0.value0))();
                                              return DOM_Event_Event.stopPropagation(DOM_Event_Types.wheelEventToEvent(query.value0.value0.value0))();
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.OnKeyDown) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                              Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                  var $246 = {};
                                                  for (var $247 in v3) {
                                                      if (v3.hasOwnProperty($247)) {
                                                          $246[$247] = v3[$247];
                                                      };
                                                  };
                                                  $246.keys = Data_Set.insert(Data_Ord.ordString)(DOM_Event_KeyboardEvent.key(query.value0.value0.value0))(v3.keys);
                                                  return $246;
                                              })();
                                              (function () {
                                                  var $249 = DOM_Event_KeyboardEvent.key(query.value0.value0.value0);
                                                  if ($249 === "1") {
                                                      return function __do() {
                                                          var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                                          if (v3.debugLayer) {
                                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(v.res.value0.scene))(Graphics_Babylon_DebugLayer.show(true)(true)(Data_Maybe.Nothing.value))();
                                                          };
                                                          if (!v3.debugLayer) {
                                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(v.res.value0.scene))(Graphics_Babylon_DebugLayer.hide)();
                                                          };
                                                          throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 380, column 49 - line 382, column 97: " + [ v3.debugLayer.constructor.name ]);
                                                      };
                                                  };
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                              })()();
                                              DOM_Event_Event.preventDefault(DOM_Event_Types.keyboardEventToEvent(query.value0.value0.value0))();
                                              return DOM_Event_Event.stopPropagation(DOM_Event_Types.keyboardEventToEvent(query.value0.value0.value0))();
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.OnKeyUp) {
                                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                              Control_Monad_Eff_Ref.modifyRef(ref)(function (v3) {
                                                  var $254 = {};
                                                  for (var $255 in v3) {
                                                      if (v3.hasOwnProperty($255)) {
                                                          $254[$255] = v3[$255];
                                                      };
                                                  };
                                                  $254.keys = Data_Set["delete"](Data_Ord.ordString)(DOM_Event_KeyboardEvent.key(query.value0.value0.value0))(v3.keys);
                                                  return $254;
                                              })();
                                              DOM_Event_Event.preventDefault(DOM_Event_Types.keyboardEventToEvent(query.value0.value0.value0))();
                                              return DOM_Event_Event.stopPropagation(DOM_Event_Types.keyboardEventToEvent(query.value0.value0.value0))();
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.SetCenterPanelVisible) {
                                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v3) {
                                              var $262 = {};
                                              for (var $263 in v3) {
                                                  if (v3.hasOwnProperty($263)) {
                                                      $262[$263] = v3[$263];
                                                  };
                                              };
                                              $262.sceneState = new Game_Cubbit_Types.PlayingSceneState((function () {
                                                  var $259 = {};
                                                  for (var $260 in v2.sceneState.value0) {
                                                      if (v2.sceneState.value0.hasOwnProperty($260)) {
                                                          $259[$260] = v2.sceneState.value0[$260];
                                                      };
                                                  };
                                                  $259.centerPanelVisible = query.value0.value0.value0;
                                                  return $259;
                                              })());
                                              return $262;
                                          }))(function () {
                                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                          });
                                      };
                                      if (query.value0.value0 instanceof Game_Cubbit_Hud_Type.Home) {
                                          var nextScene = new Game_Cubbit_Types.TitleSceneState({
                                              position: 0.0
                                          });
                                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Graphics_Babylon_Sound.play(v.res.value0.sounds.warpSound)))(function () {
                                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v3) {
                                                  var $267 = {};
                                                  for (var $268 in v3) {
                                                      if (v3.hasOwnProperty($268)) {
                                                          $267[$268] = v3[$268];
                                                      };
                                                  };
                                                  $267.nextScene = new Data_Maybe.Just(nextScene);
                                                  return $267;
                                              }))(function () {
                                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Game_Cubbit_Aff.wait(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(1000))(function () {
                                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                                          var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                                          Game_Cubbit_Sounds.stopBGM(v3.config.bgmVolume)(v.res.value0.sounds)();
                                                          return Graphics_Babylon_Sound.stop(v.res.value0.sounds.forestSound)();
                                                      }))(function () {
                                                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(modifyAppState(ref)(function (v3) {
                                                              var $273 = {};
                                                              for (var $274 in v3) {
                                                                  if (v3.hasOwnProperty($274)) {
                                                                      $273[$274] = v3[$274];
                                                                  };
                                                              };
                                                              $273.sceneState = nextScene;
                                                              return $273;
                                                          }))(function () {
                                                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Game_Cubbit_Aff.wait(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(1000))(function () {
                                                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(function __do() {
                                                                      var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                                                      return Game_Cubbit_Sounds.playBGM(v.res.value0.sounds.cleaning)(v3.config.bgmVolume)(v.res.value0.sounds)();
                                                                  }))(function () {
                                                                      return modifyAppState(ref)(function (v3) {
                                                                          var $279 = {};
                                                                          for (var $280 in v3) {
                                                                              if (v3.hasOwnProperty($280)) {
                                                                                  $279[$280] = v3[$280];
                                                                              };
                                                                          };
                                                                          $279.nextScene = Data_Maybe.Nothing.value;
                                                                          return $279;
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 248, column 33 - line 418, column 115: " + [ query.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 240, column 25 - line 418, column 115: " + [ v2.sceneState.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 66, column 41 - line 418, column 115: " + [ query.value0.constructor.name ]);
                      })());
                  });
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Eval line 46, column 5 - line 418, column 115: " + [ v.res.constructor.name ]);
          });
      };
  };
  exports["eval"] = $$eval;
  exports["repaint"] = repaint;
})(PS["Game.Cubbit.Hud.Eval"] = PS["Game.Cubbit.Hud.Eval"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var unOrdBox = function (v) {
      return v.value2;
  };
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd["__superclass_Data.Eq.Eq_0"]()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["unOrdBox"] = unOrdBox;
  exports["eqOrdBox"] = eqOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS["Halogen.Data.OrdBox"] = PS["Halogen.Data.OrdBox"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Applicative = PS["Control.Applicative"];        
  var TagName = function (x) {
      return x;
  };
  var PropName = function (x) {
      return x;
  };
  var Namespace = function (x) {
      return x;
  };
  var ClassName = function (x) {
      return x;
  };
  var AttrName = function (x) {
      return x;
  };
  var PropF = (function () {
      function PropF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PropF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PropF(value0, value1, value2);
              };
          };
      };
      return PropF;
  })();
  var Prop = (function () {
      function Prop(value0) {
          this.value0 = value0;
      };
      Prop.create = function (value0) {
          return new Prop(value0);
      };
      return Prop;
  })();
  var Attr = (function () {
      function Attr(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attr(value0, value1, value2);
              };
          };
      };
      return Attr;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Slot = (function () {
      function Slot(value0) {
          this.value0 = value0;
      };
      Slot.create = function (value0) {
          return new Slot(value0);
      };
      return Slot;
  })();
  var Fuse = (function () {
      function Fuse(value0) {
          this.value0 = value0;
      };
      Fuse.create = function (value0) {
          return new Fuse(value0);
      };
      return Fuse;
  })();
  var FuseF = (function () {
      function FuseF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FuseF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FuseF(value0, value1, value2);
              };
          };
      };
      return FuseF;
  })();
  var IsProp = function (toPropString) {
      this.toPropString = toPropString;
  };
  var unFuse = Unsafe_Coerce.unsafeCoerce;
  var toPropString = function (dict) {
      return dict.toPropString;
  };
  var stringIsProp = new IsProp(function (v) {
      return function (v1) {
          return function (s) {
              return s;
          };
      };
  });
  var prop = function (dictIsProp) {
      return function (pn) {
          return function (an) {
              return function (v) {
                  return new Prop(Data_Exists.mkExists(new PropF(pn, v, Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(toPropString(dictIsProp)))(an))));
              };
          };
      };
  }; 
  var newtypeTagName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, TagName);
  var newtypePropName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, PropName);
  var newtypeNamespace = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Namespace);
  var newtypeClassName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ClassName);
  var newtypeAttrName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, AttrName);
  var mkFuse = Unsafe_Coerce.unsafeCoerce;
  var intIsProp = new IsProp(function (v) {
      return function (v1) {
          return function (i) {
              return Data_Show.show(Data_Show.showInt)(i);
          };
      };
  });
  var handler = Handler.create;
  var functorProp = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Prop) {
              return new Prop(v1.value0);
          };
          if (v1 instanceof Key) {
              return new Key(v1.value0);
          };
          if (v1 instanceof Attr) {
              return new Attr(v1.value0, v1.value1, v1.value2);
          };
          if (v1 instanceof Handler) {
              return new Handler(v1.value0, function ($121) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(v)(v1.value1($121));
              });
          };
          if (v1 instanceof Ref) {
              return new Ref(function ($122) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(v)(v1.value0($122));
              });
          };
          throw new Error("Failed pattern match at Halogen.HTML.Core line 84, column 3 - line 84, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                               
  var element = Element.create(Data_Maybe.Nothing.value);
  var booleanIsProp = new IsProp(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2) {
                  return v;
              };
              if (!v2) {
                  return "";
              };
              throw new Error("Failed pattern match at Halogen.HTML.Core line 158, column 3 - line 158, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifunctorFuse = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unFuse(function (v) {
              return mkFuse(new FuseF(function ($123) {
                  return f(v.value0($123));
              }, function ($124) {
                  return g(v.value1($124));
              }, v.value2));
          });
      };
  });                                                                            
  var lowerFuse = (function () {
      var go = function (f) {
          return function (g) {
              return function (v) {
                  if (v instanceof Text) {
                      return new Text(v.value0);
                  };
                  if (v instanceof Element) {
                      return new Element(v.value0, v.value1, Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(functorProp)(g))(v.value2), Data_Functor.map(Data_Functor.functorArray)(go(f)(g))(v.value3));
                  };
                  if (v instanceof Slot) {
                      return new Slot(f(v.value0));
                  };
                  if (v instanceof Fuse) {
                      return lowerFuse(Data_Bifunctor.bimap(bifunctorFuse)(f)(g)(v.value0));
                  };
                  throw new Error("Failed pattern match at Halogen.HTML.Core line 130, column 12 - line 138, column 30: " + [ v.constructor.name ]);
              };
          };
      };
      return unFuse(function (v) {
          return go(v.value0)(v.value1)(v.value2);
      });
  })();
  exports["AttrName"] = AttrName;
  exports["ClassName"] = ClassName;
  exports["Text"] = Text;
  exports["Element"] = Element;
  exports["Slot"] = Slot;
  exports["Fuse"] = Fuse;
  exports["Namespace"] = Namespace;
  exports["Prop"] = Prop;
  exports["Attr"] = Attr;
  exports["Key"] = Key;
  exports["Handler"] = Handler;
  exports["Ref"] = Ref;
  exports["PropF"] = PropF;
  exports["PropName"] = PropName;
  exports["TagName"] = TagName;
  exports["IsProp"] = IsProp;
  exports["element"] = element;
  exports["handler"] = handler;
  exports["lowerFuse"] = lowerFuse;
  exports["prop"] = prop;
  exports["toPropString"] = toPropString;
  exports["functorProp"] = functorProp;
  exports["bifunctorFuse"] = bifunctorFuse;
  exports["stringIsProp"] = stringIsProp;
  exports["intIsProp"] = intIsProp;
  exports["booleanIsProp"] = booleanIsProp;
  exports["newtypeNamespace"] = newtypeNamespace;
  exports["newtypeTagName"] = newtypeTagName;
  exports["newtypePropName"] = newtypePropName;
  exports["newtypeAttrName"] = newtypeAttrName;
  exports["newtypeClassName"] = newtypeClassName;
})(PS["Halogen.HTML.Core"] = PS["Halogen.HTML.Core"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Const = PS["Data.Const"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var unComponentSlot = function (f) {
      return function (cs) {
          var $10 = Unsafe_Coerce.unsafeCoerce(cs);
          return f($10.value0)($10.value1)($10.value2);
      };
  };
  var unComponent = Unsafe_Coerce.unsafeCoerce;                          
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var lifecycleComponent = function (spec) {
      return mkComponent({
          initialState: spec.initialState, 
          render: Unsafe_Coerce.unsafeCoerce(spec.render), 
          "eval": spec["eval"], 
          initializer: spec.initializer, 
          finalizer: spec.finalizer, 
          mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(Data_Ord.ordVoid)
      });
  };
  var component = function (spec) {
      return lifecycleComponent({
          initialState: spec.initialState, 
          render: spec.render, 
          "eval": spec["eval"], 
          initializer: Data_Maybe.Nothing.value, 
          finalizer: Data_Maybe.Nothing.value
      });
  };
  exports["component"] = component;
  exports["lifecycleComponent"] = lifecycleComponent;
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["unComponentSlot"] = unComponentSlot;
})(PS["Halogen.Component"] = PS["Halogen.Component"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String = PS["Data.String"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];                             
  var prop = function (dictIsProp) {
      return Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Core.prop(dictIsProp));
  };                                                                                                         
  var src = prop(Halogen_HTML_Core.stringIsProp)("src")(Data_Maybe.Just.create("src"));
  var tabIndex = prop(Halogen_HTML_Core.intIsProp)("tabIndex")(Data_Maybe.Just.create("tabindex"));
  var target = prop(Halogen_HTML_Core.stringIsProp)("target")(Data_Maybe.Just.create("target"));
  var key = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Core.Key.create);
  var id_ = prop(Halogen_HTML_Core.stringIsProp)("id")(Data_Maybe.Just.create("id"));
  var href = prop(Halogen_HTML_Core.stringIsProp)("href")(Data_Maybe.Just.create("href"));
  var class_ = function ($35) {
      return prop(Halogen_HTML_Core.stringIsProp)("className")(Data_Maybe.Just.create("class"))(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName)($35));
  };                                                                                               
  var autofocus = prop(Halogen_HTML_Core.booleanIsProp)("autofocus")(Data_Maybe.Just.create("autofocus"));
  exports["autofocus"] = autofocus;
  exports["class_"] = class_;
  exports["href"] = href;
  exports["id_"] = id_;
  exports["key"] = key;
  exports["prop"] = prop;
  exports["src"] = src;
  exports["tabIndex"] = tabIndex;
  exports["target"] = target;
})(PS["Halogen.HTML.Properties"] = PS["Halogen.HTML.Properties"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var element = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Core.element);
  var h2 = element("h2");
  var i = element("i");
  var img = function (props) {
      return element("img")(props)([  ]);
  };                         
  var p = element("p");
  var p_ = p([  ]);  
  var div = element("div");
  var a = element("a");
  exports["a"] = a;
  exports["div"] = div;
  exports["element"] = element;
  exports["h2"] = h2;
  exports["i"] = i;
  exports["img"] = img;
  exports["p"] = p;
  exports["p_"] = p_;
})(PS["Halogen.HTML.Elements"] = PS["Halogen.HTML.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Data_Functor = PS["Data.Functor"];        
  var text = Halogen_HTML_Core.Text.create;
  exports["text"] = text;
})(PS["Halogen.HTML"] = PS["Halogen.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];        
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var keyHandler = Unsafe_Coerce.unsafeCoerce;
  var handler = Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Core.handler);
  var onClick = function ($2) {
      return handler("click")(mouseHandler($2));
  };
  var onContextMenu = function ($3) {
      return handler("contextmenu")(mouseHandler($3));
  };                                 
  var onKeyDown = function ($5) {
      return handler("keydown")(keyHandler($5));
  };
  var onKeyUp = function ($7) {
      return handler("keyup")(keyHandler($7));
  };                           
  var onMouseDown = function ($8) {
      return handler("mousedown")(mouseHandler($8));
  };
  var onMouseMove = function ($11) {
      return handler("mousemove")(mouseHandler($11));
  };
  exports["handler"] = handler;
  exports["onClick"] = onClick;
  exports["onContextMenu"] = onContextMenu;
  exports["onKeyDown"] = onKeyDown;
  exports["onKeyUp"] = onKeyUp;
  exports["onMouseDown"] = onMouseDown;
  exports["onMouseMove"] = onMouseMove;
})(PS["Halogen.HTML.Events"] = PS["Halogen.HTML.Events"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_Event_MouseEvent = PS["DOM.Event.MouseEvent"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Event_WheelEvent = PS["DOM.Event.WheelEvent"];
  var Data_Array = PS["Data.Array"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Hud_Type = PS["Game.Cubbit.Hud.Type"];
  var Game_Cubbit_Resources = PS["Game.Cubbit.Resources"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Halogen = PS["Halogen"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Ring = PS["Data.Ring"];
  var slotClass = function (active) {
      return Halogen_HTML_Properties.class_("slot" + (function () {
          if (active) {
              return " active";
          };
          if (!active) {
              return "";
          };
          throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 28, column 49 - line 28, column 81: " + [ active.constructor.name ]);
      })());
  };
  var send$prime = function (q) {
      return new Data_Maybe.Just(new Game_Cubbit_Hud_Type.Query(q, Data_Unit.unit));
  };
  var send = function (action) {
      return new Data_Maybe.Just(new Game_Cubbit_Hud_Type.Query(new Game_Cubbit_Hud_Type.PlayingSceneQuery(action), Data_Unit.unit));
  };
  var onWheel = function ($23) {
      return Halogen_HTML_Events.handler("wheel")(Unsafe_Coerce.unsafeCoerce($23));
  };                                            
  var icon = function (name) {
      return Halogen_HTML_Elements.i([ Halogen_HTML_Properties.class_("fa fa-" + name) ])([  ]);
  };
  var render = function (v) {
      var toggle = function (value) {
          return function (act) {
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-toggle " + (function () {
                  if (value) {
                      return "on";
                  };
                  if (!value) {
                      return "off";
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 188, column 56 - line 188, column 85: " + [ value.constructor.name ]);
              })()), Halogen_HTML_Events.onClick(function (e) {
                  return new Data_Maybe.Just(new Game_Cubbit_Hud_Type.Query(act, Data_Unit.unit));
              }) ])([ Halogen_HTML.text((function () {
                  if (value) {
                      return "On";
                  };
                  if (!value) {
                      return "Off";
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 190, column 21 - line 190, column 50: " + [ value.constructor.name ]);
              })()) ]);
          };
      };
      var suppressMouseMove = Halogen_HTML_Events.onMouseMove(function (e) {
          return send$prime(new Game_Cubbit_Hud_Type.Nop(DOM_Event_Types.mouseEventToEvent(e)));
      });
      var suppressMouseDown = Halogen_HTML_Events.onMouseDown(function (e) {
          return send$prime(new Game_Cubbit_Hud_Type.Nop(DOM_Event_Types.mouseEventToEvent(e)));
      });
      var slider = function (value) {
          return function (action) {
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-slider") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.range(0)(Game_Cubbit_Constants.sliderMaxValue))(function (i) {
                  return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-slider-box " + (function () {
                      var $7 = i <= value;
                      if ($7) {
                          return "fill";
                      };
                      if (!$7) {
                          return "empty";
                      };
                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 182, column 64 - line 182, column 102: " + [ $7.constructor.name ]);
                  })()), Halogen_HTML_Events.onClick(function (e) {
                      return new Data_Maybe.Just(new Game_Cubbit_Hud_Type.Query(action(i), Data_Unit.unit));
                  }) ])([  ]);
              }));
          };
      };
      var option = function (caption) {
          return function (ui) {
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-option") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-caption") ])([ Halogen_HTML.text(caption) ]), ui ]);
          };
      };
      var hotbuttons = function (playingSceneState) {
          var tool = function (v1) {
              if (v1 instanceof Game_Cubbit_Types.Move) {
                  return "toolicon/bow.svg";
              };
              if (v1 instanceof Game_Cubbit_Types.Put) {
                  if (Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(v1.value0)(Game_Cubbit_BlockType.grassBlock)) {
                      return "toolicon/grass.svg";
                  };
                  if (Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(v1.value0)(Game_Cubbit_BlockType.woodBlock)) {
                      return "toolicon/wood.svg";
                  };
                  if (Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(v1.value0)(Game_Cubbit_BlockType.waterBlock)) {
                      return "toolicon/water.svg";
                  };
                  if (Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(v1.value0)(Game_Cubbit_BlockType.leavesBlock)) {
                      return "toolicon/leaves.svg";
                  };
                  if (Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)(v1.value0)(Game_Cubbit_BlockType.dirtBlock)) {
                      return "toolicon/dirt.svg";
                  };
                  if (Data_Boolean.otherwise) {
                      return "toolicon/grass.svg";
                  };
              };
              if (v1 instanceof Game_Cubbit_Types.Remove) {
                  return "toolicon/pickaxe.svg";
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 214, column 17 - line 217, column 42: " + [ v1.constructor.name ]);
          };
          var slot = function (v1) {
              if (v1 instanceof Data_Maybe.Just) {
                  return Halogen_HTML_Elements.div([ slotClass(Data_Eq.eq(Game_Cubbit_Types.eqMode)(playingSceneState.mode)(v1.value0)), Halogen_HTML_Events.onClick(function (e) {
                      return send(new Game_Cubbit_Hud_Type.SetMode(v1.value0));
                  }) ])([ Halogen_HTML_Elements.img([ Halogen_HTML_Properties.src(tool(v1.value0)) ]) ]);
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Halogen_HTML_Elements.div([ slotClass(false) ])([  ]);
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 40, column 1 - line 218, column 56: " + [ v1.constructor.name ]);
          };
          return Data_Functor.map(Data_Functor.functorArray)(slot)([ new Data_Maybe.Just(Game_Cubbit_Types.Move.value), new Data_Maybe.Just(new Game_Cubbit_Types.Put(Game_Cubbit_BlockType.grassBlock)), new Data_Maybe.Just(new Game_Cubbit_Types.Put(Game_Cubbit_BlockType.woodBlock)), new Data_Maybe.Just(new Game_Cubbit_Types.Put(Game_Cubbit_BlockType.waterBlock)), new Data_Maybe.Just(new Game_Cubbit_Types.Put(Game_Cubbit_BlockType.leavesBlock)), new Data_Maybe.Just(new Game_Cubbit_Types.Put(Game_Cubbit_BlockType.dirtBlock)), Data_Maybe.Nothing.value, new Data_Maybe.Just(Game_Cubbit_Types.Remove.value) ]);
      };
      if (v.res instanceof Game_Cubbit_Types.Loading) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("content"), Halogen_HTML_Properties.key("root-content"), Halogen_HTML_Properties.class_("content-layer") ])([ Halogen_HTML_Elements.img([ Halogen_HTML_Properties.class_("content-layer"), Halogen_HTML_Properties.src("image/loading.png") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("progress") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Array.range(0)(Game_Cubbit_Resources.resourceCount))(function (i) {
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("cell" + (function () {
                  var $13 = i <= v.res.value0;
                  if ($13) {
                      return " fill";
                  };
                  if (!$13) {
                      return "";
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 48, column 51 - line 48, column 88: " + [ $13.constructor.name ]);
              })()) ])([  ]);
          })) ]);
      };
      if (v.res instanceof Game_Cubbit_Types.Complete) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("content"), Halogen_HTML_Properties.key("root-content"), Halogen_HTML_Properties.class_("content-layer"), Halogen_HTML_Events.onContextMenu(function (e) {
              return send$prime(new Game_Cubbit_Hud_Type.PreventDefault(DOM_Event_Types.mouseEventToEvent(e)));
          }), Halogen_HTML_Properties.tabIndex(0), Unsafe_Coerce.unsafeCoerce(Halogen_HTML_Properties.autofocus(true)), Halogen_HTML_Events.onKeyDown(function (e) {
              return send(new Game_Cubbit_Hud_Type.OnKeyDown(e));
          }), Halogen_HTML_Events.onKeyUp(function (e) {
              return send(new Game_Cubbit_Hud_Type.OnKeyUp(e));
          }), Halogen_HTML_Events.onMouseMove(function (e) {
              return send(new Game_Cubbit_Hud_Type.SetMousePosition(e));
          }), Halogen_HTML_Events.onMouseDown(function (e) {
              return send(new Game_Cubbit_Hud_Type.OnMouseClick(e));
          }), onWheel(function (e) {
              return send(new Game_Cubbit_Hud_Type.Zoom(e));
          }) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.key("content-inner") ])((function () {
              if (v.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                  return [ Halogen_HTML_Elements.img([ Halogen_HTML_Properties.class_("content-layer"), Halogen_HTML_Properties.src("image/title.png"), Halogen_HTML_Properties.key("image/title.png"), Halogen_HTML_Events.onClick(function (e) {
                      return send$prime(Game_Cubbit_Hud_Type.Start.value);
                  }) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("show-config"), Halogen_HTML_Events.onClick(function (e) {
                      return send$prime(Game_Cubbit_Hud_Type.ShowConfig.value);
                  }) ])([ icon("gear") ]) ];
              };
              if (v.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                  var index = Game_Cubbit_BlockIndex.runBlockIndex(v.sceneState.value0.cursorPosition);
                  return [ Halogen_HTML_Elements.img([ Halogen_HTML_Properties.key("image/screenshade.png"), Halogen_HTML_Properties.id_("screen-shade"), Halogen_HTML_Properties.class_("content-layer"), Halogen_HTML_Properties.src("image/screenshade.png") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("cursor-position") ])([ Halogen_HTML.text("cursor: (" + (Data_Show.show(Data_Show.showInt)(index.x) + (", " + (Data_Show.show(Data_Show.showInt)(index.y) + (", " + (Data_Show.show(Data_Show.showInt)(index.z) + ")")))))) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("life") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(v.sceneState.value0.life)(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("active") ])([ icon("heart") ])))(Data_Array.replicate(v.sceneState.value0.maxLife - v.sceneState.value0.life)(icon("heart")))), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.id_("message-box-top") ])([  ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.id_("message-box") ])([ Halogen_HTML.text("Cubbit\xd7Cubbit Playable Demo") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("right-panel"), suppressMouseMove, suppressMouseDown ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("button"), Halogen_HTML_Events.onClick(function (e) {
                      return send(Game_Cubbit_Hud_Type.TogglePointerLock.value);
                  }) ])([ icon("eye") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("button"), Halogen_HTML_Events.onClick(function (e) {
                      return send(new Game_Cubbit_Hud_Type.SetPosition({
                          x: 0.0, 
                          y: 30.0, 
                          z: 0.0
                      }));
                  }) ])([ icon("plane") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("button"), Halogen_HTML_Events.onClick(function (e) {
                      return send$prime(Game_Cubbit_Hud_Type.ShowConfig.value);
                  }) ])([ icon("gear") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("button"), Halogen_HTML_Events.onClick(function (e) {
                      return send(Game_Cubbit_Hud_Type.Home.value);
                  }) ])([ icon("home") ]) ]), (function () {
                      if (v.sceneState.value0.centerPanelVisible) {
                          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("center-panel-outer"), Halogen_HTML_Events.onClick(function (e) {
                              return send(new Game_Cubbit_Hud_Type.SetCenterPanelVisible(false));
                          }), suppressMouseMove, suppressMouseDown ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("center-panel") ])([  ]) ]);
                      };
                      if (!v.sceneState.value0.centerPanelVisible) {
                          return Halogen_HTML.text("");
                      };
                      throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 107, column 21 - line 114, column 37: " + [ v.sceneState.value0.centerPanelVisible.constructor.name ]);
                  })(), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("hotbar"), suppressMouseMove, suppressMouseDown ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("hotbar-lower") ])([  ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("hotbar-upper") ])(hotbuttons(v.sceneState.value0)) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("open-center-panel"), Halogen_HTML_Events.onClick(function (e) {
                      return send(new Game_Cubbit_Hud_Type.SetCenterPanelVisible(true));
                  }) ])([ icon("suitcase") ]) ];
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 64, column 50 - line 127, column 18: " + [ v.sceneState.constructor.name ]);
          })()), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("content-layer config-root" + (function () {
              if (v.configVisible) {
                  return " visible";
              };
              if (!v.configVisible) {
                  return "";
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 130, column 67 - line 130, column 113: " + [ v.configVisible.constructor.name ]);
          })()), Halogen_HTML_Events.onClick(function (e) {
              return send$prime(Game_Cubbit_Hud_Type.CloseConfig.value);
          }) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("config-inner"), Halogen_HTML_Events.onClick(function (e) {
              return send$prime(new Game_Cubbit_Hud_Type.Nop(DOM_Event_Types.mouseEventToEvent(e)));
          }) ])([ Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_("config-heading") ])([ icon("volume-up"), Halogen_HTML.text(" Sounds") ]), option("Mute")(toggle(v.config.mute)(Game_Cubbit_Hud_Type.ToggleMute.value)), option("BGM Volume")(slider(v.config.bgmVolume)(Game_Cubbit_Hud_Type.SetBGMVolume.create)), option("SE Volume")(slider(v.config.seVolume)(Game_Cubbit_Hud_Type.SetSEVolume.create)), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_("config-heading") ])([ icon("photo"), Halogen_HTML.text(" Graphics") ]), option("Shadow")(toggle(v.config.shadow)(Game_Cubbit_Hud_Type.ToggleShadow.value)), option("Shadow Area")(slider(v.config.shadowArea)(Game_Cubbit_Hud_Type.SetShadowArea.create)), option("Vertex Color")(toggle(v.config.vertexColor)(Game_Cubbit_Hud_Type.ToggleVertexColor.value)), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_("config-heading") ])([ icon("cubes"), Halogen_HTML.text(" Terrain") ]), option("Chunk Area")(slider(v.config.chunkArea)(Game_Cubbit_Hud_Type.SetChunkArea.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.target("_blank"), Halogen_HTML_Properties.href("LICENSE.txt"), Halogen_HTML_Events.onClick(function (e) {
              return send$prime(new Game_Cubbit_Hud_Type.StopPropagation(DOM_Event_Types.mouseEventToEvent(e)));
          }) ])([ Halogen_HTML.text("License Attribution") ]) ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("shadow"), Halogen_HTML_Properties.class_("content-layer" + (function () {
              var $20 = Data_Maybe.isNothing(v.nextScene);
              if ($20) {
                  return " hide";
              };
              if (!$20) {
                  return "";
              };
              throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 160, column 55 - line 160, column 104: " + [ $20.constructor.name ]);
          })()), Halogen_HTML_Properties.key("shadow") ])([  ]) ]);
      };
      throw new Error("Failed pattern match at Game.Cubbit.Hud.Render line 40, column 50 - line 163, column 10: " + [ v.res.constructor.name ]);
  };
  exports["render"] = render;
})(PS["Game.Cubbit.Hud.Render"] = PS["Game.Cubbit.Hud.Render"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var Root = (function () {
      function Root() {

      };
      Root.value = new Root();
      return Root;
  })();
  var Child = (function () {
      function Child() {

      };
      Child.value = new Child();
      return Child;
  })();
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var mkDriverStateXVar = Unsafe_Coerce.unsafeCoerce;
  var initDriverState = function (component) {
      return function (componentType) {
          return function (handler) {
              return function (keyId) {
                  return function (fresh) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
                          var ds = {
                              component: component, 
                              componentType: componentType, 
                              state: component.initialState, 
                              children: Data_Map.empty, 
                              mkOrdBox: component.mkOrdBox, 
                              selfRef: v, 
                              keyId: keyId, 
                              fresh: fresh, 
                              handler: handler, 
                              pendingIn: Data_Functor.voidLeft(Data_Maybe.functorMaybe)(component.initializer)(Data_List_Types.Nil.value), 
                              pendingOut: Data_Functor.voidLeft(Data_Maybe.functorMaybe)(component.initializer)(Data_List_Types.Nil.value), 
                              rendering: Data_Maybe.Nothing.value
                          };
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v)(ds))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(mkDriverStateXVar(v));
                          });
                      });
                  };
              };
          };
      };
  };
  exports["Root"] = Root;
  exports["Child"] = Child;
  exports["initDriverState"] = initDriverState;
  exports["unDriverStateX"] = unDriverStateX;
})(PS["Halogen.Aff.Driver.State"] = PS["Halogen.Aff.Driver.State"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Unsafe = PS["Control.Monad.Aff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Fork = PS["Control.Monad.Fork"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Either = PS["Data.Either"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Halogen_Query_ChildQuery = PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];        
  var peekVar = function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(v))(function (v1) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(v)(v1))(function () {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
          });
      });
  };
  var handleLifecycle = function (f) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef({
          initializers: Data_List_Types.Nil.value, 
          finalizers: Data_List_Types.Nil.value
      })))(function (v) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(f(v))(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v)))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(v2.finalizers))(function () {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Foldable.sequence_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(v2.initializers))(function () {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                      });
                  });
              });
          });
      });
  };
  var handleAff = function ($138) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($138));
  };
  var runUI = function (renderSpec) {
      return function (component) {
          var subscribe = function (fresh) {
              return function (ref) {
                  return function (consumer) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                              var v1 = Control_Monad_Eff_Ref.readRef(fresh)();
                              Control_Monad_Eff_Ref.modifyRef(fresh)(function (v2) {
                                  return v2 + 1 | 0;
                              })();
                              Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map.insert(Data_Ord.ordInt)(v1)(v))();
                              return v1;
                          }))(function (v1) {
                              var producer = Control_Coroutine.producer(Control_Monad_Aff.monadAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Left.create)(Control_Monad_Aff_AVar.takeVar(v)));
                              return Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.connect(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(producer)(consumer)))(function () {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map["delete"](Data_Ord.ordInt)(v1))))(function () {
                                      return Control_Monad_Aff_AVar.killVar(v)(Control_Monad_Eff_Exception.error("ended"));
                                  });
                              })));
                          });
                      });
                  };
              };
          };
          var rootHandler = function (ref) {
              return function (message) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                      return Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAll(Data_Map.foldableMap)(Data_Functor.map(Data_Map.functorMap)(function ($$var) {
                          return Control_Monad_Aff_AVar.putVar($$var)(message);
                      })(v)));
                  });
              };
          };
          var queuingHandler = function ($$var) {
              return function (handler) {
                  return function (message) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar($$var))(function (v) {
                          if (v.pendingIn instanceof Data_Maybe.Nothing) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar($$var)(v))(function () {
                                  return handler(message);
                              });
                          };
                          if (v.pendingIn instanceof Data_Maybe.Just) {
                              return Control_Monad_Aff_AVar.putVar($$var)((function () {
                                  var $51 = {};
                                  for (var $52 in v) {
                                      if (v.hasOwnProperty($52)) {
                                          $51[$52] = v[$52];
                                      };
                                  };
                                  $51.pendingIn = new Data_Maybe.Just(new Data_List_Types.Cons(handler(message), v.pendingIn.value0));
                                  return $51;
                              })());
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver line 269, column 5 - line 274, column 82: " + [ v.pendingIn.constructor.name ]);
                      });
                  };
              };
          };
          var handlePending = function (ref) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)((function () {
                      var $57 = {};
                      for (var $58 in v) {
                          if (v.hasOwnProperty($58)) {
                              $57[$58] = v[$58];
                          };
                      };
                      $57.pendingIn = Data_Maybe.Nothing.value;
                      return $57;
                  })()))(function () {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(v.pendingIn)(function ($139) {
                          return Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(Data_List.reverse($139));
                      }))(function () {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)((function () {
                                  var $61 = {};
                                  for (var $62 in v1) {
                                      if (v1.hasOwnProperty($62)) {
                                          $61[$62] = v1[$62];
                                      };
                                  };
                                  $61.pendingOut = Data_Maybe.Nothing.value;
                                  return $61;
                              })()))(function () {
                                  return Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(v1.pendingOut)(function ($140) {
                                      return Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(v1.handler)(Data_List.reverse($140)));
                                  });
                              });
                          });
                      });
                  });
              });
          };
          var squashChildInitializers = function (ref) {
              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                  var parentInitializer = Data_Functor.map(Data_Maybe.functorMaybe)(evalF(st.selfRef))(st.component.initializer);
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(function (lchs) {
                      return {
                          initializers: Control_Applicative.pure(Data_List_Types.applicativeList)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Parallel.parSequence_(Control_Monad_Aff.parallelParAff)(Data_List_Types.traversableList)(Data_List.reverse(lchs.initializers)))(function () {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Foldable.sequence_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(parentInitializer))(function () {
                                  return handlePending(st.selfRef);
                              });
                          })), 
                          finalizers: lchs.finalizers
                      };
                  }));
              });
          };
          var runComponent = function (handler) {
              return function (fresh) {
                  return function (lchs) {
                      return function (componentType) {
                          return Halogen_Component.unComponent(function (c) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(fresh)))(function (v) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(fresh)(function (v1) {
                                      return v1 + 1 | 0;
                                  })))(function () {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Aff_Driver_State.initDriverState(c)(componentType)(handler)(v)(fresh))(function (v1) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(Halogen_Aff_Driver_State.unDriverStateX(function ($141) {
                                              return render(lchs)((function (v2) {
                                                  return v2.selfRef;
                                              })($141));
                                          }))(peekVar(v1)))(function () {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(squashChildInitializers(lchs))(peekVar(v1)))(function () {
                                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
          var renderChild = function (handler) {
              return function (fresh) {
                  return function (mkOrdBox) {
                      return function (childrenInRef) {
                          return function (childrenOutRef) {
                              return function (lchs) {
                                  return Halogen_Component.unComponentSlot(function (p) {
                                      return function (ctor) {
                                          return function (k) {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(childrenInRef)))(function (v) {
                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                                                      var $70 = Data_Map.pop(Halogen_Data_OrdBox.ordOrdBox)(mkOrdBox(p))(v);
                                                      if ($70 instanceof Data_Maybe.Just) {
                                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(childrenInRef)($70.value0.value1)))(function () {
                                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)($70.value0.value0);
                                                          });
                                                      };
                                                      if ($70 instanceof Data_Maybe.Nothing) {
                                                          return runComponent(function ($142) {
                                                              return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(handler)(k($142));
                                                          })(fresh)(lchs)(Halogen_Aff_Driver_State.Child.value)(Data_Lazy.force(ctor));
                                                      };
                                                      throw new Error("Failed pattern match at Halogen.Aff.Driver line 289, column 14 - line 294, column 87: " + [ $70.constructor.name ]);
                                                  })())(function (v1) {
                                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(childrenOutRef)(Data_Map.insert(Halogen_Data_OrdBox.ordOrdBox)(mkOrdBox(p))(v1))))(function () {
                                                          return Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                              return renderSpec.renderChild(st.keyId)(st.rendering);
                                                          }))(peekVar(v1));
                                                      });
                                                  });
                                              });
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
          };
          var render = function (lchs) {
              return function ($$var) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar($$var))(function (v) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(Data_Map.empty)))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(v.children)))(function (v2) {
                              var selfEval = evalF(v.selfRef);
                              var handler = function ($143) {
                                  return Data_Functor["void"](Control_Monad_Aff.functorAff)(selfEval($143));
                              };
                              var handler$prime = Data_Maybe.maybe(handler)(function (v3) {
                                  return queuingHandler(v.selfRef)(handler);
                              })(v.pendingIn);
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(renderSpec.render(function ($144) {
                                  return handleAff(selfEval($144));
                              })(renderChild(handler$prime)(v.fresh)(v.mkOrdBox)(v2)(v1)(lchs))(v.component.render(v.state))(v.componentType)(v.rendering))(function (v3) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1)))(function (v4) {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v2)))(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_Map.foldableMap)(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(addFinalizer(lchs))(peekVar))))(function () {
                                          return Control_Monad_Aff_AVar.putVar($$var)({
                                              rendering: new Data_Maybe.Just(v3), 
                                              componentType: v.componentType, 
                                              component: v.component, 
                                              state: v.state, 
                                              children: v4, 
                                              mkOrdBox: v.mkOrdBox, 
                                              selfRef: v.selfRef, 
                                              handler: v.handler, 
                                              pendingIn: v.pendingIn, 
                                              pendingOut: v.pendingOut, 
                                              keyId: v.keyId, 
                                              fresh: v.fresh
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
          var evalM = function (ref) {
              return function (v) {
                  return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)($$eval(ref))(v);
              };
          };
          var evalF = function (ref) {
              return function (q) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar(ref))(function (v) {
                      var $84 = v.component["eval"](q);
                      return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)($$eval(ref))($84);
                  });
              };
          };
          var evalChildQuery = function (ref) {
              return Halogen_Query_ChildQuery.unChildQuery(function (p) {
                  return function (k) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar(ref))(function (v) {
                          var $86 = Data_Map.lookup(Halogen_Data_OrdBox.ordOrdBox)(v.mkOrdBox(p))(v.children);
                          if ($86 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar($86.value0))(function (v1) {
                                  return k(Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                      return evalF(ds.selfRef);
                                  })(v1));
                              });
                          };
                          if ($86 instanceof Data_Maybe.Nothing) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error("Slot lookup failed for child query"));
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver line 199, column 5 - line 203, column 73: " + [ $86.constructor.name ]);
                      });
                  };
              });
          };
          var $$eval = function (ref) {
              return function (v) {
                  if (v instanceof Halogen_Query_HalogenM.GetState) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar(ref))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value0(v1.state));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.ModifyState) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v1) {
                          var $94 = v.value0(v1.state);
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)((function () {
                              var $95 = {};
                              for (var $96 in v1) {
                                  if (v1.hasOwnProperty($96)) {
                                      $95[$96] = v1[$96];
                                  };
                              };
                              $95.state = $94.value1;
                              return $95;
                          })()))(function () {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(handleLifecycle(function (lchs) {
                                  return render(lchs)(ref);
                              }))(function () {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)($94.value0);
                              });
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Subscribe) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Query_EventSource.unEventSource(v.value0))(function (v1) {
                          var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Bind.bindFlipped(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(function ($145) {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(evalF(ref)($145));
                          })(Control_Coroutine["await"](Control_Monad_Aff.monadAff)))(function (v2) {
                              return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Data_Eq.eq(Halogen_Query_EventSource.eqSubscribeStatus)(v2)(Halogen_Query_EventSource.Listening.value))(consumer);
                          });
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.pullFrom(Control_Monad_Aff.monadRecAff)(consumer)(v1.producer)))(function () {
                              return v1.done;
                          });
                      })))(function () {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Lift) {
                      return v.value0;
                  };
                  if (v instanceof Halogen_Query_HalogenM.Halt) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error(v.value0));
                  };
                  if (v instanceof Halogen_Query_HalogenM.GetSlots) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar(ref))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value0(Data_Functor.map(Data_List_Types.functorList)(Halogen_Data_OrdBox.unOrdBox)(Data_Map.keys(v1.children))));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.CheckSlot) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(peekVar(ref))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1(Data_Map.member(Halogen_Data_OrdBox.ordOrdBox)(v1.mkOrdBox(v.value0))(v1.children)));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.ChildQuery) {
                      return evalChildQuery(ref)(v.value0);
                  };
                  if (v instanceof Halogen_Query_HalogenM.Raise) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ref))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                              if (v1.pendingOut instanceof Data_Maybe.Nothing) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.putVar(ref)(v1))(function () {
                                      return v1.handler(v.value0);
                                  });
                              };
                              if (v1.pendingOut instanceof Data_Maybe.Just) {
                                  return Control_Monad_Aff_AVar.putVar(ref)((function () {
                                      var $121 = {};
                                      for (var $122 in v1) {
                                          if (v1.hasOwnProperty($122)) {
                                              $121[$122] = v1[$122];
                                          };
                                      };
                                      $121.pendingOut = new Data_Maybe.Just(new Data_List_Types.Cons(v.value0, v1.pendingOut.value0));
                                      return $121;
                                  })());
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver line 179, column 7 - line 184, column 71: " + [ v1.pendingOut.constructor.name ]);
                          })())(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Par) {
                      return Control_Parallel_Class.sequential(Control_Monad_Aff.parallelParAff)(Control_Applicative_Free.retractFreeAp(Control_Monad_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp(function ($146) {
                          return Control_Parallel_Class.parallel(Control_Monad_Aff.parallelParAff)(evalM(ref)($146));
                      })(v.value0)));
                  };
                  if (v instanceof Halogen_Query_HalogenM.Fork) {
                      return Halogen_Query_ForkF.unFork(function (v1) {
                          return Data_Functor.map(Control_Monad_Aff.functorAff)(function ($147) {
                              return v1.value1(Data_Functor.map(Data_Functor.functorFn)(Control_Monad_Aff_Unsafe.unsafeCoerceAff)($147));
                          })(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalM(ref)(v1.value0)));
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Halogen.Aff.Driver line 144, column 14 - line 190, column 61: " + [ v.constructor.name ]);
              };
          };
          var addFinalizer = function (ref) {
              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(evalF(st.selfRef))(st.component.finalizer))(function (f) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(function (lchs) {
                          return {
                              initializers: lchs.initializers, 
                              finalizers: new Data_List_Types.Cons(f, lchs.finalizers)
                          };
                      }));
                  }))(function () {
                      return Data_Foldable.for_(Control_Monad_Aff.applicativeAff)(Data_Map.foldableMap)(st.children)(Control_Bind.composeKleisliFlipped(Control_Monad_Aff.bindAff)(addFinalizer(ref))(peekVar));
                  });
              });
          };
          var addInitializer = function (ref) {
              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                  var $134 = Data_Functor.map(Data_Maybe.functorMaybe)(evalF(st.selfRef))(st.component.initializer);
                  if ($134 instanceof Data_Maybe.Just) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(function (lchs) {
                          return {
                              initializers: new Data_List_Types.Cons(handlePending(st.selfRef), new Data_List_Types.Cons($134.value0, lchs.initializers)), 
                              finalizers: lchs.finalizers
                          };
                      }));
                  };
                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
              });
          };
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(0)))(function (v) {
              return handleLifecycle(function (lchs) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(Data_Map.empty)))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(runComponent(rootHandler(v1))(v)(lchs)(Halogen_Aff_Driver_State.Root.value)(component))(peekVar))(Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                              query: evalF(st.selfRef), 
                              subscribe: subscribe(v)(v1)
                          });
                      }));
                  });
              });
          });
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.Aff.Driver"] = PS["Halogen.Aff.Driver"] || {});
(function(exports) {
  /* global exports, require */
  "use strict";
  var vcreateElement =require("virtual-dom/create-element");
  var vdiff =require("virtual-dom/diff");
  var vpatch =require("virtual-dom/patch");
  var VText =require("virtual-dom/vnode/vtext");
  var VirtualNode =require("virtual-dom/vnode/vnode");
  var SoftSetHook =require("virtual-dom/virtual-hyperscript/hooks/soft-set-hook"); 

  // jshint maxparams: 2
  exports.prop = function (key, value) {
    var props = {};
    props[key] = value;
    return props;
  };

  // jshint maxparams: 2
  exports.attr = function (key, value) {
    var props = { attributes: {} };
    props.attributes[key] = value;
    return props;
  };

  function HandlerHook(key, f) {
    this.key = key;
    this.callback = function (e) {
      f(e)();
    };
  }

  HandlerHook.prototype = {
    hook: function (node) {
      node.addEventListener(this.key, this.callback);
    },
    unhook: function (node) {
      node.removeEventListener(this.key, this.callback);
    }
  };

  // jshint maxparams: 2
  exports.handlerProp = function (key, f) {
    var props = {};
    props["halogen-hook-" + key] = new HandlerHook(key, f);
    return props;
  };

  exports.refPropImpl = function (nothing) {
    return function (just) {

      var ifHookFn = function (init) {
        // jshint maxparams: 3
        return function (node, prop, diff) {
          // jshint validthis: true
          if (typeof diff === "undefined") {
            this.f(init ? just(node) : nothing)();
          }
        };
      };

      // jshint maxparams: 1
      function RefHook(f) {
        this.f = f;
      }

      RefHook.prototype = {
        hook: ifHookFn(true),
        unhook: ifHookFn(false)
      };

      return function (f) {
        return { "halogen-ref": new RefHook(f) };
      };
    };
  };

  // jshint maxparams: 2
  exports.concatProps = function () {
    var hOP = Object.prototype.hasOwnProperty;
    var copy = function (props, result) {
      for (var key in props) {
        if (hOP.call(props, key)) {
          if (key === "attributes") {
            var attrs = props[key];
            var resultAttrs = result[key] || (result[key] = {});
            for (var attr in attrs) {
              if (hOP.call(attrs, attr)) {
                resultAttrs[attr] = attrs[attr];
              }
            }
          } else {
            result[key] = props[key];
          }
        }
      }
      return result;
    };
    return function (p1, p2) {
      return copy(p2, copy(p1, {}));
    };
  }();
  // jshint maxparams: 1

  exports.emptyProps = {};

  exports.createElement = function (vtree) {
    return function () {
      return vcreateElement(vtree);
    };
  };

  exports.diff = function (vtree1) {
    return function (vtree2) {
      return vdiff(vtree1, vtree2);
    };
  };

  exports.patch = function (p) {
    return function (node) {
      return function () {
        return vpatch(node, p);
      };
    };
  };

  exports.vtext = function (s) {
    return new VText(s);
  };

  exports.vnode = function (namespace) {
    return function (name) {
      return function (key) {
        return function (props) {
          return function (children) {
            if (name === "input" && props.value !== undefined) {
              props.value = new SoftSetHook(props.value);
            }
            return new VirtualNode(name, props, children, key, namespace);
          };
        };
      };
    };
  };

  // jshint maxparams: 2
  function HalogenWidget(key, el) {
    this.key = key;
    this.el = el;
  }
  // jshint maxparams: 1

  HalogenWidget.prototype = {
    type: "Widget",
    init: function () {
      return this.el;
    },
    update: function () {
      return this.el;
    }
  };

  exports.widget = function (key) {
    return function (el) {
      return new HalogenWidget(key, el);
    };
  };
})(PS["Halogen.VirtualDOM.Internal"] = PS["Halogen.VirtualDOM.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Halogen.VirtualDOM.Internal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var semigroupProps = new Data_Semigroup.Semigroup(Data_Function_Uncurried.runFn2($foreign.concatProps));
  var refProp = $foreign.refPropImpl(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var monoidProps = new Data_Monoid.Monoid(function () {
      return semigroupProps;
  }, $foreign.emptyProps);
  exports["refProp"] = refProp;
  exports["semigroupProps"] = semigroupProps;
  exports["monoidProps"] = monoidProps;
  exports["attr"] = $foreign.attr;
  exports["createElement"] = $foreign.createElement;
  exports["diff"] = $foreign.diff;
  exports["handlerProp"] = $foreign.handlerProp;
  exports["patch"] = $foreign.patch;
  exports["prop"] = $foreign.prop;
  exports["vnode"] = $foreign.vnode;
  exports["vtext"] = $foreign.vtext;
  exports["widget"] = $foreign.widget;
})(PS["Halogen.VirtualDOM.Internal"] = PS["Halogen.VirtualDOM.Internal"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_VirtualDOM_Internal = PS["Halogen.VirtualDOM.Internal"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var renderPropF = function (v) {
      return Halogen_VirtualDOM_Internal.prop(Data_Newtype.unwrap(Halogen_HTML_Core.newtypePropName)(v.value0), v.value1);
  };
  var renderProp = function (driver) {
      return function (v) {
          if (v instanceof Halogen_HTML_Core.Prop) {
              return Data_Exists.runExists(renderPropF)(v.value0);
          };
          if (v instanceof Halogen_HTML_Core.Attr) {
              var attrName = Data_Maybe.maybe("")(function (ns$prime) {
                  return Data_Newtype.unwrap(Halogen_HTML_Core.newtypeNamespace)(ns$prime) + ":";
              })(v.value0) + Data_Newtype.unwrap(Halogen_HTML_Core.newtypeAttrName)(v.value1);
              return Halogen_VirtualDOM_Internal.attr(attrName, v.value2);
          };
          if (v instanceof Halogen_HTML_Core.Handler) {
              return Halogen_VirtualDOM_Internal.handlerProp(Data_Newtype.unwrap(DOM_Event_Types.newtypeEventType)(v.value0), function ($31) {
                  return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(driver)(v.value1($31));
              });
          };
          if (v instanceof Halogen_HTML_Core.Ref) {
              return Halogen_VirtualDOM_Internal.refProp(function ($32) {
                  return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(driver)(v.value0($32));
              });
          };
          return Data_Monoid.mempty(Halogen_VirtualDOM_Internal.monoidProps);
      };
  };
  var findKey = function (v) {
      return function (v1) {
          if (v1 instanceof Halogen_HTML_Core.Key) {
              return new Data_Maybe.Just(v1.value0);
          };
          return v;
      };
  };
  var renderHTML = function (dictMonad) {
      return function (driver) {
          return function (handleSlot) {
              var go = function (__copy_v) {
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Halogen_HTML_Core.Text) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Halogen_VirtualDOM_Internal.vtext(v.value0));
                      };
                      if (v instanceof Halogen_HTML_Core.Element) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(go)(v.value3))(function (v1) {
                              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Halogen_VirtualDOM_Internal.vnode(Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeNamespace))(v.value0)))(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeTagName)(v.value1))(Data_Nullable.toNullable(Data_Foldable.foldl(Data_Foldable.foldableArray)(findKey)(Data_Maybe.Nothing.value)(v.value2)))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Halogen_VirtualDOM_Internal.monoidProps)(renderProp(driver))(v.value2))(v1));
                          });
                      };
                      if (v instanceof Halogen_HTML_Core.Slot) {
                          return handleSlot(v.value0);
                      };
                      if (v instanceof Halogen_HTML_Core.Fuse) {
                          var __tco_v = Halogen_HTML_Core.lowerFuse(v.value0);
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Halogen.VirtualDOM.Renderer line 32, column 8 - line 45, column 24: " + [ v.constructor.name ]);
                  };
              };
              return go;
          };
      };
  };
  exports["renderHTML"] = renderHTML;
})(PS["Halogen.VirtualDOM.Renderer"] = PS["Halogen.VirtualDOM.Renderer"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var Halogen_Aff_Driver = PS["Halogen.Aff.Driver"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_VirtualDOM_Internal = PS["Halogen.VirtualDOM.Internal"];
  var Halogen_VirtualDOM_Renderer = PS["Halogen.VirtualDOM.Renderer"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var renderSpec = function (element) {
      var renderChild = function (keyId) {
          return function (lastRender) {
              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                  var v = (function () {
                      if (lastRender instanceof Data_Maybe.Nothing) {
                          return Halogen_VirtualDOM_Internal.createElement(Halogen_VirtualDOM_Internal.vtext(""));
                      };
                      if (lastRender instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(lastRender.value0.node);
                      };
                      throw new Error("Failed pattern match at Halogen.VirtualDOM.Driver line 76, column 15 - line 78, column 30: " + [ lastRender.constructor.name ]);
                  })()();
                  return {
                      vtree: Halogen_VirtualDOM_Internal.widget(keyId)(v), 
                      node: v
                  };
              });
          };
      };
      var render = function (handler) {
          return function (child) {
              return function (html) {
                  return function (componentType) {
                      return function (lastRender) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_VirtualDOM_Renderer.renderHTML(Control_Monad_Aff.monadAff)(handler)(function ($13) {
                              return Data_Functor.map(Control_Monad_Aff.functorAff)(function (v) {
                                  return v.vtree;
                              })(child($13));
                          })(html))(function (v) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)((function () {
                                  if (lastRender instanceof Data_Maybe.Nothing) {
                                      return function __do() {
                                          var v1 = Halogen_VirtualDOM_Internal.createElement(v)();
                                          DOM_Node_Node.appendChild(DOM_HTML_Types.htmlElementToNode(v1))(DOM_HTML_Types.htmlElementToNode(element))();
                                          return v1;
                                      };
                                  };
                                  if (lastRender instanceof Data_Maybe.Just) {
                                      return Halogen_VirtualDOM_Internal.patch(Halogen_VirtualDOM_Internal.diff(lastRender.value0.vtree)(v))(lastRender.value0.node);
                                  };
                                  throw new Error("Failed pattern match at Halogen.VirtualDOM.Driver line 61, column 21 - line 67, column 46: " + [ lastRender.constructor.name ]);
                              })()))(function (v1) {
                                  return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                                      vtree: v, 
                                      node: v1
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
      return {
          render: render, 
          renderChild: renderChild
      };
  };
  var runUI = function (component) {
      return function (element) {
          return Halogen_Aff_Driver.runUI(renderSpec(element))(component);
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.VirtualDOM.Driver"] = PS["Halogen.VirtualDOM.Driver"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Hud_Eval = PS["Game.Cubbit.Hud.Eval"];
  var Game_Cubbit_Hud_Render = PS["Game.Cubbit.Hud.Render"];
  var Game_Cubbit_Hud_Type = PS["Game.Cubbit.Hud.Type"];
  var Game_Cubbit_Materials = PS["Game.Cubbit.Materials"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_Sounds = PS["Game.Cubbit.Sounds"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Halogen = PS["Halogen"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_VirtualDOM_Driver = PS["Halogen.VirtualDOM.Driver"];
  var Prelude = PS["Prelude"];
  var Halogen_Component = PS["Halogen.Component"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];        
  var ui = function (initialState) {
      return function (ref) {
          return function (mute) {
              return Halogen_Component.component({
                  render: Game_Cubbit_Hud_Render.render, 
                  "eval": Game_Cubbit_Hud_Eval["eval"](ref), 
                  initialState: initialState
              });
          };
      };
  };
  var queryToHud = function (driver) {
      return function (query) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.logShow(Control_Monad_Eff_Exception.showError))(function (v) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          })(driver.query(query(Data_Unit.unit))));
      };
  };
  var initializeHud = function (v) {
      return function (ref) {
          return function (body) {
              return Halogen_VirtualDOM_Driver.runUI(ui(v)(ref)(v.config.mute))(body);
          };
      };
  };
  exports["initializeHud"] = initializeHud;
  exports["queryToHud"] = queryToHud;
})(PS["Game.Cubbit.Hud.Driver"] = PS["Game.Cubbit.Hud.Driver"] || {});
(function(exports) {
    "use strict";

  /* global document */

  exports.foreachBlocks = function(size){
      return function(cx){
          return function(cy){
              return function(cz){
                  return function(currentIndex){
                      return function(f){
                          return function(){
                              var cost = 0;
                              var limit = 100;

                              //console.log(JSON.stringify(index));

                              var index = currentIndex;
                              if( ! index){
                                  index = { size: size, cx: cx, cy: cy, cz: cz, i: 0, n: 0, m: 0 };
                              }else if(index.size !== size || index.cx !== cx || index.cy !== cy || index.cz !== cz){
                                  index.size = size;
                                  index.cx = cx;
                                  index.cy = cy;
                                  index.cz = cz;
                                  index.i = 0;
                                  index.n = -index.i;
                                  index.m = -index.i;
                              }

                              if(size <= index.i){
                                  index.i = 0;
                                  index.n = -index.i;
                                  index.m = -index.i;
                                  return index;
                              }else if(index.i < index.n){
                                  index.i += 1;
                                  index.n = -index.i;
                                  index.m = -index.i;
                                  return index;
                              }else if(index.i < index.m){
                                  index.n += 1;
                                  index.m = -index.i;
                                  return index;
                              }else{
                                  var i = index.i;
                                  var n = index.n;
                                  var m = index.m;

                                  cost += f(cx + i)(cy + n)(cz +  m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx - i)(cy + n)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + i)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy - i)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + m)(cz + i)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + m)(cz - i)() + 1;
                                  if(limit < cost ) return index;

                                  index.m += 1;
                                  return index;
                              }



                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Game.Cubbit.Update"] = PS["Game.Cubbit.Update"] || {});
(function(exports) {
  /* global BABYLON */

  "use strict";

  exports.createRayWithLength = function(origin){
      return function(direction){
          return function(length){
              return function(){
                  return new BABYLON.Ray(origin, direction, length);
              };
          };
      };
  };
})(PS["Graphics.Babylon.Ray"] = PS["Graphics.Babylon.Ray"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Ray"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createRayWithLength"] = $foreign.createRayWithLength;
})(PS["Graphics.Babylon.Ray"] = PS["Graphics.Babylon.Ray"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Game.Cubbit.Update"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Set = PS["Data.Set"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_ChunkMap = PS["Game.Cubbit.ChunkMap"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Control = PS["Game.Cubbit.Control"];
  var Game_Cubbit_Hud_Driver = PS["Game.Cubbit.Hud.Driver"];
  var Game_Cubbit_Hud_Type = PS["Game.Cubbit.Hud.Type"];
  var Game_Cubbit_Materials = PS["Game.Cubbit.Materials"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_Sounds = PS["Game.Cubbit.Sounds"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Ray = PS["Graphics.Babylon.Ray"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_ShadowGenerator = PS["Graphics.Babylon.ShadowGenerator"];
  var Graphics_Babylon_Sound = PS["Graphics.Babylon.Sound"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Halogen = PS["Halogen"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ring = PS["Data.Ring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var updateBabylon = function (deltaTime) {
      return function (scene) {
          return function (materials) {
              return function (sounds) {
                  return function (shadowMap) {
                      return function (cursor) {
                          return function (camera) {
                              return function (v) {
                                  return function (skybox) {
                                      return function (driver) {
                                          return function (v1) {
                                              return function __do() {
                                                  var playerMeshes = (function () {
                                                      if (v1.res instanceof Game_Cubbit_Types.Loading) {
                                                          return [  ];
                                                      };
                                                      if (v1.res instanceof Game_Cubbit_Types.Complete) {
                                                          return v1.res.value0.playerMeshes;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 313, column 28 - line 315, column 49: " + [ v1.res.constructor.name ]);
                                                  })();
                                                  var cameraPositionChunkIndex = Game_Cubbit_Terrain.globalPositionToChunkIndex(v1.cameraPosition.x)(v1.cameraPosition.y)(v1.cameraPosition.z);
                                                  var v3 = Graphics_Babylon_Vector3.createVector3(v1.cameraPosition.x)(v1.cameraPosition.y)(v1.cameraPosition.z)();
                                                  var v4 = Graphics_Babylon_Vector3.createVector3(v1.cameraTarget.x)(v1.cameraTarget.y)(v1.cameraTarget.z)();
                                                  var v5 = Game_Cubbit_Terrain.lookupBlockByVec(v1.cameraPosition)(v1.terrain)();
                                                  var v6 = (function () {
                                                      if (v5 instanceof Data_Maybe.Just && Game_Cubbit_Terrain.isSolidBlock(v5.value0)) {
                                                          return function __do() {
                                                              var v6 = Graphics_Babylon_Vector3.subtract(v4)(v3)();
                                                              var v7 = Graphics_Babylon_Vector3.length(v6)();
                                                              var v8 = Graphics_Babylon_Ray.createRayWithLength(v3)(v6)(v7)();
                                                              var predicate = function (mesh) {
                                                                  var name = Graphics_Babylon_Node.getName(Graphics_Babylon_AbstractMesh.abstractMeshToNode(mesh));
                                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(name === "terrain");
                                                              };
                                                              var v9 = Graphics_Babylon_Scene.pickWithRay(v8)(predicate)(true)(scene)();
                                                              var pickedPoint = Graphics_Babylon_PickingInfo.getPickedPoint(v9);
                                                              var $52 = Graphics_Babylon_PickingInfo.getPickedPoint(v9);
                                                              if ($52 instanceof Data_Maybe.Nothing) {
                                                                  return v3;
                                                              };
                                                              if ($52 instanceof Data_Maybe.Just) {
                                                                  return $52.value0;
                                                              };
                                                              throw new Error("Failed pattern match at Game.Cubbit.Update line 339, column 22 - line 341, column 44: " + [ $52.constructor.name ]);
                                                          };
                                                      };
                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(v3);
                                                  })()();
                                                  Graphics_Babylon_Camera.setPosition(v6)(Graphics_Babylon_TargetCamera.targetCameraToCamera(camera))();
                                                  Graphics_Babylon_TargetCamera.setTarget(v4)(camera)();
                                                  var v7 = Graphics_Babylon_Vector3.createVector3(0.0)(v1.skyboxRotation)(0.0)();
                                                  Graphics_Babylon_AbstractMesh.setRotation(v7)(Graphics_Babylon_Mesh.meshToAbstractMesh(skybox))();
                                                  var v8 = (function () {
                                                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                                      var loadAndGenerateChunk = function (index) {
                                                          return Game_Cubbit_MeshBuilder.generateChunk(v1)(materials)(scene)(index)(v)(v1.config);
                                                      };
                                                      var loadDistance = 3 + v1.config.chunkArea | 0;
                                                      return function __do() {
                                                          var v8 = $foreign.foreachBlocks(loadDistance)(ci.x)(ci.y)(ci.z)(v1.updateIndex)(function (x) {
                                                              return function (y) {
                                                                  return function (z) {
                                                                      var index = Game_Cubbit_ChunkIndex.chunkIndex(x)(y)(z);
                                                                      return function __do() {
                                                                          var v8 = Game_Cubbit_Terrain.lookupChunk(index)(v1.terrain)();
                                                                          if (v8 instanceof Data_Maybe.Just) {
                                                                              if (v8.value0.standardMaterialMesh instanceof Game_Cubbit_Chunk.MeshNotLoaded) {
                                                                                  loadAndGenerateChunk(index)();
                                                                                  return 100;
                                                                              };
                                                                              return 1;
                                                                          };
                                                                          if (v8 instanceof Data_Maybe.Nothing) {
                                                                              loadAndGenerateChunk(index)();
                                                                              return 100;
                                                                          };
                                                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 364, column 17 - line 375, column 13: " + [ v8.constructor.name ]);
                                                                      };
                                                                  };
                                                              };
                                                          })();
                                                          var $62 = {};
                                                          for (var $63 in v1) {
                                                              if (v1.hasOwnProperty($63)) {
                                                                  $62[$63] = v1[$63];
                                                              };
                                                          };
                                                          $62.updateIndex = Data_Nullable.toNullable(new Data_Maybe.Just(v8));
                                                          return $62;
                                                      };
                                                  })()();
                                                  (function () {
                                                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                                      return function __do() {
                                                          var v9 = Game_Cubbit_ChunkMap.size(v1.terrain.map)();
                                                          return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v.maximumLoadedChunks < v9)(function __do() {
                                                              var v10 = Game_Cubbit_ChunkMap.getSortedChunks(ci.x)(ci.y)(ci.z)(v1.terrain.map)();
                                                              var sliced = Data_Array.drop(v.maximumLoadedChunks)(v10);
                                                              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(Data_Array.take(v.chunkUnloadSpeed)(sliced))(function (chunkWithMesh) {
                                                                  return function __do() {
                                                                      Game_Cubbit_Chunk.disposeChunk(chunkWithMesh)();
                                                                      return Game_Cubbit_ChunkMap["delete"](chunkWithMesh.index)(v1.terrain.map)();
                                                                  };
                                                              })();
                                                          })();
                                                      };
                                                  })()();
                                                  (function () {
                                                      if (v1.config.shadow) {
                                                          var shadowDisplayRange = 1 + v1.config.shadowArea | 0;
                                                          var cci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                                          return function __do() {
                                                              var v9 = Game_Cubbit_ChunkMap.filterNeighbors(shadowDisplayRange)(cci.x)(cci.y)(cci.z)(v1.terrain.map)();
                                                              var meshes = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(function (chunk) {
                                                                  if (chunk.standardMaterialMesh instanceof Game_Cubbit_Chunk.MeshLoaded) {
                                                                      return new Data_Maybe.Just(Graphics_Babylon_Mesh.meshToAbstractMesh(chunk.standardMaterialMesh.value0));
                                                                  };
                                                                  return Data_Maybe.Nothing.value;
                                                              })(v9));
                                                              return Graphics_Babylon_ShadowGenerator.setRenderList(Data_Semigroup.append(Data_Semigroup.semigroupArray)(meshes)(playerMeshes))(shadowMap)();
                                                          };
                                                      };
                                                      if (!v1.config.shadow) {
                                                          return Graphics_Babylon_ShadowGenerator.setRenderList([  ])(shadowMap);
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 397, column 9 - line 408, column 43: " + [ v1.config.shadow.constructor.name ]);
                                                  })()();
                                                  return v8;
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var epsiron = 0.1;
  var calcurateNextState = function (v) {
      return function (deltaTime) {
          return function (v1) {
              return function (playingSceneState) {
                  return Control_Monad_Eff.runPure((function () {
                      var rot = -(function () {
                          if (playingSceneState.firstPersonView) {
                              return playingSceneState.playerRotation + $$Math.pi;
                          };
                          if (!playingSceneState.firstPersonView) {
                              return playingSceneState.cameraYaw;
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.Update line 56, column 23 - line 56, column 138: " + [ playingSceneState.firstPersonView.constructor.name ]);
                      })();
                      var keyStep = function (key) {
                          var $78 = Data_Set.member(Data_Ord.ordString)(key)(v1.keys);
                          if ($78) {
                              return 1.0;
                          };
                          if (!$78) {
                              return 0.0;
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.Update line 58, column 23 - line 60, column 5: " + [ $78.constructor.name ]);
                      };
                      var keyVector = {
                          x: keyStep("d") - keyStep("a"), 
                          z: keyStep("w") - keyStep("s")
                      };
                      var rotatedKeyVector = {
                          x: $$Math.cos(rot) * keyVector.x - $$Math.sin(rot) * keyVector.z, 
                          z: $$Math.sin(rot) * keyVector.x + $$Math.cos(rot) * keyVector.z
                      };
                      var stopped = rotatedKeyVector.x === 0.0 && rotatedKeyVector.z === 0.0;
                      return function __do() {
                          var v2 = Game_Cubbit_Terrain.lookupBlockByVec({
                              x: playingSceneState.position.x, 
                              y: playingSceneState.position.y - epsiron, 
                              z: playingSceneState.position.z
                          })(v1.terrain)();
                          var isLanding = (function () {
                              if (v2 instanceof Data_Maybe.Just && Game_Cubbit_Terrain.isSolidBlock(v2.value0)) {
                                  return true;
                              };
                              return false;
                          })();
                          var jumpVelocity = (function () {
                              var $82 = isLanding && (Data_Set.member(Data_Ord.ordString)(" ")(v1.keys) && playingSceneState.landing === 0);
                              if ($82) {
                                  return v.jumpVelocity;
                              };
                              if (!$82) {
                                  return 0.0;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 79, column 24 - line 81, column 5: " + [ $82.constructor.name ]);
                          })();
                          var moveFactor = (function () {
                              if (isLanding) {
                                  return 1.0;
                              };
                              if (!isLanding) {
                                  return 0.2;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 83, column 22 - line 86, column 5: " + [ isLanding.constructor.name ]);
                          })();
                          var gravityAccelerator = (function () {
                              if (isLanding) {
                                  return 0.0;
                              };
                              if (!isLanding) {
                                  return v.gravity * deltaTime;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 86, column 30 - line 86, column 84: " + [ isLanding.constructor.name ]);
                          })();
                          var moveVectorLength = $$Math.sqrt(rotatedKeyVector.x * rotatedKeyVector.x + rotatedKeyVector.z * rotatedKeyVector.z);
                          var velocity = (function () {
                              var $85 = 0.0 < moveVectorLength && playingSceneState.landing === 0;
                              if ($85) {
                                  return {
                                      x: (rotatedKeyVector.x / moveVectorLength) * v.moveSpeed, 
                                      y: playingSceneState.velocity.y + jumpVelocity, 
                                      z: (rotatedKeyVector.z / moveVectorLength) * v.moveSpeed
                                  };
                              };
                              if (!$85) {
                                  return {
                                      x: 0.0, 
                                      y: playingSceneState.velocity.y + jumpVelocity, 
                                      z: 0.0
                                  };
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 90, column 20 - line 100, column 14: " + [ $85.constructor.name ]);
                          })();
                          var playerRotation$prime = (function () {
                              if (isLanding) {
                                  var $87 = 0 < playingSceneState.landing;
                                  if ($87) {
                                      return playingSceneState.playerRotation;
                                  };
                                  if (!$87) {
                                      var $88 = stopped || playingSceneState.firstPersonView;
                                      if ($88) {
                                          return playingSceneState.playerRotation;
                                      };
                                      if (!$88) {
                                          return $$Math.atan2(velocity.x)(velocity.z) - $$Math.pi;
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 106, column 22 - line 108, column 60: " + [ $88.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 104, column 19 - line 108, column 60: " + [ $87.constructor.name ]);
                              };
                              if (!isLanding) {
                                  return playingSceneState.playerRotation;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 103, column 27 - line 109, column 52: " + [ isLanding.constructor.name ]);
                          })();
                          var playerPosition = {
                              x: playingSceneState.position.x + velocity.x * deltaTime, 
                              y: playingSceneState.position.y + velocity.y * deltaTime, 
                              z: playingSceneState.position.z + velocity.z * deltaTime
                          };
                          var animation$prime = (function () {
                              var $89 = 0 < playingSceneState.landing;
                              if ($89) {
                                  return "land";
                              };
                              if (!$89) {
                                  if (isLanding) {
                                      var $91 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (k) {
                                          return Data_Set.member(Data_Ord.ordString)(k)(v1.keys);
                                      })([ "w", "s", "a", "d" ]);
                                      if ($91) {
                                          return "run";
                                      };
                                      if (!$91) {
                                          return "idle";
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 122, column 23 - line 122, column 101: " + [ $91.constructor.name ]);
                                  };
                                  if (!isLanding) {
                                      return "jump";
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 121, column 18 - line 125, column 5: " + [ isLanding.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 119, column 22 - line 125, column 5: " + [ $89.constructor.name ]);
                          })();
                          var globalIndex = Game_Cubbit_BlockIndex.runBlockIndex(Game_Cubbit_Terrain.globalPositionToGlobalIndex(playerPosition.x)(playerPosition.y)(playerPosition.z));
                          var v3 = Game_Cubbit_Terrain.lookupBlockByVec(playerPosition)(v1.terrain)();
                          var v4 = Game_Cubbit_Terrain.lookupBlockByVec({
                              x: playingSceneState.position.x, 
                              y: playingSceneState.position.y - 1.0e-2, 
                              z: playingSceneState.position.z
                          })(v1.terrain)();
                          var isLanding$prime = (function () {
                              if (v4 instanceof Data_Maybe.Just && Game_Cubbit_Terrain.isSolidBlock(v4.value0)) {
                                  return true;
                              };
                              return false;
                          })();
                          var landingCount = (function () {
                              var $96 = isLanding$prime && playingSceneState.velocity.y < v.landingVelocityLimit;
                              if ($96) {
                                  return v.landingDuration;
                              };
                              if (!$96) {
                                  return playingSceneState.landing;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 136, column 24 - line 138, column 43: " + [ $96.constructor.name ]);
                          })();
                          var cameraSpeed = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return 0.5;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return v.cameraTargetSpeed;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 141, column 23 - line 141, column 99: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var thirdPersonCameraTargetX = playingSceneState.position.x + velocity.x * 2.0;
                          var thirdPersonCameraTargetY = playingSceneState.position.y + v.eyeHeight;
                          var thirdPersonCameraTargetZ = playingSceneState.position.z + velocity.z * 2.0;
                          var playerRotationTheta = -playingSceneState.playerRotation - $$Math.pi * 0.5;
                          var firstPersonCameraTargetX = playingSceneState.position.x + $$Math.cos(playerRotationTheta) * $$Math.cos(playingSceneState.playerPitch);
                          var firstPersonCameraTargetY = playingSceneState.position.y + v.eyeHeight + $$Math.sin(playingSceneState.playerPitch);
                          var firstPersonCameraTargetZ = playingSceneState.position.z + $$Math.sin(playerRotationTheta) * $$Math.cos(playingSceneState.playerPitch);
                          var cameraTargetX$prime = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return firstPersonCameraTargetX;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraTargetX;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 156, column 26 - line 156, column 122: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraTargetY$prime = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return firstPersonCameraTargetY;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraTargetY;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 157, column 26 - line 157, column 122: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraTargetZ$prime = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return firstPersonCameraTargetZ;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraTargetZ;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 158, column 26 - line 158, column 122: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraTargetInterpolatedX$prime = v1.cameraTarget.x + (cameraTargetX$prime - v1.cameraTarget.x) * cameraSpeed;
                          var cameraTargetInterpolatedY$prime = v1.cameraTarget.y + (cameraTargetY$prime - v1.cameraTarget.y) * cameraSpeed;
                          var cameraTargetInterpolatedZ$prime = v1.cameraTarget.z + (cameraTargetZ$prime - v1.cameraTarget.z) * cameraSpeed;
                          var cameraTarget$prime = {
                              x: cameraTargetInterpolatedX$prime, 
                              y: cameraTargetInterpolatedY$prime, 
                              z: cameraTargetInterpolatedZ$prime
                          };
                          var cameraPositionChunkIndex = Game_Cubbit_Terrain.globalPositionToChunkIndex(v1.cameraPosition.x)(v1.cameraPosition.y)(v1.cameraPosition.z);
                          var theta = -playingSceneState.cameraYaw - $$Math.pi * 0.5;
                          var thirdPersonCameraPositionX = playingSceneState.position.x + $$Math.cos(theta) * $$Math.cos(playingSceneState.cameraPitch) * playingSceneState.cameraRange + velocity.x * 2.0;
                          var thirdPersonCameraPositionY = playingSceneState.position.y + v.eyeHeight + $$Math.sin(playingSceneState.cameraPitch) * playingSceneState.cameraRange;
                          var thirdPersonCameraPositionZ = playingSceneState.position.z + $$Math.sin(theta) * $$Math.cos(playingSceneState.cameraPitch) * playingSceneState.cameraRange + velocity.z * 2.0;
                          var firstPersonCameraPositionY = playingSceneState.position.y + v.eyeHeight;
                          var cameraPositionX = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return playingSceneState.position.x;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraPositionX;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 180, column 27 - line 180, column 127: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraPositionY = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return firstPersonCameraPositionY;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraPositionY;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 181, column 27 - line 181, column 127: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraPositionZ = (function () {
                              if (playingSceneState.firstPersonView) {
                                  return playingSceneState.position.z;
                              };
                              if (!playingSceneState.firstPersonView) {
                                  return thirdPersonCameraPositionZ;
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 182, column 27 - line 182, column 127: " + [ playingSceneState.firstPersonView.constructor.name ]);
                          })();
                          var cameraPositionInterpolatedX = v1.cameraPosition.x + (cameraPositionX - v1.cameraPosition.x) * cameraSpeed;
                          var cameraPositionInterpolatedY = v1.cameraPosition.y + (cameraPositionY - v1.cameraPosition.y) * cameraSpeed;
                          var cameraPositionInterpolatedZ = v1.cameraPosition.z + (cameraPositionZ - v1.cameraPosition.z) * cameraSpeed;
                          var sceneState = (function () {
                              var $110 = {};
                              for (var $111 in playingSceneState) {
                                  if (playingSceneState.hasOwnProperty($111)) {
                                      $110[$111] = playingSceneState[$111];
                                  };
                              };
                              $110.cameraYaw = playingSceneState.cameraYaw + ((function () {
                                  var $104 = Data_Set.member(Data_Ord.ordString)("q")(v1.keys);
                                  if ($104) {
                                      return 1.0;
                                  };
                                  if (!$104) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 192, column 61 - line 192, column 103: " + [ $104.constructor.name ]);
                              })() - (function () {
                                  var $105 = Data_Set.member(Data_Ord.ordString)("e")(v1.keys);
                                  if ($105) {
                                      return 1.0;
                                  };
                                  if (!$105) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 192, column 108 - line 192, column 150: " + [ $105.constructor.name ]);
                              })()) * v.cameraRotationSpeed;
                              $110.cameraPitch = Data_Ord.max(Data_Ord.ordNumber)(0.1)(Data_Ord.min(Data_Ord.ordNumber)($$Math.pi * 0.48)(playingSceneState.cameraPitch + ((function () {
                                  var $106 = Data_Set.member(Data_Ord.ordString)("r")(v1.keys);
                                  if ($106) {
                                      return 1.0;
                                  };
                                  if (!$106) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 193, column 91 - line 193, column 133: " + [ $106.constructor.name ]);
                              })() - (function () {
                                  var $107 = Data_Set.member(Data_Ord.ordString)("f")(v1.keys);
                                  if ($107) {
                                      return 1.0;
                                  };
                                  if (!$107) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 193, column 138 - line 193, column 180: " + [ $107.constructor.name ]);
                              })()) * v.cameraRotationSpeed));
                              $110.cameraRange = Data_Ord.max(Data_Ord.ordNumber)(v.cameraMinimumRange)(Data_Ord.min(Data_Ord.ordNumber)(v.cameraMaximumRange)(playingSceneState.cameraRange + ((function () {
                                  var $108 = Data_Set.member(Data_Ord.ordString)("g")(v1.keys);
                                  if ($108) {
                                      return 1.0;
                                  };
                                  if (!$108) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 194, column 129 - line 194, column 171: " + [ $108.constructor.name ]);
                              })() - (function () {
                                  var $109 = Data_Set.member(Data_Ord.ordString)("t")(v1.keys);
                                  if ($109) {
                                      return 1.0;
                                  };
                                  if (!$109) {
                                      return 0.0;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 194, column 176 - line 194, column 218: " + [ $109.constructor.name ]);
                              })()) * v.cameraZoomSpeed));
                              $110.velocity = velocity;
                              $110.playerRotation = playerRotation$prime;
                              $110.animation = animation$prime;
                              $110.landing = Data_Ord.max(Data_Ord.ordInt)(0)(landingCount - 1);
                              return $110;
                          })();
                          var state$prime = (function () {
                              var $113 = {};
                              for (var $114 in v1) {
                                  if (v1.hasOwnProperty($114)) {
                                      $113[$114] = v1[$114];
                                  };
                              };
                              $113.sceneState = new Game_Cubbit_Types.PlayingSceneState(sceneState);
                              $113.cameraTarget = cameraTarget$prime;
                              $113.cameraPosition = {
                                  x: cameraPositionInterpolatedX, 
                                  y: cameraPositionInterpolatedY, 
                                  z: cameraPositionInterpolatedZ
                              };
                              $113.totalFrames = v1.totalFrames + 1 | 0;
                              $113.skyboxRotation = v1.skyboxRotation + v.skyboxRotationSpeed * deltaTime;
                              return $113;
                          })();
                          return new Data_Tuple.Tuple(state$prime, sceneState);
                      };
                  })());
              };
          };
      };
  };
  var update = function (deltaTime) {
      return function (scene) {
          return function (sounds) {
              return function (cursor) {
                  return function (options) {
                      return function (driver) {
                          return function (v) {
                              var playerMeshes = (function () {
                                  if (v.res instanceof Game_Cubbit_Types.Loading) {
                                      return [  ];
                                  };
                                  if (v.res instanceof Game_Cubbit_Types.Complete) {
                                      return v.res.value0.playerMeshes;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 231, column 28 - line 233, column 49: " + [ v.res.constructor.name ]);
                              })();
                              if (v.sceneState instanceof Game_Cubbit_Types.TitleSceneState) {
                                  var state$prime = (function () {
                                      var $131 = {};
                                      for (var $132 in v) {
                                          if (v.hasOwnProperty($132)) {
                                              $131[$132] = v[$132];
                                          };
                                      };
                                      $131.cameraPosition = {
                                          x: 5.0 - v.sceneState.value0.position, 
                                          y: 20.0, 
                                          z: -10.0 + v.sceneState.value0.position
                                      };
                                      $131.cameraTarget = {
                                          x: 0.5 - v.sceneState.value0.position, 
                                          y: 11.0, 
                                          z: v.sceneState.value0.position
                                      };
                                      $131.sceneState = new Game_Cubbit_Types.TitleSceneState((function () {
                                          var $128 = {};
                                          for (var $129 in v.sceneState.value0) {
                                              if (v.sceneState.value0.hasOwnProperty($129)) {
                                                  $128[$129] = v.sceneState.value0[$129];
                                              };
                                          };
                                          $128.position = v.sceneState.value0.position + deltaTime * 8.0e-4;
                                          return $128;
                                      })());
                                      return $131;
                                  })();
                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(state$prime);
                              };
                              if (v.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                                  return function __do() {
                                      var v1 = calcurateNextState(options)(deltaTime)(v)(v.sceneState.value0);
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v1.value1.animation !== v.sceneState.value0.animation)(Game_Cubbit_Control.playAnimation(v1.value1.animation)(playerMeshes))();
                                      var v2 = Graphics_Babylon_Vector3.createVector3(0.0)(v1.value1.playerRotation)(0.0)();
                                      var v3 = Graphics_Babylon_Vector3.createVector3(v1.value1.position.x)(v1.value1.position.y)(v1.value1.position.z)();
                                      Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(playerMeshes)(function (mesh) {
                                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                              Graphics_Babylon_AbstractMesh.setPosition(v3)(mesh)();
                                              Graphics_Babylon_AbstractMesh.setRotation(v2)(mesh)();
                                              return Graphics_Babylon_AbstractMesh.setVisibility((function () {
                                                  if (v.sceneState.value0.firstPersonView) {
                                                      return 0.0;
                                                  };
                                                  if (!v.sceneState.value0.firstPersonView) {
                                                      return 1.0;
                                                  };
                                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 259, column 36 - line 259, column 90: " + [ v.sceneState.value0.firstPersonView.constructor.name ]);
                                              })())(mesh)();
                                          });
                                      })();
                                      (function () {
                                          if (v1.value1.mode instanceof Game_Cubbit_Types.Move) {
                                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                          };
                                          return function __do() {
                                              var v4 = Game_Cubbit_Control.pickBlock(scene)(cursor)(v1.value1.mode)(v.terrain)(v.mousePosition.x)(v.mousePosition.y)();
                                              if (v4 instanceof Data_Maybe.Nothing) {
                                                  return Data_Unit.unit;
                                              };
                                              if (v4 instanceof Data_Maybe.Just) {
                                                  return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                                      var rbi = Game_Cubbit_BlockIndex.runBlockIndex(v4.value0);
                                                      return function __do() {
                                                          var v5 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                                          Graphics_Babylon_Mesh.setPosition(v5)(cursor)();
                                                          return Game_Cubbit_Hud_Driver.queryToHud(driver)(Game_Cubbit_Hud_Type.Query.create(new Game_Cubbit_Hud_Type.PlayingSceneQuery(new Game_Cubbit_Hud_Type.SetCursorPosition(v4.value0))))();
                                                      };
                                                  })())();
                                              };
                                              throw new Error("Failed pattern match at Game.Cubbit.Update line 269, column 29 - line 275, column 105: " + [ v4.constructor.name ]);
                                          };
                                      })()();
                                      Graphics_Babylon_AbstractMesh.setIsVisible((function () {
                                          if (v1.value1.mode instanceof Game_Cubbit_Types.Put) {
                                              return true;
                                          };
                                          if (v1.value1.mode instanceof Game_Cubbit_Types.Remove) {
                                              return true;
                                          };
                                          if (v1.value1.mode instanceof Game_Cubbit_Types.Move) {
                                              return false;
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 279, column 35 - line 282, column 38: " + [ v1.value1.mode.constructor.name ]);
                                      })())(Graphics_Babylon_Mesh.meshToAbstractMesh(cursor))();
                                      (function () {
                                          var $146 = v.sceneState.value0.animation !== "run" && v1.value1.animation === "run";
                                          if ($146) {
                                              return Graphics_Babylon_Sound.play(sounds.stepSound);
                                          };
                                          if (!$146) {
                                              var $147 = v.sceneState.value0.animation === "run" && v1.value1.animation !== "run";
                                              if ($147) {
                                                  return Graphics_Babylon_Sound.stop(sounds.stepSound);
                                              };
                                              if (!$147) {
                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                              };
                                              throw new Error("Failed pattern match at Game.Cubbit.Update line 288, column 30 - line 290, column 43: " + [ $147.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 286, column 21 - line 290, column 43: " + [ $146.constructor.name ]);
                                      })()();
                                      return v1.value0;
                                  };
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Update line 235, column 9 - line 292, column 36: " + [ v.sceneState.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["update"] = update;
  exports["updateBabylon"] = updateBabylon;
})(PS["Game.Cubbit.Update"] = PS["Game.Cubbit.Update"] || {});
(function(exports) {
  /* global window */
  /* global document */

  "use strict";

  exports.querySelectorCanvas = function(selector){
      return function(){
          return document.querySelector(selector);
      };
  };
})(PS["Graphics.Babylon.Util"] = PS["Graphics.Babylon.Util"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var $foreign = PS["Graphics.Babylon.Util"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Nullable = PS["Data.Nullable"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Prelude = PS["Prelude"];
  exports["querySelectorCanvas"] = $foreign.querySelectorCanvas;
})(PS["Graphics.Babylon.Util"] = PS["Graphics.Babylon.Util"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Foreign = PS["Data.Foreign"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var Halogen_Effects = PS["Halogen.Effects"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var selectElement = function (query) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(function ($8) {
          return DOM_Node_ParentNode.querySelector(query)(DOM_HTML_Types.htmlDocumentToParentNode($8));
      })(DOM_HTML_Window.document))(DOM_HTML.window))))(function (v) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(DOM_HTML_Types.readHTMLElement(Data_Foreign.toForeign(v.value0))));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Util line 54, column 8 - line 56, column 88: " + [ v.constructor.name ]);
          })());
      });
  };
  var runHalogenAff = function ($9) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($9));
  };
  var awaitLoad = Control_Monad_Aff.makeAff(function (v) {
      return function (callback) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(function __do() {
              var $10 = DOM_HTML.window();
              return DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.load)(DOM_Event_EventTarget.eventListener(function (v1) {
                  return callback(Data_Unit.unit);
              }))(false)(DOM_HTML_Types.windowToEventTarget($10))();
          });
      };
  });
  var awaitBody = Control_Bind.bind(Control_Monad_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bindFlipped(Control_Monad_Aff.bindAff)(Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error("Could not find body")))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)))(selectElement("body"));
  });
  exports["awaitBody"] = awaitBody;
  exports["awaitLoad"] = awaitLoad;
  exports["runHalogenAff"] = runHalogenAff;
  exports["selectElement"] = selectElement;
})(PS["Halogen.Aff.Util"] = PS["Halogen.Aff.Util"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Collesion = PS["Game.Cubbit.Collesion"];
  var Game_Cubbit_Config = PS["Game.Cubbit.Config"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Event = PS["Game.Cubbit.Event"];
  var Game_Cubbit_Hud_Driver = PS["Game.Cubbit.Hud.Driver"];
  var Game_Cubbit_Hud_Eval = PS["Game.Cubbit.Hud.Eval"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Option = PS["Game.Cubbit.Option"];
  var Game_Cubbit_Resources = PS["Game.Cubbit.Resources"];
  var Game_Cubbit_Sounds = PS["Game.Cubbit.Sounds"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Game_Cubbit_Update = PS["Game.Cubbit.Update"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_Sound = PS["Graphics.Babylon.Sound"];
  var Graphics_Babylon_Util = PS["Graphics.Babylon.Util"];
  var Graphics_Cannon = PS["Graphics.Cannon"];
  var Graphics_Cannon_Type = PS["Graphics.Cannon.Type"];
  var Graphics_Cannon_World = PS["Graphics.Cannon.World"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Aff_Util = PS["Halogen.Aff.Util"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Graphics_Cannon_Vec3 = PS["Graphics.Cannon.Vec3"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var main = function __do() {
      var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Graphics_Babylon_Util.querySelectorCanvas("#renderCanvas"))();
      if (v instanceof Data_Maybe.Nothing) {
          return Control_Monad_Eff_Console.error("canvas not found")();
      };
      if (v instanceof Data_Maybe.Just) {
          return Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Game_Cubbit_Config.readConfig))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Graphics_Cannon_World.createWorld))(function (v3) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Game_Cubbit_Terrain.createTerrain(0)))(function (v4) {
                          var initialState = {
                              config: v2, 
                              res: new Game_Cubbit_Types.Loading(0), 
                              configVisible: false, 
                              sceneState: new Game_Cubbit_Types.TitleSceneState({
                                  position: 0.0
                              }), 
                              nextScene: Data_Maybe.Nothing.value, 
                              skyboxRotation: 0.0, 
                              terrain: v4, 
                              updateIndex: Data_Nullable.toNullable(Data_Maybe.Nothing.value), 
                              world: v3, 
                              cameraPosition: {
                                  x: 10.0, 
                                  y: 20.0, 
                                  z: -10.0
                              }, 
                              cameraTarget: {
                                  x: 0.5, 
                                  y: 11.0, 
                                  z: 0.5
                              }, 
                              mousePosition: {
                                  x: 0, 
                                  y: 0
                              }, 
                              debugLayer: false, 
                              minimap: false, 
                              totalFrames: 0, 
                              keys: Data_Set.empty
                          };
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(initialState)))(function (v5) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Hud_Driver.initializeHud(initialState)(v5)(v1))(function (v6) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(0)))(function (v7) {
                                      var inc = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(v7)(function (v8) {
                                          return v8 + 1 | 0;
                                      })))(function () {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v7)))(function (v8) {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log(Data_Show.show(Data_Show.showInt)(v8) + (" / " + Data_Show.show(Data_Show.showInt)(Game_Cubbit_Resources.resourceCount)))))(function () {
                                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v5)))(function (v9) {
                                                      return Game_Cubbit_Hud_Eval.repaint(v6)((function () {
                                                          var $35 = {};
                                                          for (var $36 in v9) {
                                                              if (v9.hasOwnProperty($36)) {
                                                                  $35[$36] = v9[$36];
                                                              };
                                                          };
                                                          $35.res = new Game_Cubbit_Types.Loading(v8);
                                                          return $35;
                                                      })());
                                                  });
                                              });
                                          });
                                      });
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Resources.loadResources(v.value0)(inc))(function (v8) {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Game_Cubbit_Hud_Eval.repaint(v6)((function () {
                                              var $39 = {};
                                              for (var $40 in initialState) {
                                                  if (initialState.hasOwnProperty($40)) {
                                                      $39[$40] = initialState[$40];
                                                  };
                                              };
                                              $39.res = new Game_Cubbit_Types.Complete(v8);
                                              return $39;
                                          })()))(function () {
                                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v8.options))(function (v9) {
                                                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                                      Control_Monad_Eff.forE(-v9.initialWorldSize)(v9.initialWorldSize)(function (x) {
                                                          return Control_Monad_Eff.forE(-v9.initialWorldSize)(v9.initialWorldSize)(function (z) {
                                                              return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                                                  var index = Game_Cubbit_ChunkIndex.chunkIndex(x)(0)(z);
                                                                  return function __do() {
                                                                      var v10 = Control_Monad_Eff_Ref.readRef(v5)();
                                                                      return Game_Cubbit_MeshBuilder.generateChunk(v10)(v8.materials)(v8.scene)(index)(v9)(v2)();
                                                                  };
                                                              })());
                                                          });
                                                      })();
                                                      var v10 = Graphics_Cannon_Vec3.createVec3(0.0)(v9.gravity)(0.0)();
                                                      Graphics_Cannon_World.setGravity(v10)(v3)();
                                                      var v11 = Game_Cubbit_Collesion.createPlayerCollesion();
                                                      Graphics_Cannon_World.addBody(v11)(v3)();
                                                      var v12 = Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecEff)(function (ter) {
                                                          return function (v12) {
                                                              if (v12 === 0) {
                                                                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done(ter));
                                                              };
                                                              return function __do() {
                                                                  var v13 = Game_Cubbit_Collesion.buildCollesionTerrain(ter)(v3)(Game_Cubbit_ChunkIndex.chunkIndex(0)(0)(0))();
                                                                  return new Control_Monad_Rec_Class.Loop({
                                                                      a: v13, 
                                                                      b: v12 - 1
                                                                  });
                                                              };
                                                          };
                                                      })(initialState.terrain)(9)();
                                                      Control_Monad_Eff_Ref.modifyRef(v5)(function (v13) {
                                                          var $50 = {};
                                                          for (var $51 in v13) {
                                                              if (v13.hasOwnProperty($51)) {
                                                                  $50[$51] = v13[$51];
                                                              };
                                                          };
                                                          $50.terrain = v12;
                                                          return $50;
                                                      })();
                                                      Game_Cubbit_Event.focus("content")();
                                                      Game_Cubbit_Sounds.setMute(v2.mute)(v8.sounds)();
                                                      Game_Cubbit_Sounds.setBGMVolume(Data_Int.toNumber(v2.bgmVolume) / Data_Int.toNumber(Game_Cubbit_Constants.sliderMaxValue))(v8.sounds)();
                                                      Game_Cubbit_Sounds.setSEVolume(Data_Int.toNumber(v2.seVolume) / Data_Int.toNumber(Game_Cubbit_Constants.sliderMaxValue))(v8.sounds)();
                                                      Graphics_Babylon_Sound.play(v8.sounds.cleaning)();
                                                      var v13 = DOM_HTML.window();
                                                      DOM_Event_EventTarget.addEventListener("resize")(DOM_Event_EventTarget.eventListener(function (e) {
                                                          return Graphics_Babylon_Engine.resize(v8.engine);
                                                      }))(false)(DOM_HTML_Types.windowToEventTarget(v13))();
                                                      return Graphics_Babylon_Engine.runRenderLoop(function __do() {
                                                          var v14 = Graphics_Babylon_Engine.getDeltaTime(v8.engine)();
                                                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v5))(Game_Cubbit_Update.update(v14)(v8.scene)(v8.sounds)(v8.cursor)(v9)(v6)))(Game_Cubbit_Update.updateBabylon(v14)(v8.scene)(v8.materials)(v8.sounds)(v8.shadowMap)(v8.cursor)(v8.targetCamera)(v9)(v8.skybox)(v6)))(Game_Cubbit_Collesion.updatePhysics(v14)(v11)(v3)))(Control_Monad_Eff_Ref.writeRef(v5))();
                                                          (function __do() {
                                                              var v15 = Control_Monad_Eff_Ref.readRef(v5)();
                                                              if (v15.sceneState instanceof Game_Cubbit_Types.PlayingSceneState) {
                                                                  var index = Game_Cubbit_Terrain.globalPositionToChunkIndex(v15.sceneState.value0.position.x)(v15.sceneState.value0.position.y)(v15.sceneState.value0.position.z);
                                                                  var v16 = Game_Cubbit_Collesion.buildCollesionTerrain(v15.terrain)(v3)(index)();
                                                                  return Control_Monad_Eff_Ref.modifyRef(v5)(function (v17) {
                                                                      var $59 = {};
                                                                      for (var $60 in v17) {
                                                                          if (v17.hasOwnProperty($60)) {
                                                                              $59[$60] = v17[$60];
                                                                          };
                                                                      };
                                                                      $59.terrain = v16;
                                                                      return $59;
                                                                  })();
                                                              };
                                                              return Data_Unit.unit;
                                                          })();
                                                          return Graphics_Babylon_Scene.render(v8.scene)();
                                                      })(v8.engine)();
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          }))();
      };
      throw new Error("Failed pattern match at Game.Cubbit.Main line 54, column 62 - line 180, column 24: " + [ v.constructor.name ]);
  };
  exports["main"] = main;
})(PS["Game.Cubbit.Main"] = PS["Game.Cubbit.Main"] || {});
(function(exports) {
  // Generated by psc version 0.10.3
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Main = PS["Game.Cubbit.Main"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];        
  var main = Game_Cubbit_Main.main;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();

}).call(this,require('_process'))
},{"_process":2,"virtual-dom/create-element":6,"virtual-dom/diff":7,"virtual-dom/patch":8,"virtual-dom/virtual-hyperscript/hooks/soft-set-hook":15,"virtual-dom/vnode/vnode":23,"virtual-dom/vnode/vtext":25}],4:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":1}],5:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],6:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":10}],7:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":27}],8:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":13}],9:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":18,"is-object":5}],10:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":16,"../vnode/is-vnode.js":19,"../vnode/is-vtext.js":20,"../vnode/is-widget.js":21,"./apply-properties":9,"global/document":4}],11:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],12:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = renderOptions.render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = renderOptions.render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = renderOptions.render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":21,"../vnode/vpatch.js":24,"./apply-properties":9,"./update-widget":14}],13:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var render = require("./create-element")
var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches, renderOptions) {
    renderOptions = renderOptions || {}
    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch
        ? renderOptions.patch
        : patchRecursive
    renderOptions.render = renderOptions.render || render

    return renderOptions.patch(rootNode, patches, renderOptions)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions.document && ownerDocument !== document) {
        renderOptions.document = ownerDocument
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./create-element":10,"./dom-index":11,"./patch-op":12,"global/document":4,"x-is-array":28}],14:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":21}],15:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],16:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":17,"./is-vnode":19,"./is-vtext":20,"./is-widget":21}],17:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],18:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],19:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":22}],20:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":22}],21:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],22:[function(require,module,exports){
module.exports = "2"

},{}],23:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":17,"./is-vhook":18,"./is-vnode":19,"./is-widget":21,"./version":22}],24:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":22}],25:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":22}],26:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":18,"is-object":5}],27:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free      // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":16,"../vnode/is-thunk":17,"../vnode/is-vnode":19,"../vnode/is-vtext":20,"../vnode/is-widget":21,"../vnode/vpatch":24,"./diff-props":26,"x-is-array":28}],28:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}]},{},[3]);
