// Generated by psc-bundle 0.10.2
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._throwError = function (nonCanceler, e) {
    return function (success, error) {
      error(e);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      try {
        return aff(function (v) {
          try {
            var v2 = f(v);
          } catch (err) {
            error(err);
          }
          success(v2);
        }, error);
      } catch (err) {
        error(err);
      }
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._attempt = function (Left, Right, aff) {
    return function (success) {
      try {
        return aff(function (v) {
          success(Right(v));
        }, function (e) {
          success(Left(e));
        });
      } catch (err) {
        success(Left(err));
      }
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    return function () {
      return aff(function (v) {
        successT(v)();
      }, function (e) {
        errorT(e)();
      });
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $23 = compare(dictOrd)(a1)(a2);
              if ($23 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($33) {
                  return x;
              };
              if (!$33) {
                  return Data_Ring.negate(dictRing)(x);
              };
              throw new Error("Failed pattern match at Data.Ord line 158, column 9 - line 158, column 42: " + [ $33.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["abs"] = abs;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($32) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($32)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)))(p);
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["any"] = any;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 3 - line 35, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 224, column 1 - line 224, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 42, column 3 - line 42, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 78, column 3 - line 78, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];                                           
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Unit = PS["Data.Unit"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });  
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadAff;
  }, function (aff) {
      return function (ex) {
          return Control_Bind.bind(bindAff)(attempt(aff))(Data_Either.either(ex)(Control_Applicative.pure(applicativeAff)));
      };
  }, function (e) {
      return $foreign._throwError(nonCanceler, e);
  });
  exports["attempt"] = attempt;
  exports["makeAff"] = makeAff;
  exports["makeAff'"] = makeAff$prime;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadErrorAff"] = monadErrorAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function ($88) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($88));
              })(function (a) {
                  var $56 = k(a);
                  return $56;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($89) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($89)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function (a) {
                  var $60 = k(a);
                  return $60;
              })(function ($91) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($91));
              }));
          };
      }, function ($92) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($92)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                                 
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $51 = comp(x)(y);
                  if ($51 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($51 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($51 instanceof Data_Ordering.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 467, column 15 - line 472, column 1: " + [ $51.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($78) {
          return Data_Maybe.maybe([  ])(singleton)(f($78));
      });
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["catMaybes"] = catMaybes;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["singleton"] = singleton;
  exports["sortBy"] = sortBy;
  exports["drop"] = $foreign.drop;
  exports["length"] = $foreign.length;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 69, column 56: " + [ x.constructor.name ]);
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };                 
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create);    
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigInt"] = SigInt;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gEq"] = gEq;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericInt"] = genericInt;
  exports["eqGenericSpine"] = eqGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List.Types line 53, column 3 - line 53, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };                                               
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var singleton = function ($36) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($36));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Boolean = PS["Data.Boolean"];
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (v.value0 + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 65, column 3 - line 66, column 3: " + [ v.constructor.name ]);
  });
  var fail = function ($112) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($112));
  };
  var parseJSON = function (json) {
      return $foreign.parseJSONImpl(function ($113) {
          return fail(JSONError.create($113));
      }, Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), json);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 108, column 1 - line 110, column 54: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($114) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($114));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["fail"] = fail;
  exports["parseJSON"] = parseJSON;
  exports["readBoolean"] = readBoolean;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["showForeignError"] = showForeignError;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["typeOf"] = $foreign.typeOf;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };                         
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                         
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["ix"] = ix;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Identity = PS["Data.Identity"];        
  var IsForeign = function (read) {
      this.read = read;
  };                                                          
  var read = function (dict) {
      return dict.read;
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function ($23) {
              return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f))(read(dictIsForeign)($23));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.ix(dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Foreign_Index.errorAt(dictIndex)(prop))));
              };
          };
      };
  };
  var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
  var intIsForeign = new IsForeign(Data_Foreign.readInt);   
  var booleanIsForeign = new IsForeign(Data_Foreign.readBoolean);
  exports["IsForeign"] = IsForeign;
  exports["read"] = read;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["booleanIsForeign"] = booleanIsForeign;
  exports["numberIsForeign"] = numberIsForeign;
  exports["intIsForeign"] = intIsForeign;
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Generic = PS["Data.Generic"];
  var Data_String = PS["Data.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 43, column 3 - line 44, column 3: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["print"] = print;
  exports["unCustomMethod"] = unCustomMethod;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  var _2_15 = 32768;       // 2^15
  var _2_16 = 65536;       // 2^16
  var _2_17 = 131072;      // 2^17
  var _2_34 = 17179869184; // 2^34

  exports.blockIndex = function(x){
      return function(y){
          return function(z){
              return (x + _2_17) * _2_34 + (z + _2_17) * _2_16 + (y + _2_15)
          }
      }
  }

  exports.runBlockIndex = function(bits){
      var cx = (bits / _2_34) | 0;
      var cz = ((bits - cx * _2_34) / _2_16) | 0;
      var cy = (bits - cx * _2_34 - cz * _2_16);
      var x = cx - _2_17;
      var z = cz - _2_17;
      var y = cy - _2_15;
      return { x: x, y: y, z: z }
  }
})(PS["Game.Cubbit.BlockIndex"] = PS["Game.Cubbit.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.BlockIndex"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  exports["blockIndex"] = $foreign.blockIndex;
  exports["runBlockIndex"] = $foreign.runBlockIndex;
})(PS["Game.Cubbit.BlockIndex"] = PS["Game.Cubbit.BlockIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Generic = PS["Data.Generic"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];        
  var BlockType = function (x) {
      return x;
  };
  var woodBlock = 3;
  var waterBlock = 2;
  var leavesBlock = 4;
  var grassBlock = 1;
  var graniteBlock = 6;
  var generic_BlockType = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Game.Cubbit.BlockType.BlockType" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(BlockType))(Data_Generic.fromSpine(Data_Generic.genericInt)(v.value1[0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Game.Cubbit.BlockType.BlockType", [ {
          sigConstructor: "Game.Cubbit.BlockType.BlockType", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Game.Cubbit.BlockType.BlockType", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });                                                                            
  var eq_BlockType = new Data_Eq.Eq(Data_Generic.gEq(generic_BlockType));
  var dirtBlock = 5;
  var bushBlock = 100;
  var airBlock = 0;
  var blockTypes = {
      airBlock: airBlock, 
      grassBlock: grassBlock, 
      waterBlock: waterBlock, 
      woodBlock: woodBlock, 
      leavesBlock: leavesBlock, 
      dirtBlock: dirtBlock, 
      graniteBlock: graniteBlock, 
      bushBlock: bushBlock
  };
  exports["BlockType"] = BlockType;
  exports["airBlock"] = airBlock;
  exports["blockTypes"] = blockTypes;
  exports["bushBlock"] = bushBlock;
  exports["dirtBlock"] = dirtBlock;
  exports["graniteBlock"] = graniteBlock;
  exports["grassBlock"] = grassBlock;
  exports["leavesBlock"] = leavesBlock;
  exports["waterBlock"] = waterBlock;
  exports["woodBlock"] = woodBlock;
  exports["generic_BlockType"] = generic_BlockType;
  exports["eq_BlockType"] = eq_BlockType;
})(PS["Game.Cubbit.BlockType"] = PS["Game.Cubbit.BlockType"] || {});
(function(exports) {                           

  exports.insert = function(key){
      return function(value){
          return function(map){
              var m = new Uint8Array(map);
              m[key] = value;
              return m;
          }
      }
  }

  exports.lookupNullable = function(key){
      return function(map){
          return map[key];
      }
  }
})(PS["Game.Cubbit.BoxelMap"] = PS["Game.Cubbit.BoxelMap"] || {});
(function(exports) {
    "use strict";
  var terrainRenderingGroup = 1;

  /**
 *  rendering groups
 */  
  var skyBoxRenderingGruop = 0;
  var chunkSize = 16;
  exports["chunkSize"] = chunkSize;
  exports["skyBoxRenderingGruop"] = skyBoxRenderingGruop;
  exports["terrainRenderingGroup"] = terrainRenderingGroup;
})(PS["Game.Cubbit.Constants"] = PS["Game.Cubbit.Constants"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var runLocalIndex = function (v) {
      var x = v / (Game_Cubbit_Constants.chunkSize * Game_Cubbit_Constants.chunkSize | 0) | 0;
      var i$prime = v - ((x * Game_Cubbit_Constants.chunkSize | 0) * Game_Cubbit_Constants.chunkSize | 0);
      var y = i$prime / Game_Cubbit_Constants.chunkSize | 0;
      var z = i$prime % Game_Cubbit_Constants.chunkSize;
      return {
          x: x, 
          y: y, 
          z: z
      };
  };             
  var localIndex = function (lx) {
      return function (ly) {
          return function (lz) {
              return (((Game_Cubbit_Constants.chunkSize * Game_Cubbit_Constants.chunkSize | 0) * lx | 0) + (Game_Cubbit_Constants.chunkSize * ly | 0) | 0) + lz | 0;
          };
      };
  };
  exports["localIndex"] = localIndex;
  exports["runLocalIndex"] = runLocalIndex;
})(PS["Game.Cubbit.LocalIndex"] = PS["Game.Cubbit.LocalIndex"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.BoxelMap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];        
  var lookup = function (key) {
      return function (map) {
          return Data_Nullable.toMaybe($foreign.lookupNullable(key)(map));
      };
  };
  exports["lookup"] = lookup;
  exports["insert"] = $foreign.insert;
})(PS["Game.Cubbit.BoxelMap"] = PS["Game.Cubbit.BoxelMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Ord = PS["Data.Ord"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ring = PS["Data.Ring"];
  var runChunkIndex = function (v) {
      return Game_Cubbit_BlockIndex.runBlockIndex(v);
  };
  var chunkIndex = function (x) {
      return function (y) {
          return function (z) {
              return Game_Cubbit_BlockIndex.blockIndex(x)(y)(z);
          };
      };
  };
  exports["chunkIndex"] = chunkIndex;
  exports["runChunkIndex"] = runChunkIndex;
})(PS["Game.Cubbit.ChunkIndex"] = PS["Game.Cubbit.ChunkIndex"] || {});
(function(exports) {
  exports.onDOMContentLoaded = function(callback){
      return function(){
          window.addEventListener('DOMContentLoaded', function(){
              callback();
          });
      }
  }

  exports.querySelectorCanvas = function(selector){
      return function(){
          return document.querySelector(selector);
      }
  }
})(PS["Graphics.Babylon"] = PS["Graphics.Babylon"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  exports["onDOMContentLoaded"] = $foreign.onDOMContentLoaded;
  exports["querySelectorCanvas"] = $foreign.querySelectorCanvas;
})(PS["Graphics.Babylon"] = PS["Graphics.Babylon"] || {});
(function(exports) {

  exports.abstractMeshToNode = function(mesh){
      return mesh;
  }

  exports.dispose = function(doNotRecurse){
      return function(mesh){
          return function(){
              mesh.dispose(doNotRecurse);
          }
      }
  }


  exports.setIsPickable = function(isPickable){
      return function(mesh){
          return function(){
              mesh.isPickable = isPickable;
          }
      }
  }

  exports.setPosition = function(position){
      return function(mesh){
          return function(){
              mesh.position = position;
          }
      }
  }

  exports.setIsVisible = function(isVisible){
      return function(mesh){
          return function(){
              mesh.isVisible = isVisible;
          }
      }
  }

  exports.setUseVertexColors  = function(useVertexColors ){
      return function(mesh){
          return function(){
              mesh.useVertexColors  = useVertexColors ;
          }
      }
  }

  exports.setRenderingGroupId = function(value){
      return function(mesh){
          return function(){
              mesh.renderingGroupId = value;
          }
      }
  }

  exports.setReceiveShadows = function(receiveShadows){
      return function(mesh){
          return function(){
              mesh.receiveShadows = receiveShadows;
          }
      }
  }

  exports.getSkeleton = function(mesh){
      return function(){
          return mesh.skeleton;
      }
  }

  exports.setMaterial = function(mat){
      return function(mesh){
          return function(){
              mesh.material = mat;
          }
      }
  }
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {exports.setFogEnabled = function(fogEnabled){
      return function(material){
          return function(){
              material.fogEnabled = fogEnabled;
          }
      }
  }

  exports.setZOffset = function(value){
      return function(mat){
          return function(){
              mat.zOffset = value;
          }
      }
  }

  exports.setWireframe = function(value){
      return function(mat){
          return function(){
              mat.wireframe = value;
          }
      }
  }

  exports.setAlpha = function(value){
      return function(mat){
          return function(){
              mat.alpha = value;
          }
      }
  }
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Material"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["setAlpha"] = $foreign.setAlpha;
  exports["setFogEnabled"] = $foreign.setFogEnabled;
  exports["setWireframe"] = $foreign.setWireframe;
  exports["setZOffset"] = $foreign.setZOffset;
})(PS["Graphics.Babylon.Material"] = PS["Graphics.Babylon.Material"] || {});
(function(exports) {exports.getName = function(node){
      return node.name;
  }
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Node"];
  exports["getName"] = $foreign.getName;
})(PS["Graphics.Babylon.Node"] = PS["Graphics.Babylon.Node"] || {});
(function(exports) {exports.createVector3 = function(x){
      return function(y){
          return function(z){
              return function(){
                  return new BABYLON.Vector3(x, y, z);
              }
          }
      }
  }

  exports.runVector3 = function(v){
      return function(){
          return { x: v.x, y: v.y, z: v.z }
      }
  }
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Vector3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createVector3"] = $foreign.createVector3;
  exports["runVector3"] = $foreign.runVector3;
})(PS["Graphics.Babylon.Vector3"] = PS["Graphics.Babylon.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.AbstractMesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_Observable = PS["Graphics.Babylon.Observable"];
  var Graphics_Babylon_PhysicsImpostor = PS["Graphics.Babylon.PhysicsImpostor"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["abstractMeshToNode"] = $foreign.abstractMeshToNode;
  exports["dispose"] = $foreign.dispose;
  exports["getSkeleton"] = $foreign.getSkeleton;
  exports["setIsPickable"] = $foreign.setIsPickable;
  exports["setIsVisible"] = $foreign.setIsVisible;
  exports["setMaterial"] = $foreign.setMaterial;
  exports["setPosition"] = $foreign.setPosition;
  exports["setReceiveShadows"] = $foreign.setReceiveShadows;
  exports["setRenderingGroupId"] = $foreign.setRenderingGroupId;
  exports["setUseVertexColors"] = $foreign.setUseVertexColors;
})(PS["Graphics.Babylon.AbstractMesh"] = PS["Graphics.Babylon.AbstractMesh"] || {});
(function(exports) {exports.createMesh = function(id){
      return function(scene){
          return function(){
              return new BABYLON.Mesh(id, scene);
          }
      }
  }

  exports.meshToAbstractMesh = function(mesh){
      return mesh;
  }

  exports.createBox = function(id){
      return function(size){
          return function(scene){
              return function(){
                  return BABYLON.Mesh.CreateBox(id, size, scene);
              }
          }
      }
  }

  exports.setPosition = function(position){
      return function(mesh){
          return function(){
              mesh.position = position;
          }
      }
  }




  exports.setInfiniteDistance = function(value){
      return function(mesh){
          return function(){
              mesh.infiniteDistance = value;
          }
      }
  }
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Mesh"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_PhysicsImpostor = PS["Graphics.Babylon.PhysicsImpostor"];
  exports["createBox"] = $foreign.createBox;
  exports["createMesh"] = $foreign.createMesh;
  exports["meshToAbstractMesh"] = $foreign.meshToAbstractMesh;
  exports["setInfiniteDistance"] = $foreign.setInfiniteDistance;
  exports["setPosition"] = $foreign.setPosition;
})(PS["Graphics.Babylon.Mesh"] = PS["Graphics.Babylon.Mesh"] || {});
(function(exports) {exports.createVertexData = function(props){
      return function(){
          var v = new BABYLON.VertexData();
          v.indices = props.indices;
          v.positions = props.positions;
          v.normals = props.normals;
          v.uvs = props.uvs;
          v.colors = props.colors;
          return v;
      }
  }

  exports.applyToMesh = function(mesh){
      return function(updatable){
          return function(vertexData){
              return function(){
                  vertexData.applyToMesh(mesh, updatable);
              }
          }
      }
  }
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.VertexData"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  exports["applyToMesh"] = $foreign.applyToMesh;
  exports["createVertexData"] = $foreign.createVertexData;
})(PS["Graphics.Babylon.VertexData"] = PS["Graphics.Babylon.VertexData"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_VertexData = PS["Graphics.Babylon.VertexData"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Bind = PS["Control.Bind"];
  var MeshNotLoaded = (function () {
      function MeshNotLoaded() {

      };
      MeshNotLoaded.value = new MeshNotLoaded();
      return MeshNotLoaded;
  })();
  var MeshLoaded = (function () {
      function MeshLoaded(value0) {
          this.value0 = value0;
      };
      MeshLoaded.create = function (value0) {
          return new MeshLoaded(value0);
      };
      return MeshLoaded;
  })();
  var EmptyMeshLoaded = (function () {
      function EmptyMeshLoaded() {

      };
      EmptyMeshLoaded.value = new EmptyMeshLoaded();
      return EmptyMeshLoaded;
  })();
  var disposeLoadedMesh = function (v) {
      if (v instanceof MeshNotLoaded) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
      if (v instanceof MeshLoaded) {
          return Graphics_Babylon_AbstractMesh.dispose(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(v.value0));
      };
      if (v instanceof EmptyMeshLoaded) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at Game.Cubbit.Chunk line 49, column 21 - line 52, column 33: " + [ v.constructor.name ]);
  };
  var disposeChunk = function (chunk) {
      return function __do() {
          disposeLoadedMesh(chunk.standardMaterialMesh)();
          disposeLoadedMesh(chunk.waterMaterialMesh)();
          return disposeLoadedMesh(chunk.transparentMaterialMesh)();
      };
  };
  exports["MeshNotLoaded"] = MeshNotLoaded;
  exports["MeshLoaded"] = MeshLoaded;
  exports["EmptyMeshLoaded"] = EmptyMeshLoaded;
  exports["disposeChunk"] = disposeChunk;
  exports["disposeLoadedMesh"] = disposeLoadedMesh;
})(PS["Game.Cubbit.Chunk"] = PS["Game.Cubbit.Chunk"] || {});
(function(exports) {exports.createChunkMap = function(){
      return { map: {}, list: [] };
  }

  exports._lookup = function(index){
      return function(obj){
          return function(){
              return obj.map[index] || null;
          }
      }
  }

  exports.insert = function(index){
      return function(value){
          return function(obj){
              return function(){
                  if(obj.map[index]){
                      var i = obj.list.findIndex(function(chunkWithMesh){
                          return chunkWithMesh.index === index;
                      });
                      if(i === -1){
                          // never come here
                          debugger;
                      }
                      obj.list.splice(i, 1, value);
                  }else{
                      obj.list.push(value);
                  }
                  obj.map[index] = value;
              }
          }
      }
  }

  exports.sort = function(cx){
      return function(cy){
          return function(cz){
              return function(obj){
                  return function(){
                      obj.list.sort(function(a, b){
                          var r = Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz));
                          var t = Math.max(Math.abs(b.x - cx), Math.abs(b.y - cy), Math.abs(b.z - cz));
                          return r - t;
                      });
                  }
              }
          }
      }
  }

  exports.delete = function(index){
      return function(obj){
          return function(){
              if(obj.map[index]){
                  var i = obj.list.findIndex(function(chunkWithMesh){
                      return chunkWithMesh.index === index;
                  });
                  obj.list.splice(i, 1);
                  delete obj.map[index];
              }
          }
      }
  }

  exports.size = function(obj){
      return function(){
          return obj.list.length;
      }
  }

  exports.slice = function(begin){
      return function(end){
          return function(obj){
              return function(){
                  return obj.list.slice(begin, end);
              }
          }
      }
  }


  exports.filterNeighbors = function(range){
      return function(cx){
          return function(cy){
              return function(cz){
                  return function(obj){
                      return function(){
                          return obj.list.filter(function(a){
                              return Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz)) <= range
                          });
                      }
                  }
              }
          }
      }
  }


  exports.getSortedChunks = function(cx){
      return function(cy){
          return function(cz){
              return function(obj){
                  return function(){
                      var sorted = obj.list.slice();
                      sorted.sort(function(a, b){
                          var r = Math.max(Math.abs(a.x - cx), Math.abs(a.y - cy), Math.abs(a.z - cz));
                          var t = Math.max(Math.abs(b.x - cx), Math.abs(b.y - cy), Math.abs(b.z - cz));
                          return r - t;
                      });
                      return sorted;
                  }
              }
          }
      }
  }
})(PS["Game.Cubbit.ChunkMap"] = PS["Game.Cubbit.ChunkMap"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.ChunkMap"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var lookup = function (index) {
      return function (map) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lookup(index)(map));
      };
  };
  exports["lookup"] = lookup;
  exports["createChunkMap"] = $foreign.createChunkMap;
  exports["delete"] = $foreign["delete"];
  exports["filterNeighbors"] = $foreign.filterNeighbors;
  exports["getSortedChunks"] = $foreign.getSortedChunks;
  exports["insert"] = $foreign.insert;
  exports["size"] = $foreign.size;
  exports["slice"] = $foreign.slice;
})(PS["Game.Cubbit.ChunkMap"] = PS["Game.Cubbit.ChunkMap"] || {});
(function(exports) {exports.onMouseMove = function(callback){
      return function(){
          document.getElementById("renderCanvas").addEventListener("mousemove", function(e){
              callback(e)();
          });
      }
  }

  exports.onMouseClick = function(callback){
      return function(){
          document.getElementById("renderCanvas").addEventListener("click", function(e){
              callback(e)();
          });
      }
  }

  exports.onButtonClick = function(id){
      return function(callback){
          return function(){
              document.getElementById(id).addEventListener("click", function(){
                  callback();
              });
          }
      }
  }

  exports.onKeyDown = function(callback){
      return function(){
          window.addEventListener("keydown", function(e){
              callback(e)();
          });
      }
  }
})(PS["Game.Cubbit.Event"] = PS["Game.Cubbit.Event"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.Event"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["onButtonClick"] = $foreign.onButtonClick;
  exports["onKeyDown"] = $foreign.onKeyDown;
  exports["onMouseClick"] = $foreign.onMouseClick;
  exports["onMouseMove"] = $foreign.onMouseMove;
})(PS["Game.Cubbit.Event"] = PS["Game.Cubbit.Event"] || {});
(function(exports) {
    "use strict";

  exports._createBlockMapJS = function(references){
      return function(noise){
          return function(index){

              var chunkSize = references.chunkSize;
              var terrainScale = references.terrainScale;
              var waterBlockHeight = references.waterBlockHeight;
              var maxHeight = references.maxHeight;
              var simplex2 = references.simplex2;
              var blockTypes = references.blockTypes;
              var runChunkIndex = references.runChunkIndex;

              var airBlock = blockTypes.airBlock;
              var grassBlock = blockTypes.grassBlock;
              var waterBlock = blockTypes.waterBlock;
              var woodBlock = blockTypes.woodBlock;
              var leavesBlock = blockTypes.leavesBlock;
              var dirtBlock = blockTypes.dirtBlock;
              var bushBlock = blockTypes.bushBlock;

              var rci = runChunkIndex(index);
              var cx = rci.x
              var cy = rci.y
              var cz = rci.z

              var chunkBlockCount = chunkSize * chunkSize * chunkSize;

              if(cy < 0){
                  return Uint8Array.from({ length: chunkBlockCount }, function(v, k){ return dirtBlock })
              }else if(0 < cy){
                  return new Uint8Array(chunkBlockCount)
              }else{

                  // var stmap = Object.create({});
                  var stmap = new Uint8Array(chunkBlockCount);

                  function lookup(lx, ly, lz){
                      if(0 <= lx && lx < chunkSize && 0 <= ly && ly < chunkSize && 0 <= lz && lz < chunkSize){
                          return stmap[chunkSize * chunkSize * lx + chunkSize * ly + lz];
                      }else{
                          return airBlock
                      }
                  }
                  function put(lx, ly, lz, value){
                      if(0 <= lx && lx < chunkSize && 0 <= ly && ly < chunkSize && 0 <= lz && lz < chunkSize){
                          stmap[chunkSize * chunkSize * lx + chunkSize * ly + lz] = value;
                      }
                  }


                  function getHeight(gx, gz){
                      var r = (simplex2(gx * terrainScale)(gz * terrainScale)(noise) + 1.0) * 0.5;
                      return Math.floor(r * maxHeight)
                  }

                  // terrain
                  for(var lz = 0; lz <= chunkSize - 1; lz++){
                      for(var lx = 0; lx <= chunkSize - 1; lx++){
                          var gx = chunkSize * cx + lx
                          var gz = chunkSize * cz + lz
                          var h = getHeight(gx, gz)
                          for(var ly = 0; ly < chunkSize; ly++){
                              var gy = chunkSize * cy + ly;
                              var ly = gy - chunkSize * cy;
                              if(gy == h){
                                  put(lx, ly, lz, grassBlock);
                              }else if(gy < h){
                                  put(lx, ly, lz, dirtBlock);
                              }else if(gy <= waterBlockHeight){
                                  put(lx, ly, lz, waterBlock);
                              }
                          }
                      }
                  }

                  // woods and bushes
                  for(var lz = 0; lz <= chunkSize - 1; lz++){
                      for(var lx = 0; lx <= chunkSize - 1; lx++){
                          var gx = chunkSize * cx + lx
                          var gz = chunkSize * cz + lz
                          var h = getHeight(gx, gz)
                          if(waterBlockHeight <= h){

                              var lh = h - chunkSize * cy


                              var r = ((simplex2(1234 + gx)(5678 + gz)(noise) + 1) * 10000) | 0;

                              if((r % 97) === 29){
                                  // get height
                                  var top = null;
                                  for(var ly = chunkSize - 1; 0 <= ly; ly--){
                                      if(lookup(lx, ly, lz) === grassBlock){
                                          top = ly;
                                          break;
                                      }
                                  }
                                  if(top !== null){
                                      for(var i = 0; i < 3 && top + 1 + i < chunkSize; i++){
                                          put(lx, top + 1 + i, lz, woodBlock);
                                      }
                                      for(var i = 3; i < 6 && top + 1 + i < chunkSize; i++){
                                          for(var dx = -1; dx <= 1; dx++){
                                              for(var dz = -1; dz <= 1; dz++){
                                                  put(lx + dx, top + 1 + i, lz + dz, leavesBlock);
                                              }
                                          }
                                      }
                                  }
                              }else if((r % 93) < 10){
                                  put(lx, lh + 1, lz, bushBlock);
                              }
                          }
                      }
                  }



                  return stmap
              }
          }
      }
  }
})(PS["Game.Cubbit.Generation"] = PS["Game.Cubbit.Generation"] || {});
(function(exports) {/*
 * A speed-improved perlin and simplex noise algorithms for 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 * Converted to Javascript by Joseph Gentle.
 *
 * Version 2012-03-09
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 *
 */  

  function Grad(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
  }

  Grad.prototype.dot2 = function(x, y) {
      return this.x * x + this.y * y;
  };

  Grad.prototype.dot3 = function(x, y, z) {
      return this.x * x + this.y * y + this.z * z;
  };

  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),
      new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),
      new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)
  ];

  var p = [151, 160, 137, 91, 90, 15,
      131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
      190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
      88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
      77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
      102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
      135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
      5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
      223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
      129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
      251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
      49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
      138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
  ];


  // Skewing and unskewing factors for 2, 3, and 4 dimensions
  var F2 = 0.5 * (Math.sqrt(3) - 1);
  var G2 = (3 - Math.sqrt(3)) / 6;

  exports.createNoise = function(seed) {
      // This isn't a very good seeding function, but it works ok. It supports 2^16
      // different seed values. Write something better if you need more seeds.

      // To remove the need for index wrapping, double the permutation table length
      var perm = new Array(512);
      var gradP = new Array(512);

      if (seed > 0 && seed < 1) {
          // Scale the seed out
          seed *= 65536;
      }

      seed = Math.floor(seed);
      if (seed < 256) {
          seed |= seed << 8;
      }

      for (var i = 0; i < 256; i++) {
          var v;
          if (i & 1) {
              v = p[i] ^ (seed & 255);
          } else {
              v = p[i] ^ ((seed >> 8) & 255);
          }

          perm[i] = perm[i + 256] = v;
          gradP[i] = gradP[i + 256] = grad3[v % 12];
      }

      return {
          perm: perm,
          gradP: gradP
      }
  }

  exports.simplex2 = function(xin) {
      return function(yin) {
          return function(noise) {
              var n0, n1, n2; // Noise contributions from the three corners
              // Skew the input space to determine which simplex cell we're in
              var s = (xin + yin) * F2; // Hairy factor for 2D
              var i = Math.floor(xin + s);
              var j = Math.floor(yin + s);
              var t = (i + j) * G2;
              var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.
              var y0 = yin - j + t;
              // For the 2D case, the simplex shape is an equilateral triangle.
              // Determine which simplex we are in.
              var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
              if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
                  i1 = 1;
                  j1 = 0;
              } else { // upper triangle, YX order: (0,0)->(0,1)->(1,1)
                  i1 = 0;
                  j1 = 1;
              }
              // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
              // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
              // c = (3-sqrt(3))/6
              var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
              var y1 = y0 - j1 + G2;
              var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
              var y2 = y0 - 1 + 2 * G2;
              // Work out the hashed gradient indices of the three simplex corners
              i &= 255;
              j &= 255;
              var gi0 = noise.gradP[i + noise.perm[j]];
              var gi1 = noise.gradP[i + i1 + noise.perm[j + j1]];
              var gi2 = noise.gradP[i + 1 + noise.perm[j + 1]];
              // Calculate the contribution from the three corners
              var t0 = 0.5 - x0 * x0 - y0 * y0;
              if (t0 < 0) {
                  n0 = 0;
              } else {
                  t0 *= t0;
                  n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient
              }
              var t1 = 0.5 - x1 * x1 - y1 * y1;
              if (t1 < 0) {
                  n1 = 0;
              } else {
                  t1 *= t1;
                  n1 = t1 * t1 * gi1.dot2(x1, y1);
              }
              var t2 = 0.5 - x2 * x2 - y2 * y2;
              if (t2 < 0) {
                  n2 = 0;
              } else {
                  t2 *= t2;
                  n2 = t2 * t2 * gi2.dot2(x2, y2);
              }
              // Add contributions from each corner to get the final noise value.
              // The result is scaled to return values in the interval [-1,1].
              return 70 * (n0 + n1 + n2);
          }
      }
  }
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["PerlinNoise"];
  exports["createNoise"] = $foreign.createNoise;
  exports["simplex2"] = $foreign.simplex2;
})(PS["PerlinNoise"] = PS["PerlinNoise"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.Generation"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var PerlinNoise = PS["PerlinNoise"];        
  var generateReferences = {
      chunkSize: Game_Cubbit_Constants.chunkSize, 
      terrainScale: 1.0e-2, 
      waterBlockHeight: 3, 
      maxHeight: 15, 
      blockTypes: Game_Cubbit_BlockType.blockTypes, 
      simplex2: PerlinNoise.simplex2, 
      runChunkIndex: Game_Cubbit_ChunkIndex.runChunkIndex
  };
  var createBlockMap = $foreign._createBlockMapJS(generateReferences);
  exports["createBlockMap"] = createBlockMap;
})(PS["Game.Cubbit.Generation"] = PS["Game.Cubbit.Generation"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_ChunkMap = PS["Game.Cubbit.ChunkMap"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];
  var Game_Cubbit_Vec = PS["Game.Cubbit.Vec"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var PerlinNoise = PS["PerlinNoise"];
  var Prelude = PS["Prelude"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var lookupChunk = function (index) {
      return function (v) {
          return Game_Cubbit_ChunkMap.lookup(index)(v.map);
      };
  };
  var insertChunk = function (cmesh) {
      return function (v) {
          return Game_Cubbit_ChunkMap.insert(cmesh.index)(cmesh)(v.map);
      };
  };
  var globalPositionToGlobalIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return Data_Int.floor(v + 1000000.0) - 1000000;
              };
              return Game_Cubbit_BlockIndex.blockIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var globalPositionToChunkIndex = function (x) {
      return function (y) {
          return function (z) {
              var f = function (v) {
                  return (Data_Int.floor(v + 1000000.0 * Data_Int.toNumber(Game_Cubbit_Constants.chunkSize)) / Game_Cubbit_Constants.chunkSize | 0) - 1000000;
              };
              return Game_Cubbit_ChunkIndex.chunkIndex(f(x))(f(y))(f(z));
          };
      };
  };
  var globalIndexToChunkIndex = function (b) {
      var f = function (v) {
          return ((v + (1000000 * Game_Cubbit_Constants.chunkSize | 0) | 0) / Game_Cubbit_Constants.chunkSize | 0) - 1000000;
      };
      var bi = Game_Cubbit_BlockIndex.runBlockIndex(b);
      return Game_Cubbit_ChunkIndex.chunkIndex(f(bi.x))(f(bi.y))(f(bi.z));
  };
  var globalIndexToLocalIndex = function (index) {
      var globalIndex = Game_Cubbit_BlockIndex.runBlockIndex(index);
      var chunkIndex = Game_Cubbit_ChunkIndex.runChunkIndex(globalIndexToChunkIndex(index));
      var cx = globalIndex.x - (Game_Cubbit_Constants.chunkSize * chunkIndex.x | 0);
      var cy = globalIndex.y - (Game_Cubbit_Constants.chunkSize * chunkIndex.y | 0);
      var cz = globalIndex.z - (Game_Cubbit_Constants.chunkSize * chunkIndex.z | 0);
      return Game_Cubbit_LocalIndex.localIndex(cx)(cy)(cz);
  };
  var lookupBlock = function (globalIndex) {
      return function (v) {
          var chunkIndex = globalIndexToChunkIndex(globalIndex);
          var localIndex = globalIndexToLocalIndex(globalIndex);
          return function __do() {
              var v1 = Game_Cubbit_ChunkMap.lookup(chunkIndex)(v.map)();
              if (v1 instanceof Data_Maybe.Just) {
                  var $16 = Game_Cubbit_BoxelMap.lookup(localIndex)(v1.value0.blocks);
                  if ($16 instanceof Data_Maybe.Just) {
                      var $17 = Data_Eq.eq(Game_Cubbit_BlockType.eq_BlockType)($16.value0)(Game_Cubbit_BlockType.airBlock);
                      if ($17) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (!$17) {
                          return new Data_Maybe.Just($16.value0);
                      };
                      throw new Error("Failed pattern match at Game.Cubbit.Terrain line 81, column 35 - line 81, column 97: " + [ $17.constructor.name ]);
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var lookupBlockByVec = function (p) {
      return function (v) {
          return lookupBlock(globalPositionToGlobalIndex(p.x)(p.y)(p.z))(v);
      };
  };
  var emptyTerrain = function (seed) {
      return function __do() {
          var v = Game_Cubbit_ChunkMap.createChunkMap();
          return {
              map: v, 
              noise: PerlinNoise.createNoise(seed)
          };
      };
  };
  exports["emptyTerrain"] = emptyTerrain;
  exports["globalIndexToChunkIndex"] = globalIndexToChunkIndex;
  exports["globalIndexToLocalIndex"] = globalIndexToLocalIndex;
  exports["globalPositionToChunkIndex"] = globalPositionToChunkIndex;
  exports["globalPositionToGlobalIndex"] = globalPositionToGlobalIndex;
  exports["insertChunk"] = insertChunk;
  exports["lookupBlock"] = lookupBlock;
  exports["lookupBlockByVec"] = lookupBlockByVec;
  exports["lookupChunk"] = lookupChunk;
})(PS["Game.Cubbit.Terrain"] = PS["Game.Cubbit.Terrain"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  "use strict";

  // module Network.HTTP.Affjax

  // jshint maxparams: 5
  exports._ajax = function (mkHeader, options, canceler, errback, callback) {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function () {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        try {
          for (var i = 0, header; (header = options.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        }
        catch (e) {
          errback(e)();
        }
      }
      xhr.onerror = function () {
        errback(new Error("AJAX request failed: " + options.method + " " + options.url))();
      };
      xhr.onload = function () {
        callback({
          status: xhr.status,
          headers: xhr.getAllResponseHeaders().split("\r\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          response: platformSpecific.getResponse(xhr)
        })();
      };
      xhr.responseType = options.responseType;
      xhr.withCredentials = options.withCredentials;
      xhr.send(options.content);
      return canceler(xhr);
    };
  };

  // jshint maxparams: 4
  exports._cancelAjax = function (xhr, cancelError, errback, callback) {
    return function () {
      try { xhr.abort(); } catch (e) { return callback(false)(); }
      return callback(true)();
    };
  };
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Unsafe_Coerce.unsafeCoerce($0));
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 49, column 1 - line 50, column 1: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                       
  var responsableForeign = new Respondable(function ($9) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Unsafe_Coerce.unsafeCoerce($9));
  }, new Data_Tuple.Tuple(Data_Maybe.Nothing.value, JSONResponse.value));                                                                                               
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["Respondable"] = Respondable;
  exports["fromResponse"] = fromResponse;
  exports["responseType"] = responseType;
  exports["responseTypeToString"] = responseTypeToString;
  exports["responsableForeign"] = responsableForeign;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 30, column 1 - line 30, column 41: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 25, column 1 - line 26, column 1: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Show = PS["Data.Show"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value), 
      url: "/", 
      headers: [  ], 
      content: Data_Maybe.Nothing.value, 
      username: Data_Maybe.Nothing.value, 
      password: Data_Maybe.Nothing.value, 
      withCredentials: false
  };
  var cancelAjax = function (xhr) {
      return function (err) {
          return Control_Monad_Aff.makeAff(function (eb) {
              return function (cb) {
                  return $foreign._cancelAjax(xhr, err, eb, cb);
              };
          });
      };
  };
  var affjax$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              return function (eb) {
                  return function (cb) {
                      var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
                      var requestSettings = (function () {
                          var $55 = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                          if ($55 instanceof Data_Maybe.Nothing) {
                              return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                          };
                          if ($55 instanceof Data_Maybe.Just) {
                              return new Data_Tuple.Tuple($55.value0.value0, new Data_Maybe.Just($55.value0.value1));
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 257, column 21 - line 259, column 49: " + [ $55.constructor.name ]);
                      })();
                      var fromResponse$prime = (function () {
                          var $59 = Data_Tuple.snd(responseSettings);
                          if ($59 instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.parseJSON)(Data_Foreign.readString));
                          };
                          return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
                      })();
                      var cb$prime = function (res) {
                          var $63 = Data_Functor.map(Data_Either.functorEither)(function (v) {
                              var $60 = {};
                              for (var $61 in res) {
                                  if (res.hasOwnProperty($61)) {
                                      $60[$61] = res[$61];
                                  };
                              };
                              $60.response = v;
                              return $60;
                          })(Control_Monad_Except.runExcept(fromResponse$prime(res.response)));
                          if ($63 instanceof Data_Either.Left) {
                              return eb(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))($63.value0)));
                          };
                          if ($63 instanceof Data_Either.Right) {
                              return cb($63.value0);
                          };
                          throw new Error("Failed pattern match at Network.HTTP.Affjax line 276, column 13 - line 278, column 26: " + [ $63.constructor.name ]);
                      };
                      var addHeader = function (mh) {
                          return function (hs) {
                              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                                  return Data_Array.snoc(hs)(mh.value0);
                              };
                              return hs;
                          };
                      };
                      var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
                      var req$prime = {
                          method: Data_HTTP_Method.print(req.method), 
                          url: req.url, 
                          headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                              return {
                                  field: Network_HTTP_RequestHeader.requestHeaderName(h), 
                                  value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                              };
                          })(headers), 
                          content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)), 
                          responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)), 
                          username: Data_Nullable.toNullable(req.username), 
                          password: Data_Nullable.toNullable(req.password), 
                          withCredentials: req.withCredentials
                      };
                      return $foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime, cancelAjax, eb, cb$prime);
                  };
              };
          };
      };
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function ($93) {
              return Control_Monad_Aff["makeAff'"](affjax$prime(dictRequestable)(dictRespondable)($93));
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $71 = {};
              for (var $72 in defaultRequest) {
                  if (defaultRequest.hasOwnProperty($72)) {
                      $71[$72] = defaultRequest[$72];
                  };
              };
              $71.url = u;
              return $71;
          })());
      };
  };
  exports["affjax"] = affjax;
  exports["defaultRequest"] = defaultRequest;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var Data_Nullable = PS["Data.Nullable"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Vec = PS["Game.Cubbit.Vec"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];        
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var Put = (function () {
      function Put() {

      };
      Put.value = new Put();
      return Put;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  exports["Move"] = Move;
  exports["Put"] = Put;
  exports["Remove"] = Remove;
})(PS["Game.Cubbit.Types"] = PS["Game.Cubbit.Types"] || {});
(function(exports) {exports.setHasAlpha = function(hasAplha){
      return function(mat){
          return function(){
              mat.hasAlpha = hasAplha;
          }
      }
  }
})(PS["Graphics.Babylon.BaseTexture"] = PS["Graphics.Babylon.BaseTexture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.BaseTexture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["setHasAlpha"] = $foreign.setHasAlpha;
})(PS["Graphics.Babylon.BaseTexture"] = PS["Graphics.Babylon.BaseTexture"] || {});
(function(exports) {exports.createColor3 = function(r){
      return function(g){
          return function(b){
              return function(){
                  return new BABYLON.Color3(r, g, b);
              }
          }
      }
  }
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Color3"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createColor3"] = $foreign.createColor3;
})(PS["Graphics.Babylon.Color3"] = PS["Graphics.Babylon.Color3"] || {});
(function(exports) {exports.createShaderMaterial = function(name){
      return function(scene){
          return function(shaderPath){
              return function(options){
                  return function(){
                      return new BABYLON.ShaderMaterial(name, scene, shaderPath, options);
                  }
              }
          }
      }
  }

  exports.shaderMaterialToMaterial = function(mat){
      return mat;
  }

  exports.setTexture = function(name){
      return function(tex){
          return function(mat){
              return function(){
                  mat.setTexture(name, tex);
              }
          }
      }
  }

  exports.setVector3 = function(name){
      return function(vec){
          return function(mat){
              return function(){
                  mat.setVector3(name, vec);
              }
          }
      }
  }

  exports.setFloats = function(name){
      return function(fs){
          return function(mat){
              return function(){
                  mat.setFloats(name, fs);
              }
          }
      }
  }

  exports.setColor3 = function(name){
      return function(col){
          return function(mat){
              return function(){
                  mat.setColor3(name, col);
              }
          }
      }
  }
})(PS["Graphics.Babylon.ShaderMaterial"] = PS["Graphics.Babylon.ShaderMaterial"] || {});
(function(exports) {exports.createTexture = function(path){
      return function(scene){
          return function(options){
              return function(){
                  return new BABYLON.Texture(path, scene, options.noMipmap, options.invertY, options.samplingMode, options.onLoad, options.onError);
              }
          }
      }
  }

  exports.tRILINEAR_SAMPLINGMODE = BABYLON.Texture.TRILINEAR_SAMPLINGMODE;

  exports.textureToBaseTexture = function(tex){
      return tex;
  }

  exports.sKYBOX_MODE = BABYLON.Texture.SKYBOX_MODE;

  exports.setCoordinatesMode = function(value){
      return function(tex){
          return function(){
              tex.coordinatesMode = value;
          }
      }
  }
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Texture"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_BaseTexture = PS["Graphics.Babylon.BaseTexture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Control_Applicative = PS["Control.Applicative"];        
  var defaultCreateTextureOptions = {
      noMipmap: false, 
      invertY: true, 
      samplingMode: $foreign.tRILINEAR_SAMPLINGMODE, 
      onLoad: Control_Applicative.pure(Control_Monad_Eff.applicativeEff), 
      onError: Control_Applicative.pure(Control_Monad_Eff.applicativeEff)
  };
  exports["defaultCreateTextureOptions"] = defaultCreateTextureOptions;
  exports["createTexture"] = $foreign.createTexture;
  exports["sKYBOX_MODE"] = $foreign.sKYBOX_MODE;
  exports["setCoordinatesMode"] = $foreign.setCoordinatesMode;
  exports["textureToBaseTexture"] = $foreign.textureToBaseTexture;
})(PS["Graphics.Babylon.Texture"] = PS["Graphics.Babylon.Texture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.ShaderMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["createShaderMaterial"] = $foreign.createShaderMaterial;
  exports["setColor3"] = $foreign.setColor3;
  exports["setFloats"] = $foreign.setFloats;
  exports["setTexture"] = $foreign.setTexture;
  exports["setVector3"] = $foreign.setVector3;
  exports["shaderMaterialToMaterial"] = $foreign.shaderMaterialToMaterial;
})(PS["Graphics.Babylon.ShaderMaterial"] = PS["Graphics.Babylon.ShaderMaterial"] || {});
(function(exports) {exports.createStandardMaterial = function(id){
      return function(scene){
          return function(){
              return new BABYLON.StandardMaterial(id, scene);
          }
      }
  }

  exports.setDiffuseTexture = function(tex){
      return function(mat){
          return function(){
              mat.diffuseTexture = tex;
          }
      }
  }

  exports.setReflectionTexture = function(tex){
      return function(mat){
          return function(){
              mat.reflectionTexture = tex;
          }
      }
  }

  exports.standardMaterialToMaterial = function(mat){
      return mat;
  }

  exports.setBackFaceCulling = function(value){
      return function(mat){
          return function(){
              mat.backFaceCulling = value;
          }
      }
  }

  exports.setDisableLighting  = function(value){
      return function(mat){
          return function(){
              mat.disableLighting = value;
          }
      }
  }

  exports.setDiffuseColor  = function(value){
      return function(mat){
          return function(){
              mat.diffuseColor  = value;
          }
      }
  }

  exports.setSpecularColor = function(value){
      return function(mat){
          return function(){
              mat.specularColor = value;
          }
      }
  }

  exports.setUseAlphaFromDiffuseTexture = function(useAlphaFromDiffuseTexture){
      return function(mat){
          return function(){
              mat.useAlphaFromDiffuseTexture = useAlphaFromDiffuseTexture;
          }
      }
  }
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.StandardMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  exports["createStandardMaterial"] = $foreign.createStandardMaterial;
  exports["setBackFaceCulling"] = $foreign.setBackFaceCulling;
  exports["setDiffuseColor"] = $foreign.setDiffuseColor;
  exports["setDiffuseTexture"] = $foreign.setDiffuseTexture;
  exports["setDisableLighting"] = $foreign.setDisableLighting;
  exports["setReflectionTexture"] = $foreign.setReflectionTexture;
  exports["setSpecularColor"] = $foreign.setSpecularColor;
  exports["setUseAlphaFromDiffuseTexture"] = $foreign.setUseAlphaFromDiffuseTexture;
  exports["standardMaterialToMaterial"] = $foreign.standardMaterialToMaterial;
})(PS["Graphics.Babylon.StandardMaterial"] = PS["Graphics.Babylon.StandardMaterial"] || {});
(function(exports) {exports.createWaterMaterial = function(name){
      return function(scene){
          return function(){
              return new BABYLON.WaterMaterial(name, scene);
          }
      }
  }

  exports.waterMaterialToMaterial = function(mat){
      return mat;
  }

  exports.setBumpTexture = function(tex){
      return function(mat){
          return function(){
              mat.bumpTexture = tex;
          }
      }
  }

  exports.addToRenderList = function(mesh){
      return function(mat){
          return function(){
              mat.addToRenderList(mesh);
          }
      }
  }

  exports.setWaveHeight = function(waveHeight){
      return function(mat){
          return function(){
              mat.waveHeight = waveHeight;
          }
      }
  }

  exports.setWindForce = function(windForce){
      return function(mat){
          return function(){
              mat.windForce = windForce;
          }
      }
  }
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.WaterMaterial"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["addToRenderList"] = $foreign.addToRenderList;
  exports["createWaterMaterial"] = $foreign.createWaterMaterial;
  exports["setBumpTexture"] = $foreign.setBumpTexture;
  exports["setWaveHeight"] = $foreign.setWaveHeight;
  exports["setWindForce"] = $foreign.setWindForce;
  exports["waterMaterialToMaterial"] = $foreign.waterMaterialToMaterial;
})(PS["Graphics.Babylon.WaterMaterial"] = PS["Graphics.Babylon.WaterMaterial"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon_BaseTexture = PS["Graphics.Babylon.BaseTexture"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_ShaderMaterial = PS["Graphics.Babylon.ShaderMaterial"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_WaterMaterial = PS["Graphics.Babylon.WaterMaterial"];
  var Prelude = PS["Prelude"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var initializeMaterials = function (scene) {
      return function (skybox) {
          return function (texture) {
              return function (alphaTexture) {
                  return function (options) {
                      return function __do() {
                          Graphics_Babylon_BaseTexture.setHasAlpha(true)(Graphics_Babylon_Texture.textureToBaseTexture(alphaTexture))();
                          var v = (function __do() {
                              var v = Graphics_Babylon_ShaderMaterial.createShaderMaterial("cellShading")(scene)("./alice/cellShading")({
                                  needAlphaBlending: false, 
                                  needAlphaTesting: false, 
                                  attributes: [ "position", "uv", "normal", "matricesIndices", "matricesWeights" ], 
                                  uniforms: [ "world", "viewProjection", "mBones" ], 
                                  samplers: [ "textureSampler" ], 
                                  defines: [  ]
                              })();
                              var v1 = Graphics_Babylon_Vector3.createVector3(0.0)(20.0)(-10.0)();
                              var v2 = Graphics_Babylon_Color3.createColor3(1.0)(1.0)(1.0)();
                              var v3 = Graphics_Babylon_Texture.createTexture("./alice/texture.png")(scene)(Graphics_Babylon_Texture.defaultCreateTextureOptions)();
                              Graphics_Babylon_ShaderMaterial.setTexture("textureSampler")(v3)(v)();
                              Graphics_Babylon_ShaderMaterial.setVector3("vLightPosition")(v1)(v)();
                              Graphics_Babylon_ShaderMaterial.setFloats("ToonThresholds")([ 0.2, -0.45, -5.0, -5.0 ])(v)();
                              Graphics_Babylon_ShaderMaterial.setFloats("ToonBrightnessLevels")([ 1.0, 0.9, 0.75, 0.75, 0.75 ])(v)();
                              Graphics_Babylon_ShaderMaterial.setColor3("vLightColor")(v2)(v)();
                              return v;
                          })();
                          var v1 = (function __do() {
                              var v1 = Graphics_Babylon_StandardMaterial.createStandardMaterial("grass-block")(scene)();
                              var v2 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                              Graphics_Babylon_StandardMaterial.setSpecularColor(v2)(v1)();
                              Graphics_Babylon_StandardMaterial.setDiffuseTexture(texture)(v1)();
                              return v1;
                          })();
                          var v2 = (function () {
                              if (options.enableWaterMaterial) {
                                  return function __do() {
                                      var v2 = Graphics_Babylon_WaterMaterial.createWaterMaterial("water-block")(scene)();
                                      var v3 = Graphics_Babylon_Texture.createTexture("waterbump.png")(scene)(Graphics_Babylon_Texture.defaultCreateTextureOptions)();
                                      Graphics_Babylon_WaterMaterial.setBumpTexture(v3)(v2)();
                                      Graphics_Babylon_WaterMaterial.addToRenderList(Graphics_Babylon_Mesh.meshToAbstractMesh(skybox))(v2)();
                                      Graphics_Babylon_WaterMaterial.setWaveHeight(0.0)(v2)();
                                      Graphics_Babylon_WaterMaterial.setWindForce(1.0)(v2)();
                                      return Graphics_Babylon_WaterMaterial.waterMaterialToMaterial(v2);
                                  };
                              };
                              if (!options.enableWaterMaterial) {
                                  return function __do() {
                                      var v2 = Graphics_Babylon_StandardMaterial.createStandardMaterial("water-block")(scene)();
                                      var v3 = Graphics_Babylon_Color3.createColor3(50.0 / 255.0)(50.0 / 255.0)(60.0 / 255.0)();
                                      Graphics_Babylon_StandardMaterial.setDiffuseColor(v3)(v2)();
                                      Graphics_Babylon_Material.setAlpha(0.7)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v2))();
                                      return Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v2);
                                  };
                              };
                              throw new Error("Failed pattern match at Game.Cubbit.Materials line 52, column 22 - line 67, column 50: " + [ options.enableWaterMaterial.constructor.name ]);
                          })()();
                          var v3 = (function __do() {
                              var v3 = Graphics_Babylon_StandardMaterial.createStandardMaterial("bush-material")(scene)();
                              Graphics_Babylon_StandardMaterial.setDiffuseTexture(alphaTexture)(v3)();
                              Graphics_Babylon_Material.setAlpha(0.8)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v3))();
                              var v4 = Graphics_Babylon_Color3.createColor3(0.35)(0.5)(0.3)();
                              Graphics_Babylon_StandardMaterial.setDiffuseColor(v4)(v3)();
                              Graphics_Babylon_StandardMaterial.setUseAlphaFromDiffuseTexture(true)(v3)();
                              return v3;
                          })();
                          return {
                              blockMaterial: Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v1), 
                              waterMaterial: v2, 
                              cellShadingMaterial: Graphics_Babylon_ShaderMaterial.shaderMaterialToMaterial(v), 
                              bushMaterial: Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v3)
                          };
                      };
                  };
              };
          };
      };
  };
  exports["initializeMaterials"] = initializeMaterials;
})(PS["Game.Cubbit.Materials"] = PS["Game.Cubbit.Materials"] || {});
(function(exports) {
    "use strict";

  exports.createTerrainGeometryJS = function(references){
      return function(terrain){
          return function(chunk){

              var chunkSize = references.chunkSize;
              var blockTypes = references.blockTypes;
              var runChunkIndex = references.runChunkIndex;
              var blockIndex = references.blockIndex;
              var globalIndexToChunkIndex = references.globalIndexToChunkIndex;
              var globalIndexToLocalIndex = references.globalIndexToLocalIndex;
              var simplex2 = references.simplex2;

              var noise = terrain.noise;

              var chunkMap = terrain.map.map;

              var TEXTURE_SIZE = 4096;
              var CHIP_SIZE = 64;
              var CHIP_RATIO_0 = 0;
              var CHIP_RATIO_1 = CHIP_SIZE / TEXTURE_SIZE;
              var CHIP_RATIO_2 = CHIP_RATIO_1 * 2;
              var CHIP_RATIO_3 = CHIP_RATIO_1 * 3;
              var CHIP_RATIO_4 = CHIP_RATIO_1 * 4;

              function vec(x, y, z){
                  return { x:x, y:y, z:z }
              }

              function nxUV(uvs, dx){
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1)
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }
              function pxUV(uvs, dx){
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1)
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }
              function nyUV(uvs, dx){
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(CHIP_RATIO_3);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(CHIP_RATIO_3);
              }
              function pyUV(uvs, dx){
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
              }
              function nzUV(uvs, dx){
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1)
              }
              function pzUV(uvs, dx){
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
                  uvs.push(CHIP_RATIO_0 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1)
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_1);
                  uvs.push(CHIP_RATIO_1 + dx);
                  uvs.push(1.0 - CHIP_RATIO_2);
              }

              var airBlock = blockTypes.airBlock;
              var waterBlock = blockTypes.waterBlock;
              var bushBlock = blockTypes.bushBlock;

              var blocks = chunk.blocks;

              function prepareArray(){
                  return { offset: 0, indices: [], positions: [], normals: [], uvs: [], colors: [] }
              }

              var standardMaterialBlockStore = prepareArray();
              var waterBlockStore = prepareArray();
              var transparentMaterialVertexData = prepareArray();

              var chunkIndex = runChunkIndex(chunk.index);
              var ox = chunkSize * chunkIndex.x;
              var oy = chunkSize * chunkIndex.y;
              var oz = chunkSize * chunkIndex.z;


              function solidBounds(block){
                  return block !== airBlock && block !== waterBlock && block !== bushBlock;
              }

              function waterBounds(block){
                  return block !== airBlock;
              }

              function exists(gx, gy, gz, bounds){
                  var lx = gx - ox;
                  var ly = gy - oy;
                  var lz = gz - oz;
                  if(
                      0 <= lx && lx < chunkSize &&
                      0 <= ly && ly < chunkSize &&
                      0 <= lz && lz < chunkSize
                  ){
                      var t = blocks[chunkSize * chunkSize * lx + chunkSize * ly + lz];
                      return bounds(t);
                  }else{
                      var gi = blockIndex(gx)(gy)(gz);
                      var chunkWithMesh = chunkMap[globalIndexToChunkIndex(gi)];
                      if(chunkWithMesh){
                          var block = chunkWithMesh.blocks[globalIndexToLocalIndex(gi)];
                          if(typeof block == "undefined"){
                              // nerver come here
                              debugger;
                          }
                          return bounds(block);
                      }else{
                          // nerver come here
                          debugger;
                          return true;
                      }
                  }
              }

              for(var lx = 0; lx < chunkSize; lx++){
                  for(var lz = 0; lz < chunkSize; lz++){

                      var gx = chunkSize * chunkIndex.x + lx;
                      var gz = chunkSize * chunkIndex.z + lz;
                      var random = (simplex2(gx)(gz)(noise) + 1.0) * 0.5;

                      for(var ly = 0; ly < chunkSize; ly++){

                          var block = blocks[chunkSize * chunkSize * lx + chunkSize * ly + lz];

                          // global coordinates of the block
                          var px = ox + lx
                          var py = oy + ly
                          var pz = oz + lz

                          var store = block == waterBlock ? waterBlockStore :
                                      block == bushBlock ? transparentMaterialVertexData :
                                      standardMaterialBlockStore;

                          // nx, ny, nz: normal vector
                          function square(nx, ny, nz, u, bounds){
                              if( ! exists(px + nx, py + ny, pz + nz, bounds)){

                                  // horizontal extent vector of the plane
                                  var ax = ny
                                  var ay = nz
                                  var az = nx

                                  // vertical extent vector of the plane
                                  var bx = ay * nz - ay * nx
                                  var by = az * nx - ax * nz
                                  var bz = ax * ny - ay * nx

                                  // half-sized normal vector
                                  var dx = nx * 0.5
                                  var dy = ny * 0.5
                                  var dz = nz * 0.5

                                  // half-sized horizontal vector
                                  var sx = ax * 0.5
                                  var sy = ay * 0.5
                                  var sz = az * 0.5

                                  // half-sized vertical vector
                                  var tx = bx * 0.5
                                  var ty = by * 0.5
                                  var tz = bz * 0.5

                                  // center of the plane
                                  var vx = px + 0.5 + dx
                                  var vy = py + 0.5 + dy
                                  var vz = pz + 0.5 + dz

                                  // vertex index offset
                                  var offset = store.offset

                                  store.indices.push(offset + 0);
                                  store.indices.push(offset + 1);
                                  store.indices.push(offset + 2);
                                  store.indices.push(offset + 0);
                                  store.indices.push(offset + 2);
                                  store.indices.push(offset + 3);

                                  store.positions.push(vx - sx - tx)
                                  store.positions.push(vy - sy - ty)
                                  store.positions.push(vz - sz - tz)
                                  store.positions.push(vx + sx - tx)
                                  store.positions.push(vy + sy - ty)
                                  store.positions.push(vz + sz - tz)
                                  store.positions.push(vx + sx + tx)
                                  store.positions.push(vy + sy + ty)
                                  store.positions.push(vz + sz + tz)
                                  store.positions.push(vx - sx + tx)
                                  store.positions.push(vy - sy + ty)
                                  store.positions.push(vz - sz + tz)

                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);
                                  store.normals.push(nx);
                                  store.normals.push(ny);
                                  store.normals.push(nz);


                                  var add = 0.2
                                  var base = 0.4

                                  var brightness =
                                      (exists(px + nx - ax,      py + ny - ay,      pz + nz - az     , bounds) ? 0 : add) +
                                      (exists(px + nx      - bx, py + ny      - by, pz + nz      - bz, bounds) ? 0 : add) +
                                      (exists(px + nx - ax - bx, py + ny - ay - by, pz + nz - az - bz, bounds) ? 0 : add) + base;

                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);


                                  var brightness =
                                      (exists(px + nx + ax,      py + ny + ay,      pz + nz + az     , bounds) ? 0 : add) +
                                      (exists(px + nx      - bx, py + ny      - by, pz + nz      - bz, bounds) ? 0 : add) +
                                      (exists(px + nx + ax - bx, py + ny + ay - by, pz + nz + az - bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  var brightness =
                                      (exists(px + nx + ax,      py + ny + ay,      pz + nz + az     , bounds) ? 0 : add) +
                                      (exists(px + nx      + bx, py + ny      + by, pz + nz      + bz, bounds) ? 0 : add) +
                                      (exists(px + nx + ax + bx, py + ny + ay + by, pz + nz + az + bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  var brightness =
                                      (exists(px + nx - ax,      py + ny - ay,      pz + nz - az     , bounds) ? 0 : add) +
                                      (exists(px + nx      + bx, py + ny      + by, pz + nz      + bz, bounds) ? 0 : add) +
                                      (exists(px + nx - ax + bx, py + ny - ay + by, pz + nz - az + bz, bounds) ? 0 : add) + base;
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(brightness);
                                  store.colors.push(1.0);

                                  //u(store.uvs, CHIP_RATIO_1 * block);
                                  u(store.uvs, CHIP_RATIO_1 * block);

                                  store.offset += 4
                              }
                          }

                          function bush(){
                              var bushHeight = 1.0

                              var offset = store.offset

                              store.indices.push(offset + 0);
                              store.indices.push(offset + 1);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 0);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 3);

                              store.indices.push(offset + 2);
                              store.indices.push(offset + 1);
                              store.indices.push(offset + 0);
                              store.indices.push(offset + 3);
                              store.indices.push(offset + 2);
                              store.indices.push(offset + 0);

                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 1);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 3);

                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 1);
                              store.indices.push(offset + 4 + 0);
                              store.indices.push(offset + 4 + 3);
                              store.indices.push(offset + 4 + 2);
                              store.indices.push(offset + 4 + 0);


                              var rot = Math.PI * 2 * random;
                              //var rot = Math.PI * 0.20;
                              var rec = Math.PI * 0.5;
                              var w = 0.6;

                              var cx = px + 0.5;
                              var cz = pz + 0.5;

                              var x0 = cx + Math.cos(rot + rec * 0) * w;
                              var z0 = cz + Math.sin(rot + rec * 0) * w;

                              var x1 = cx + Math.cos(-rot + rec * 1) * w;
                              var z1 = cz + Math.sin(-rot + rec * 1) * w;

                              var x2 = cx + Math.cos(rot + rec * 2) * w;
                              var z2 = cz + Math.sin(rot + rec * 2) * w;

                              var x3 = cx + Math.cos(-rot + rec * 3) * w;
                              var z3 = cz + Math.sin(-rot + rec * 3) * w;

                              store.positions.push(x0)
                              store.positions.push(py)
                              store.positions.push(z0)

                              store.positions.push(x2)
                              store.positions.push(py)
                              store.positions.push(z2)

                              store.positions.push(x2)
                              store.positions.push(py + bushHeight)
                              store.positions.push(z2)

                              store.positions.push(x0)
                              store.positions.push(py + bushHeight)
                              store.positions.push(z0)

                              store.positions.push(x3)
                              store.positions.push(py)
                              store.positions.push(z1)

                              store.positions.push(x1)
                              store.positions.push(py)
                              store.positions.push(z3)

                              store.positions.push(x1)
                              store.positions.push(py + bushHeight)
                              store.positions.push(z3)

                              store.positions.push(x3)
                              store.positions.push(py + bushHeight)
                              store.positions.push(z1)

                              var nx = 0, ny = 0, nz = 1;
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);

                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);
                              store.normals.push(nx);
                              store.normals.push(ny);
                              store.normals.push(nz);

                              var r = 1, g = 1, b = 1;

                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);

                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);
                              store.colors.push(r);
                              store.colors.push(g);
                              store.colors.push(b);
                              store.colors.push(1.0);


                              store.uvs.push(0);
                              store.uvs.push(500 / 4096)
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(0);
                              store.uvs.push(0);
                              store.uvs.push(0);


                              store.uvs.push(0);
                              store.uvs.push(500 / 4096)
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(500 / 4096);
                              store.uvs.push(1000 / 4096);
                              store.uvs.push(0);
                              store.uvs.push(0);
                              store.uvs.push(0);

                              store.offset += 8
                          }

                          switch (block){
                              case airBlock:
                                  break;
                              case waterBlock:
                                  square(-1,  0,  0, nxUV, waterBounds);
                                  square( 1,  0,  0, pxUV, waterBounds);
                                  square( 0, -1,  0, nyUV, waterBounds);
                                  square( 0,  1,  0, pyUV, waterBounds);
                                  square( 0,  0, -1, nzUV, waterBounds);
                                  square( 0,  0,  1, pzUV, waterBounds);
                                  break;

                              case bushBlock:
                                  bush();
                                  break;

                              default:
                                  square(-1,  0,  0, nxUV, solidBounds);
                                  square( 1,  0,  0, pxUV, solidBounds);
                                  square( 0, -1,  0, nyUV, solidBounds);
                                  square( 0,  1,  0, pyUV, solidBounds);
                                  square( 0,  0, -1, nzUV, solidBounds);
                                  square( 0,  0,  1, pzUV, solidBounds);
                                  break;
                          }
                      }
                  }
              }

              return {
                  standardMaterialBlocks: standardMaterialBlockStore,
                  waterMaterialBlocks: waterBlockStore,
                  transparentMaterialVertexData: transparentMaterialVertexData
              }
          }
      }
  }
})(PS["Game.Cubbit.MeshBuilder"] = PS["Game.Cubbit.MeshBuilder"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.MeshBuilder"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_BoxelMap = PS["Game.Cubbit.BoxelMap"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_ChunkMap = PS["Game.Cubbit.ChunkMap"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Generation = PS["Game.Cubbit.Generation"];
  var Game_Cubbit_LocalIndex = PS["Game.Cubbit.LocalIndex"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_VertexData = PS["Graphics.Babylon.VertexData"];
  var PerlinNoise = PS["PerlinNoise"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];        
  var loadDefaultChunk = function (ref) {
      return function (index) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.readRef(ref)();
              var ci = Game_Cubbit_ChunkIndex.runChunkIndex(index);
              var v1 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
              if (v1 instanceof Data_Maybe.Just) {
                  return false;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  var v2 = Game_Cubbit_Generation.createBlockMap(v.terrain.noise)(index);
                  Game_Cubbit_Terrain.insertChunk({
                      x: ci.x, 
                      y: ci.y, 
                      z: ci.z, 
                      index: index, 
                      blocks: v2, 
                      standardMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value, 
                      waterMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value, 
                      transparentMaterialMesh: Game_Cubbit_Chunk.MeshNotLoaded.value
                  })(v.terrain)();
                  return true;
              };
              throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 65, column 5 - line 79, column 22: " + [ v1.constructor.name ]);
          };
      };
  };
  var generateMesh = function (index) {
      return function (verts) {
          return function (mat) {
              return function (scene) {
                  var rci = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                  return function __do() {
                      var v = Graphics_Babylon_Mesh.createMesh("terrain")(scene)();
                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Graphics_Babylon_VertexData.applyToMesh(v)(false))(Graphics_Babylon_VertexData.createVertexData(verts))();
                      Graphics_Babylon_AbstractMesh.setRenderingGroupId(Game_Cubbit_Constants.terrainRenderingGroup)(Graphics_Babylon_Mesh.meshToAbstractMesh(v))();
                      Graphics_Babylon_AbstractMesh.setReceiveShadows(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(v))();
                      Graphics_Babylon_AbstractMesh.setUseVertexColors(true)(Graphics_Babylon_Mesh.meshToAbstractMesh(v))();
                      Graphics_Babylon_AbstractMesh.setMaterial(mat)(Graphics_Babylon_Mesh.meshToAbstractMesh(v))();
                      Graphics_Babylon_AbstractMesh.setIsPickable(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v))();
                      return v;
                  };
              };
          };
      };
  };
  var createTerrainGeometryReferences = {
      chunkSize: Game_Cubbit_Constants.chunkSize, 
      blockTypes: Game_Cubbit_BlockType.blockTypes, 
      runChunkIndex: Game_Cubbit_ChunkIndex.runChunkIndex, 
      blockIndex: Game_Cubbit_BlockIndex.blockIndex, 
      globalIndexToChunkIndex: Game_Cubbit_Terrain.globalIndexToChunkIndex, 
      globalIndexToLocalIndex: Game_Cubbit_Terrain.globalIndexToLocalIndex, 
      simplex2: PerlinNoise.simplex2
  };
  var createTerrainGeometry = $foreign.createTerrainGeometryJS(createTerrainGeometryReferences);
  var updateChunkMesh = function (ref) {
      return function (materials) {
          return function (scene) {
              return function (chunkWithMesh) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      var v1 = createTerrainGeometry(v.terrain)({
                          index: chunkWithMesh.index, 
                          blocks: chunkWithMesh.blocks
                      });
                      var v2 = Game_Cubbit_Terrain.lookupChunk(chunkWithMesh.index)(v.terrain)();
                      (function () {
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return Game_Cubbit_Chunk.disposeChunk(v2.value0);
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 194, column 5 - line 196, column 49: " + [ v2.constructor.name ]);
                      })()();
                      var v3 = generateMesh(chunkWithMesh.index)(v1.standardMaterialBlocks)(materials.blockMaterial)(scene)();
                      var v4 = generateMesh(chunkWithMesh.index)(v1.waterMaterialBlocks)(materials.waterMaterial)(scene)();
                      var v5 = generateMesh(chunkWithMesh.index)(v1.transparentMaterialVertexData)(materials.bushMaterial)(scene)();
                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(chunkWithMesh.index);
                      var v6 = {
                          x: ci.x, 
                          y: ci.y, 
                          z: ci.z, 
                          index: chunkWithMesh.index, 
                          blocks: chunkWithMesh.blocks, 
                          standardMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v3), 
                          waterMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v4), 
                          transparentMaterialMesh: new Game_Cubbit_Chunk.MeshLoaded(v5)
                      };
                      return Game_Cubbit_Terrain.insertChunk(v6)(v.terrain)();
                  });
              };
          };
      };
  };
  var editBlock = function (ref) {
      return function (materials) {
          return function (scene) {
              return function (globalBlockIndex) {
                  return function (block) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef(ref)();
                          var editChunkIndex = Game_Cubbit_Terrain.globalIndexToChunkIndex(globalBlockIndex);
                          var v1 = Game_Cubbit_Terrain.lookupChunk(editChunkIndex)(v.terrain)();
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Unit.unit;
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                  var localIndex = Game_Cubbit_Terrain.globalIndexToLocalIndex(globalBlockIndex);
                                  var li = Game_Cubbit_LocalIndex.runLocalIndex(localIndex);
                                  return function __do() {
                                      updateChunkMesh(ref)(materials)(scene)((function () {
                                          var $41 = {};
                                          for (var $42 in v1.value0) {
                                              if (v1.value0.hasOwnProperty($42)) {
                                                  $41[$42] = v1.value0[$42];
                                              };
                                          };
                                          $41.blocks = Game_Cubbit_BoxelMap.insert(localIndex)(block)(v1.value0.blocks);
                                          return $41;
                                      })())();
                                      var eci = Game_Cubbit_ChunkIndex.runChunkIndex(editChunkIndex);
                                      var refreash = function (dx) {
                                          return function (dy) {
                                              return function (dz) {
                                                  return function __do() {
                                                      var v2 = Game_Cubbit_Terrain.lookupChunk(Game_Cubbit_ChunkIndex.chunkIndex(eci.x + dx | 0)(eci.y + dy | 0)(eci.z + dz | 0))(v.terrain)();
                                                      if (v2 instanceof Data_Maybe.Nothing) {
                                                          return Data_Unit.unit;
                                                      };
                                                      if (v2 instanceof Data_Maybe.Just) {
                                                          return updateChunkMesh(ref)(materials)(scene)(v2.value0)();
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 173, column 21 - line 175, column 88: " + [ v2.constructor.name ]);
                                                  };
                                              };
                                          };
                                      };
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.x === 0)(refreash(-1)(0)(0))();
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.x === Game_Cubbit_Constants.chunkSize - 1)(refreash(1)(0)(0))();
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.y === 0)(refreash(0)(-1)(0))();
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.y === Game_Cubbit_Constants.chunkSize - 1)(refreash(0)(1)(0))();
                                      Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.z === 0)(refreash(0)(0)(-1))();
                                      return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(li.z === Game_Cubbit_Constants.chunkSize - 1)(refreash(0)(0)(1))();
                                  };
                              })())();
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 160, column 5 - line 182, column 58: " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var createChunkMesh = function (ref) {
      return function (materials) {
          return function (scene) {
              return function (index) {
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      var i = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                      Control_Monad_Eff.forE(i.x - 1)(i.x + 2 | 0)(function (x) {
                          return Control_Monad_Eff.forE(i.y - 1)(i.y + 2 | 0)(function (y) {
                              return Control_Monad_Eff.forE(i.z - 1)(i.z + 2 | 0)(function (z) {
                                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(loadDefaultChunk(ref)(Game_Cubbit_ChunkIndex.chunkIndex(x)(y)(z)));
                              });
                          });
                      })();
                      var v1 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
                      var v2 = (function () {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Game_Cubbit_Generation.createBlockMap(v.terrain.noise)(index);
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return v1.value0.blocks;
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 94, column 15 - line 96, column 39: " + [ v1.constructor.name ]);
                      })();
                      var $53 = createTerrainGeometry(v.terrain)({
                          index: index, 
                          blocks: v2
                      });
                      var v3 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
                      (function () {
                          if (v3 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          if (v3 instanceof Data_Maybe.Just) {
                              return Game_Cubbit_Chunk.disposeChunk(v3.value0);
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 105, column 13 - line 107, column 57: " + [ v3.constructor.name ]);
                      })()();
                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                      var gen = function (vertices) {
                          return function (mat) {
                              return function (gruop) {
                                  var $57 = 0 < Data_Array.length(vertices.indices);
                                  if ($57) {
                                      return function __do() {
                                          var v4 = generateMesh(index)(vertices)(mat)(scene)();
                                          Graphics_Babylon_AbstractMesh.setRenderingGroupId(gruop)(Graphics_Babylon_Mesh.meshToAbstractMesh(v4))();
                                          return new Game_Cubbit_Chunk.MeshLoaded(v4);
                                      };
                                  };
                                  if (!$57) {
                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Game_Cubbit_Chunk.EmptyMeshLoaded.value);
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.MeshBuilder line 112, column 42 - line 118, column 45: " + [ $57.constructor.name ]);
                              };
                          };
                      };
                      var v4 = gen($53.standardMaterialBlocks)(materials.blockMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                      var v5 = gen($53.waterMaterialBlocks)(materials.waterMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                      var v6 = gen($53.transparentMaterialVertexData)(materials.bushMaterial)(Game_Cubbit_Constants.terrainRenderingGroup)();
                      Game_Cubbit_Terrain.insertChunk({
                          x: ci.x, 
                          y: ci.y, 
                          z: ci.z, 
                          index: index, 
                          blocks: v2, 
                          standardMaterialMesh: v4, 
                          waterMaterialMesh: v5, 
                          transparentMaterialMesh: v6
                      })(v.terrain)();
                      return 0 < (Data_Array.length($53.standardMaterialBlocks.indices) + Data_Array.length($53.waterMaterialBlocks.indices) | 0);
                  };
              };
          };
      };
  };
  exports["createChunkMesh"] = createChunkMesh;
  exports["createTerrainGeometry"] = createTerrainGeometry;
  exports["editBlock"] = editBlock;
  exports["loadDefaultChunk"] = loadDefaultChunk;
})(PS["Game.Cubbit.MeshBuilder"] = PS["Game.Cubbit.MeshBuilder"] || {});
(function(exports) {
    "use strict";

  exports.foreachBlocks = function(size){
      return function(cx){
          return function(cy){
              return function(cz){
                  return function(index){
                      return function(f){
                          return function(){
                              var cost = 0;
                              var limit = 100;

                              //console.log(JSON.stringify(index));

                              if( ! index){
                                  index = { size: size, cx: cx, cy: cy, cz: cz, i: 0, n: 0, m: 0 };
                              }else if(index.size != size || index.cx != cx || index.cy != cy || index.cz != cz){
                                  index.size = size;
                                  index.cx = cx;
                                  index.cy = cy;
                                  index.cz = cz;
                                  index.i = 0;
                                  index.n = -index.i;
                                  index.m = -index.i;
                              }

                              if(size <= index.i){
                                  index.i = 0;
                                  index.n = -index.i;
                                  index.m = -index.i;
                                  return index;
                              }else if(index.i < index.n){
                                  index.i += 1;
                                  index.n = -index.i;
                                  index.m = -index.i;
                                  return index;
                              }else if(index.i < index.m){
                                  index.n += 1;
                                  index.m = -index.i;
                                  return index;
                              }else{
                                  var i = index.i;
                                  var n = index.n;
                                  var m = index.m;

                                  cost += f(cx + i)(cy + n)(cz +  m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx - i)(cy + n)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + i)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy - i)(cz + m)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + m)(cz + i)() + 1;
                                  if(limit < cost ) return index;
                                  cost += f(cx + n)(cy + m)(cz - i)() + 1;
                                  if(limit < cost ) return index;

                                  index.m += 1;
                                  return index;
                              }



                          }
                      }
                  }
              }
          }
      }
  }


  exports.setTextContent = function(id){
      return function(text){
          return function(){
              document.getElementById(id).textContent = text;
          }
      }
  }
})(PS["Game.Cubbit.Update"] = PS["Game.Cubbit.Update"] || {});
(function(exports) {exports.getPosition = function(camera){
      return function(){
          return camera.position;
      }
  }                               // BABYLON.Camera.PERSPECTIVE_CAMERA

  exports.oRTHOGRAPHIC_CAMERA = 1; // BABYLON.Camera.ORTHOGRAPHIC_CAMERA

  exports.setMode = function(mode){
      return function(camera){
          return function(){
              camera.mode = mode;
          }
      }
  }

  exports.setOrthoLeft = function(orthoLeft){
      return function(camera){
          return function(){
              camera.orthoLeft = orthoLeft;
          }
      }
  }

  exports.setOrthoRight = function(orthoRight){
      return function(camera){
          return function(){
              camera.orthoRight = orthoRight;
          }
      }
  }

  exports.setOrthoTop = function(orthoTop){
      return function(camera){
          return function(){
              camera.orthoTop  = orthoTop;
          }
      }
  }

  exports.setOrthoBottom = function(orthoBottom){
      return function(camera){
          return function(){
              camera.orthoBottom = orthoBottom;
          }
      }
  }

  exports.setViewport = function(viewport){
      return function(camera){
          return function(){
              camera.viewport = viewport;
          }
      }
  }
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {exports.createViewport = function(x){
      return function(y){
          return function(w){
              return function(h){
                  return function(){
                      return new BABYLON.Viewport(x, y, w, h);
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.Viewport"] = PS["Graphics.Babylon.Viewport"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Viewport"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createViewport"] = $foreign.createViewport;
})(PS["Graphics.Babylon.Viewport"] = PS["Graphics.Babylon.Viewport"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Camera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Viewport = PS["Graphics.Babylon.Viewport"];
  exports["getPosition"] = $foreign.getPosition;
  exports["oRTHOGRAPHIC_CAMERA"] = $foreign.oRTHOGRAPHIC_CAMERA;
  exports["setMode"] = $foreign.setMode;
  exports["setOrthoBottom"] = $foreign.setOrthoBottom;
  exports["setOrthoLeft"] = $foreign.setOrthoLeft;
  exports["setOrthoRight"] = $foreign.setOrthoRight;
  exports["setOrthoTop"] = $foreign.setOrthoTop;
  exports["setViewport"] = $foreign.setViewport;
})(PS["Graphics.Babylon.Camera"] = PS["Graphics.Babylon.Camera"] || {});
(function(exports) {exports.createFreeCamera = function(id){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.FreeCamera(id, position, scene);
              }
          }
      }
  }

  exports.freeCameraToCamera = function(camera){
      return camera;
  }

  exports.freeCameraToTargetCamera = function(camera){
      return camera;
  }


  exports.attachControl = function(canvas){
      return function(noPreventDefault){
          return function(camera){
              return function(){
                  camera.attachControl(canvas, noPreventDefault);
              }
          }
      }
  }
})(PS["Graphics.Babylon.FreeCamera"] = PS["Graphics.Babylon.FreeCamera"] || {});
(function(exports) {exports.createTargetCamera = function(name){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.TargetCamera(name, position, scene);
              }
          }
      }
  }

  exports.targetCameraToCamera = function(camera){
      return camera;
  }

  exports.setSpeed = function(speed){
      return function(camera){
          return function(){
              camera.speed = speed;
          }
      }
  }

  exports.setTarget = function(position){
      return function(camera){
          return function(){
              camera.setTarget(position);
          }
      }
  }
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.TargetCamera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector2 = PS["Graphics.Babylon.Vector2"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["createTargetCamera"] = $foreign.createTargetCamera;
  exports["setSpeed"] = $foreign.setSpeed;
  exports["setTarget"] = $foreign.setTarget;
  exports["targetCameraToCamera"] = $foreign.targetCameraToCamera;
})(PS["Graphics.Babylon.TargetCamera"] = PS["Graphics.Babylon.TargetCamera"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.FreeCamera"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  exports["attachControl"] = $foreign.attachControl;
  exports["createFreeCamera"] = $foreign.createFreeCamera;
  exports["freeCameraToCamera"] = $foreign.freeCameraToCamera;
  exports["freeCameraToTargetCamera"] = $foreign.freeCameraToTargetCamera;
})(PS["Graphics.Babylon.FreeCamera"] = PS["Graphics.Babylon.FreeCamera"] || {});
(function(exports) {

  exports.getPickedPoint = function(info){
      return info.pickedPoint;
  }

  exports.getHit = function(info){
      return info.hit;
  }
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["getHit"] = $foreign.getHit;
  exports["getPickedPoint"] = $foreign.getPickedPoint;
})(PS["Graphics.Babylon.PickingInfo"] = PS["Graphics.Babylon.PickingInfo"] || {});
(function(exports) {exports.createScene = function(engine){
      return function(){
          return new BABYLON.Scene(engine);
      }
  }

  exports.render = function(scene){
      return function(){
          scene.render();
      }
  }

  exports.fOGMODE_EXP = BABYLON.Scene.FOGMODE_EXP;

  exports.setFogMode = function(fogMode){
      return function(scene){
          return function(){
              scene.fogMode = fogMode;
          }
      }
  }

  exports.setFogDensity = function(fogDensity){
      return function(scene){
          return function(){
              scene.fogDensity = fogDensity;
          }
      }
  }

  exports.setFogColor = function(fogColor){
      return function(scene){
          return function(){
              scene.fogColor = fogColor;
          }
      }
  }

  exports.setCollisionsEnabled = function(collisionsEnabled){
      return function(scene){
          return function(){
              scene.collisionsEnabled = collisionsEnabled;
          }
      }
  }

  exports.getDebugLayer = function(scene){
      return function(){
          return scene.debugLayer;
      }
  }

  exports.pick = function(x){
      return function(y){
          return function(predicate){
              return function(fastCheck){
                  return function(scene){
                      return function(){
                          return scene.pick(x, y, function(mesh){
                              return predicate(mesh)();
                          }, fastCheck);
                      }
                  }
              }
          }
      }
  }

  exports.setActiveCamera = function(camera){
      return function(scene){
          return function(){
              scene.activeCamera = camera;
          }
      }
  }

  exports.setActiveCameras = function(cameras){
      return function(scene){
          return function(){
              scene.activeCameras = cameras;
          }
      }
  }

  exports.beginAnimation = function(target){
      return function(from){
          return function(to){
              return function(loop){
                  return function(speedRatio){
                      return function(onAnimationEnd){
                          return function(animatable){
                              return function(scene){
                                  return function(){
                                      return scene.beginAnimation(target, from, to, loop, speedRatio, onAnimationEnd, animatable);
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {exports._show = function(showUI){
      return function(camera){
          return function(rootElement){
              return function(debugLayer){
                  return function(){
                      debugLayer.show(showUI, camera, rootElement);
                  }
              }
          }
      }
  }

  exports.hide = function(debugLayer){
      return function(){
          debugLayer.hide();
      }
  }
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.DebugLayer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];        
  var show = function (shoUI) {
      return function (camera) {
          return function (rootElement) {
              return function (debugLayer) {
                  return $foreign._show(shoUI)(camera)(Data_Nullable.toNullable(rootElement))(debugLayer);
              };
          };
      };
  };
  exports["show"] = show;
  exports["hide"] = $foreign.hide;
})(PS["Graphics.Babylon.DebugLayer"] = PS["Graphics.Babylon.DebugLayer"] || {});
(function(exports) {exports.createEngine = function(canvas){
      return function(antialias){
          return function(){
              return new BABYLON.Engine(canvas, antialias);
          }
      }
  }


  exports.runRenderLoop = function(callback){
      return function(engine){
          return function(){
              engine.runRenderLoop(callback);
          }
      }
  }
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Engine"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  exports["createEngine"] = $foreign.createEngine;
  exports["runRenderLoop"] = $foreign.runRenderLoop;
})(PS["Graphics.Babylon.Engine"] = PS["Graphics.Babylon.Engine"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Scene"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_DebugLayer = PS["Graphics.Babylon.DebugLayer"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  exports["beginAnimation"] = $foreign.beginAnimation;
  exports["createScene"] = $foreign.createScene;
  exports["fOGMODE_EXP"] = $foreign.fOGMODE_EXP;
  exports["getDebugLayer"] = $foreign.getDebugLayer;
  exports["pick"] = $foreign.pick;
  exports["render"] = $foreign.render;
  exports["setActiveCamera"] = $foreign.setActiveCamera;
  exports["setActiveCameras"] = $foreign.setActiveCameras;
  exports["setCollisionsEnabled"] = $foreign.setCollisionsEnabled;
  exports["setFogColor"] = $foreign.setFogColor;
  exports["setFogDensity"] = $foreign.setFogDensity;
  exports["setFogMode"] = $foreign.setFogMode;
})(PS["Graphics.Babylon.Scene"] = PS["Graphics.Babylon.Scene"] || {});
(function(exports) {exports.createShadowGenerator = function(size){
      return function(light){
          return function(){
              return new BABYLON.ShadowGenerator(size, light);
          }
      }
  }

  exports.getShadowMap = function(shadowGenerator){
      return function(){
          return shadowGenerator.getShadowMap();
      }
  }

  exports.setRenderList = function(renderList){
      return function(shadowMap){
          return function(){
              shadowMap.renderList = renderList.filter(function(mesh){
                  return (0 < mesh.getTotalVertices()) && ( ( ! mesh.skeleton) || mesh.skeleton.getTransformMatrices(mesh) );
              });
          }
      }
  }

  exports.setBias = function(bias){
      return function(generator){
          return function(){
              generator.bias = bias;
          }
      }
  }

  exports.setUsePoissonSampling = function(usePoissonSampling){
      return function(generator){
          return function(){
              generator.usePoissonSampling = usePoissonSampling;
          }
      }
  }
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {exports.createDirectionalLight = function(id){
      return function(direction){
          return function(scene){
              return function(){
                  return new BABYLON.DirectionalLight(id, direction, scene);
              }
          }
      }
  }


  exports.directionalLightToLight = function(light){
      return light;
  }
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {exports.setDiffuse = function(color){
      return function(light){
          return function(){
              light.diffuse = color;
          }
      }
  }
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Light"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  exports["setDiffuse"] = $foreign.setDiffuse;
})(PS["Graphics.Babylon.Light"] = PS["Graphics.Babylon.Light"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.DirectionalLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  exports["createDirectionalLight"] = $foreign.createDirectionalLight;
  exports["directionalLightToLight"] = $foreign.directionalLightToLight;
})(PS["Graphics.Babylon.DirectionalLight"] = PS["Graphics.Babylon.DirectionalLight"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.ShadowGenerator"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_DirectionalLight = PS["Graphics.Babylon.DirectionalLight"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  exports["createShadowGenerator"] = $foreign.createShadowGenerator;
  exports["getShadowMap"] = $foreign.getShadowMap;
  exports["setBias"] = $foreign.setBias;
  exports["setRenderList"] = $foreign.setRenderList;
  exports["setUsePoissonSampling"] = $foreign.setUsePoissonSampling;
})(PS["Graphics.Babylon.ShadowGenerator"] = PS["Graphics.Babylon.ShadowGenerator"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Game.Cubbit.Update"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockIndex = PS["Game.Cubbit.BlockIndex"];
  var Game_Cubbit_Chunk = PS["Game.Cubbit.Chunk"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_ChunkMap = PS["Game.Cubbit.ChunkMap"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_FreeCamera = PS["Graphics.Babylon.FreeCamera"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Node = PS["Graphics.Babylon.Node"];
  var Graphics_Babylon_PickingInfo = PS["Graphics.Babylon.PickingInfo"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_ShadowGenerator = PS["Graphics.Babylon.ShadowGenerator"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var pickBlock = function (scene) {
      return function (cursor) {
          return function (v) {
              return function (screenX) {
                  return function (screenY) {
                      var predicate = function (mesh) {
                          var name = Graphics_Babylon_Node.getName(Graphics_Babylon_AbstractMesh.abstractMeshToNode(mesh));
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(name !== "cursor");
                      };
                      return function __do() {
                          var v1 = Graphics_Babylon_Scene.pick(screenX)(screenY)(predicate)(false)(scene)();
                          var pickup = (function () {
                              var point = Graphics_Babylon_PickingInfo.getPickedPoint(v1);
                              return function __do() {
                                  var v2 = Graphics_Babylon_Vector3.runVector3(point)();
                                  var dx = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v2.x - $$Math.round(v2.x));
                                  var dy = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v2.y - $$Math.round(v2.y));
                                  var dz = Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v2.z - $$Math.round(v2.z));
                                  var minDelta = Data_Ord.min(Data_Ord.ordNumber)(dx)(Data_Ord.min(Data_Ord.ordNumber)(dy)(dz));
                                  var lookupBlock$prime = function (x) {
                                      return function (y) {
                                          return function (z) {
                                              return Game_Cubbit_Terrain.lookupBlockByVec({
                                                  x: x, 
                                                  y: y, 
                                                  z: z
                                              })(v.terrain);
                                          };
                                      };
                                  };
                                  var putCursor = function (bi) {
                                      var rbi = Game_Cubbit_BlockIndex.runBlockIndex(bi);
                                      return function __do() {
                                          var v3 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                          return Graphics_Babylon_Mesh.setPosition(v3)(cursor)();
                                      };
                                  };
                                  if (v.mode instanceof Game_Cubbit_Types.Put) {
                                      var $42 = minDelta === dx;
                                      if ($42) {
                                          var v3 = lookupBlock$prime(v2.x + 0.5)(v2.y)(v2.z)();
                                          var v4 = lookupBlock$prime(v2.x - 0.5)(v2.y)(v2.z)();
                                          if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x - 0.5)(v2.y)(v2.z));
                                          };
                                          if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x + 0.5)(v2.y)(v2.z));
                                          };
                                          return Data_Maybe.Nothing.value;
                                      };
                                      if (!$42) {
                                          var $49 = minDelta === dy;
                                          if ($49) {
                                              var v3 = lookupBlock$prime(v2.x)(v2.y + 0.5)(v2.z)();
                                              var v4 = lookupBlock$prime(v2.x)(v2.y - 0.5)(v2.z)();
                                              if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y - 0.5)(v2.z));
                                              };
                                              if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y + 0.5)(v2.z));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          if (!$49) {
                                              var v3 = lookupBlock$prime(v2.x)(v2.y)(v2.z + 0.5)();
                                              var v4 = lookupBlock$prime(v2.x)(v2.y)(v2.z - 0.5)();
                                              if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y)(v2.z - 0.5));
                                              };
                                              if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y)(v2.z + 0.5));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 86, column 30 - line 99, column 57: " + [ $49.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 79, column 24 - line 99, column 57: " + [ $42.constructor.name ]);
                                  };
                                  if (v.mode instanceof Game_Cubbit_Types.Remove) {
                                      var $62 = minDelta === dx;
                                      if ($62) {
                                          var v3 = lookupBlock$prime(v2.x + 0.5)(v2.y)(v2.z)();
                                          var v4 = lookupBlock$prime(v2.x - 0.5)(v2.y)(v2.z)();
                                          if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x + 0.5)(v2.y)(v2.z));
                                          };
                                          if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                              return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x - 0.5)(v2.y)(v2.z));
                                          };
                                          return Data_Maybe.Nothing.value;
                                      };
                                      if (!$62) {
                                          var $69 = minDelta === dy;
                                          if ($69) {
                                              var v3 = lookupBlock$prime(v2.x)(v2.y + 0.5)(v2.z)();
                                              var v4 = lookupBlock$prime(v2.x)(v2.y - 0.5)(v2.z)();
                                              if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y + 0.5)(v2.z));
                                              };
                                              if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y - 0.5)(v2.z));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          if (!$69) {
                                              var v3 = lookupBlock$prime(v2.x)(v2.y)(v2.z + 0.5)();
                                              var v4 = lookupBlock$prime(v2.x)(v2.y)(v2.z - 0.5)();
                                              if (v3 instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Nothing) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y)(v2.z + 0.5));
                                              };
                                              if (v3 instanceof Data_Maybe.Nothing && v4 instanceof Data_Maybe.Just) {
                                                  return Data_Maybe.Just.create(Game_Cubbit_Terrain.globalPositionToGlobalIndex(v2.x)(v2.y)(v2.z - 0.5));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 108, column 30 - line 121, column 57: " + [ $69.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 101, column 27 - line 121, column 57: " + [ $62.constructor.name ]);
                                  };
                                  if (v.mode instanceof Game_Cubbit_Types.Move) {
                                      return Data_Maybe.Nothing.value;
                                  };
                                  throw new Error("Failed pattern match at Game.Cubbit.Update line 78, column 13 - line 123, column 37: " + [ v.mode.constructor.name ]);
                              };
                          })();
                          var $82 = Graphics_Babylon_PickingInfo.getHit(v1);
                          if ($82) {
                              return pickup();
                          };
                          if (!$82) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Game.Cubbit.Update line 125, column 5 - line 125, column 56: " + [ $82.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var update = function (ref) {
      return function (scene) {
          return function (materials) {
              return function (shadowMap) {
                  return function (cursor) {
                      return function (camera) {
                          return function (options) {
                              return function __do() {
                                  Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                      var $84 = {};
                                      for (var $85 in v) {
                                          if (v.hasOwnProperty($85)) {
                                              $84[$85] = v[$85];
                                          };
                                      };
                                      $84.totalFrames = v.totalFrames + 1 | 0;
                                      return $84;
                                  })();
                                  var v = Control_Monad_Eff_Ref.readRef(ref)();
                                  var v1 = Game_Cubbit_ChunkMap.slice(0)(125)(v.terrain.map)();
                                  var v2 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Camera.getPosition(Graphics_Babylon_FreeCamera.freeCameraToCamera(camera)))(Graphics_Babylon_Vector3.runVector3)();
                                  var cameraPositionChunkIndex = Game_Cubbit_Terrain.globalPositionToChunkIndex(v2.x)(v2.y)(v2.z);
                                  (function () {
                                      if (v.mode instanceof Game_Cubbit_Types.Move) {
                                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                                      };
                                      return function __do() {
                                          var v3 = pickBlock(scene)(cursor)(v)(v.mousePosition.x)(v.mousePosition.y)();
                                          if (v3 instanceof Data_Maybe.Nothing) {
                                              return Data_Unit.unit;
                                          };
                                          if (v3 instanceof Data_Maybe.Just) {
                                              var rbi = Game_Cubbit_BlockIndex.runBlockIndex(v3.value0);
                                              var v4 = Graphics_Babylon_Vector3.createVector3(Data_Int.toNumber(rbi.x) + 0.5)(Data_Int.toNumber(rbi.y) + 0.5)(Data_Int.toNumber(rbi.z) + 0.5)();
                                              Graphics_Babylon_Mesh.setPosition(v4)(cursor)();
                                              return $foreign.setTextContent("cursor-position")(Data_Show.show(Data_Show.showInt)(rbi.x) + (", " + (Data_Show.show(Data_Show.showInt)(rbi.y) + (", " + Data_Show.show(Data_Show.showInt)(rbi.z)))))();
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.Update line 147, column 21 - line 154, column 118: " + [ v3.constructor.name ]);
                                      };
                                  })()();
                                  (function () {
                                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                      return function __do() {
                                          var v3 = Game_Cubbit_ChunkMap.filterNeighbors(options.shadowDisplayRange)(ci.x)(ci.y)(ci.z)(v.terrain.map)();
                                          var meshes = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(function (chunk) {
                                              if (chunk.standardMaterialMesh instanceof Game_Cubbit_Chunk.MeshLoaded) {
                                                  return new Data_Maybe.Just(Graphics_Babylon_Mesh.meshToAbstractMesh(chunk.standardMaterialMesh.value0));
                                              };
                                              return Data_Maybe.Nothing.value;
                                          })(v3));
                                          return Graphics_Babylon_ShadowGenerator.setRenderList(Data_Semigroup.append(Data_Semigroup.semigroupArray)(meshes)(v.playerMeshes))(shadowMap)();
                                      };
                                  })()();
                                  (function __do() {
                                      var v3 = Control_Monad_Eff_Ref.newRef(0)();
                                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                      var loadAndGenerateChunk = function (index) {
                                          var ci1 = Game_Cubbit_ChunkIndex.runChunkIndex(index);
                                          return Game_Cubbit_MeshBuilder.createChunkMesh(ref)(materials)(scene)(index);
                                      };
                                      var v4 = $foreign.foreachBlocks(options.loadDistance)(ci.x)(ci.y)(ci.z)(v.updateIndex)(function (x) {
                                          return function (y) {
                                              return function (z) {
                                                  var index = Game_Cubbit_ChunkIndex.chunkIndex(x)(y)(z);
                                                  return function __do() {
                                                      var v4 = Game_Cubbit_Terrain.lookupChunk(index)(v.terrain)();
                                                      if (v4 instanceof Data_Maybe.Just) {
                                                          if (v4.value0.standardMaterialMesh instanceof Game_Cubbit_Chunk.MeshNotLoaded) {
                                                              loadAndGenerateChunk(index)();
                                                              return 100;
                                                          };
                                                          return 1;
                                                      };
                                                      if (v4 instanceof Data_Maybe.Nothing) {
                                                          loadAndGenerateChunk(index)();
                                                          return 100;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 190, column 17 - line 202, column 13: " + [ v4.constructor.name ]);
                                                  };
                                              };
                                          };
                                      })();
                                      return Control_Monad_Eff_Ref.modifyRef(ref)(function (v5) {
                                          var $105 = {};
                                          for (var $106 in v5) {
                                              if (v5.hasOwnProperty($106)) {
                                                  $105[$106] = v5[$106];
                                              };
                                          };
                                          $105.updateIndex = Data_Nullable.toNullable(new Data_Maybe.Just(v4));
                                          return $105;
                                      })();
                                  })();
                                  (function () {
                                      var ci = Game_Cubbit_ChunkIndex.runChunkIndex(cameraPositionChunkIndex);
                                      return function __do() {
                                          var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                          var v4 = Game_Cubbit_ChunkMap.size(v3.terrain.map)();
                                          return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(options.maximumLoadedChunks < v4)(function __do() {
                                              var v5 = Game_Cubbit_ChunkMap.getSortedChunks(ci.x)(ci.y)(ci.z)(v3.terrain.map)();
                                              var sliced = Data_Array.drop(options.maximumLoadedChunks)(v5);
                                              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(Data_Array.take(10)(sliced))(function (chunkWithMesh) {
                                                  return function __do() {
                                                      Game_Cubbit_Chunk.disposeChunk(chunkWithMesh)();
                                                      return Game_Cubbit_ChunkMap["delete"](chunkWithMesh.index)(v3.terrain.map)();
                                                  };
                                              })();
                                          })();
                                      };
                                  })()();
                                  var v3 = Control_Monad_Eff_Ref.readRef(ref)();
                                  var next = {
                                      x: v.position.x + v.velocity.x, 
                                      y: v.position.y + v.velocity.y, 
                                      z: v.position.z + v.velocity.z
                                  };
                                  var globalIndex = Game_Cubbit_BlockIndex.runBlockIndex(Game_Cubbit_Terrain.globalPositionToGlobalIndex(next.x)(next.y)(next.z));
                                  var v4 = Game_Cubbit_Terrain.lookupBlockByVec(next)(v3.terrain)();
                                  var st$prime = (function () {
                                      if (v4 instanceof Data_Maybe.Nothing) {
                                          var $118 = {};
                                          for (var $119 in v3) {
                                              if (v3.hasOwnProperty($119)) {
                                                  $118[$119] = v3[$119];
                                              };
                                          };
                                          $118.position = next;
                                          $118.velocity = (function () {
                                              var $115 = {};
                                              for (var $116 in v3.velocity) {
                                                  if (v3.velocity.hasOwnProperty($116)) {
                                                      $115[$116] = v3.velocity[$116];
                                                  };
                                              };
                                              $115.y = v.velocity.y - 1.0e-2;
                                              return $115;
                                          })();
                                          return $118;
                                      };
                                      if (v4 instanceof Data_Maybe.Just) {
                                          var $121 = {};
                                          for (var $122 in v3) {
                                              if (v3.hasOwnProperty($122)) {
                                                  $121[$122] = v3[$122];
                                              };
                                          };
                                          $121.position = {
                                              x: v3.position.x, 
                                              y: Data_Int.toNumber(globalIndex.y) + 1.001, 
                                              z: v3.position.z
                                          };
                                          $121.velocity = {
                                              x: 0.0, 
                                              y: 0.0, 
                                              z: 0.0
                                          };
                                          return $121;
                                      };
                                      throw new Error("Failed pattern match at Game.Cubbit.Update line 233, column 23 - line 245, column 30: " + [ v4.constructor.name ]);
                                  })();
                                  Control_Monad_Eff_Ref.writeRef(ref)(st$prime)();
                                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(v3.playerMeshes)(function (mesh) {
                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                          var v5 = Graphics_Babylon_Vector3.createVector3(st$prime.position.x)(st$prime.position.y)(st$prime.position.z)();
                                          return Graphics_Babylon_AbstractMesh.setPosition(v5)(mesh)();
                                      });
                                  })();
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["pickBlock"] = pickBlock;
  exports["update"] = update;
})(PS["Game.Cubbit.Update"] = PS["Game.Cubbit.Update"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_BlockType = PS["Game.Cubbit.BlockType"];
  var Game_Cubbit_Event = PS["Game.Cubbit.Event"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Game_Cubbit_Update = PS["Game.Cubbit.Update"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_DebugLayer = PS["Graphics.Babylon.DebugLayer"];
  var Graphics_Babylon_FreeCamera = PS["Graphics.Babylon.FreeCamera"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var initializeUI = function (canvasGL) {
      return function (canvas2d) {
          return function (ref) {
              return function (cursor) {
                  return function (camera) {
                      return function (miniMapCamera) {
                          return function (scene) {
                              return function (materials) {
                                  return function __do() {
                                      Game_Cubbit_Event.onMouseMove(function (e) {
                                          return Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                              var $10 = {};
                                              for (var $11 in v) {
                                                  if (v.hasOwnProperty($11)) {
                                                      $10[$11] = v[$11];
                                                  };
                                              };
                                              $10.mousePosition = {
                                                  x: e.offsetX, 
                                                  y: e.offsetY
                                              };
                                              return $10;
                                          });
                                      })();
                                      var prepareModeButton = function (id) {
                                          return function (value) {
                                              return Game_Cubbit_Event.onButtonClick(id)(function __do() {
                                                  Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                                      var $14 = {};
                                                      for (var $15 in v) {
                                                          if (v.hasOwnProperty($15)) {
                                                              $14[$15] = v[$15];
                                                          };
                                                      };
                                                      $14.mode = value;
                                                      return $14;
                                                  })();
                                                  return Graphics_Babylon_AbstractMesh.setIsVisible((function () {
                                                      if (value instanceof Game_Cubbit_Types.Put) {
                                                          return true;
                                                      };
                                                      if (value instanceof Game_Cubbit_Types.Remove) {
                                                          return true;
                                                      };
                                                      if (value instanceof Game_Cubbit_Types.Move) {
                                                          return false;
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.UI line 63, column 27 - line 66, column 30: " + [ value.constructor.name ]);
                                                  })())(Graphics_Babylon_Mesh.meshToAbstractMesh(cursor))();
                                              });
                                          };
                                      };
                                      prepareModeButton("move")(Game_Cubbit_Types.Move.value)();
                                      prepareModeButton("add")(Game_Cubbit_Types.Put.value)();
                                      prepareModeButton("remove")(Game_Cubbit_Types.Remove.value)();
                                      Game_Cubbit_Event.onButtonClick("position")(Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                          var $19 = {};
                                          for (var $20 in v) {
                                              if (v.hasOwnProperty($20)) {
                                                  $19[$20] = v[$20];
                                              };
                                          };
                                          $19.position = {
                                              x: 0.0, 
                                              y: 30.0, 
                                              z: 0.0
                                          };
                                          return $19;
                                      })))();
                                      Game_Cubbit_Event.onButtonClick("minimap")(function __do() {
                                          Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                              var $23 = {};
                                              for (var $24 in v) {
                                                  if (v.hasOwnProperty($24)) {
                                                      $23[$24] = v[$24];
                                                  };
                                              };
                                              $23.minimap = !v.minimap;
                                              return $23;
                                          })();
                                          var v = Control_Monad_Eff_Ref.readRef(ref)();
                                          if (v.minimap) {
                                              return Graphics_Babylon_Scene.setActiveCameras([ Graphics_Babylon_FreeCamera.freeCameraToCamera(camera), Graphics_Babylon_TargetCamera.targetCameraToCamera(miniMapCamera) ])(scene)();
                                          };
                                          if (!v.minimap) {
                                              return Graphics_Babylon_Scene.setActiveCameras([ Graphics_Babylon_FreeCamera.freeCameraToCamera(camera) ])(scene)();
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.UI line 81, column 9 - line 83, column 68: " + [ v.minimap.constructor.name ]);
                                      })();
                                      Game_Cubbit_Event.onButtonClick("debuglayer")(function __do() {
                                          Control_Monad_Eff_Ref.modifyRef(ref)(function (v) {
                                              var $29 = {};
                                              for (var $30 in v) {
                                                  if (v.hasOwnProperty($30)) {
                                                      $29[$30] = v[$30];
                                                  };
                                              };
                                              $29.debugLayer = !v.debugLayer;
                                              return $29;
                                          })();
                                          var v = Control_Monad_Eff_Ref.readRef(ref)();
                                          if (v.debugLayer) {
                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(scene))(Graphics_Babylon_DebugLayer.show(true)(true)(Data_Maybe.Nothing.value))();
                                          };
                                          if (!v.debugLayer) {
                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Graphics_Babylon_Scene.getDebugLayer(scene))(Graphics_Babylon_DebugLayer.hide)();
                                          };
                                          throw new Error("Failed pattern match at Game.Cubbit.UI line 88, column 9 - line 90, column 57: " + [ v.debugLayer.constructor.name ]);
                                      })();
                                      return Game_Cubbit_Event.onMouseClick(function (e) {
                                          return function __do() {
                                              var v = Control_Monad_Eff_Ref.readRef(ref)();
                                              var put = function (block) {
                                                  return function __do() {
                                                      var v1 = Game_Cubbit_Update.pickBlock(scene)(cursor)(v)(v.mousePosition.x)(v.mousePosition.y)();
                                                      if (v1 instanceof Data_Maybe.Nothing) {
                                                          return Data_Unit.unit;
                                                      };
                                                      if (v1 instanceof Data_Maybe.Just) {
                                                          return Game_Cubbit_MeshBuilder.editBlock(ref)(materials)(scene)(v1.value0)(block)();
                                                      };
                                                      throw new Error("Failed pattern match at Game.Cubbit.UI line 98, column 17 - line 100, column 86: " + [ v1.constructor.name ]);
                                                  };
                                              };
                                              if (v.mode instanceof Game_Cubbit_Types.Put) {
                                                  return put(Game_Cubbit_BlockType.dirtBlock)();
                                              };
                                              if (v.mode instanceof Game_Cubbit_Types.Remove) {
                                                  return put(Game_Cubbit_BlockType.airBlock)();
                                              };
                                              if (v.mode instanceof Game_Cubbit_Types.Move) {
                                                  return Data_Unit.unit;
                                              };
                                              throw new Error("Failed pattern match at Game.Cubbit.UI line 102, column 9 - line 105, column 26: " + [ v.mode.constructor.name ]);
                                          };
                                      })();
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["initializeUI"] = initializeUI;
})(PS["Game.Cubbit.UI"] = PS["Game.Cubbit.UI"] || {});
(function(exports) {exports.createCubeTexture = function(path){
      return function(scene){
          return function(){

              // HACK
              ///BABYLON.CubeTexture.prototype.getTextureMatrix = function(){
              //    return this._textureMatrix;
              //}


              var tex = new BABYLON.CubeTexture(path, scene);



              return tex;
          }
      }
  }

  exports.cubeTextureToTexture = function(tex){
      return tex;
  }
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.CubeTexture"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  exports["createCubeTexture"] = $foreign.createCubeTexture;
  exports["cubeTextureToTexture"] = $foreign.cubeTextureToTexture;
})(PS["Graphics.Babylon.CubeTexture"] = PS["Graphics.Babylon.CubeTexture"] || {});
(function(exports) {exports.createHemisphericLight = function(id){
      return function(position){
          return function(scene){
              return function(){
                  return new BABYLON.HemisphericLight(id, position, scene);
              }
          }
      }
  }


  exports.hemisphericLightToLight = function(light){
      return light;
  }
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.HemisphericLight"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  exports["createHemisphericLight"] = $foreign.createHemisphericLight;
  exports["hemisphericLightToLight"] = $foreign.hemisphericLightToLight;
})(PS["Graphics.Babylon.HemisphericLight"] = PS["Graphics.Babylon.HemisphericLight"] || {});
(function(exports) {exports._loadMesh = function(meshesNames){
      return function(rootUrl){
          return function(sceneFilename){
              return function(scene){
                  return function(onsuccess){
                      return function(progressCallBack){
                          return function(onerror){
                              return function(){
                                  BABYLON.SceneLoader.ImportMesh(
                                      meshesNames, rootUrl, sceneFilename, scene,
                                      function(result){
                                          onsuccess(result)()
                                      },
                                      function(e){
                                          progressCallBack(e)()
                                      },
                                      function(e){
                                          onerror(e)()
                                      }
                                  );
                              }
                          }
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.SceneLoader.Aff"] = PS["Graphics.Babylon.SceneLoader.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.SceneLoader.Aff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];
  var Graphics_Babylon_SceneLoader = PS["Graphics.Babylon.SceneLoader"];        
  var loadMesh = function (meshesNames) {
      return function (rootUrl) {
          return function (sceneFilename) {
              return function (scene) {
                  return function (progressCallBack) {
                      return Control_Monad_Aff.makeAff(function (reject) {
                          return function (resolve) {
                              return $foreign._loadMesh(meshesNames)(rootUrl)(sceneFilename)(scene)(resolve)(progressCallBack)(reject);
                          };
                      });
                  };
              };
          };
      };
  };
  exports["loadMesh"] = loadMesh;
})(PS["Graphics.Babylon.SceneLoader.Aff"] = PS["Graphics.Babylon.SceneLoader.Aff"] || {});
(function(exports) {exports._loadTexture = function(path){
      return function(scene){
          return function(options){
              return function(reject){
                  return function(resolve){
                      return function(){
                          var texture = new BABYLON.Texture(path, scene, options.noMipmap, options.invertY, options.samplingMode,
                              function(){
                                  options.onLoad({})();
                                  resolve(texture)();
                              },
                              function(){
                                  options.onError({})();
                                  reject(new Error())();
                              })
                           ;
                      }
                  }
              }
          }
      }
  }
})(PS["Graphics.Babylon.Texture.Aff"] = PS["Graphics.Babylon.Texture.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Babylon.Texture.Aff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Types = PS["Graphics.Babylon.Types"];        
  var loadTexture = function (src) {
      return function (scene) {
          return function (options) {
              return Control_Monad_Aff.makeAff($foreign._loadTexture(src)(scene)(options));
          };
      };
  };
  exports["loadTexture"] = loadTexture;
})(PS["Graphics.Babylon.Texture.Aff"] = PS["Graphics.Babylon.Texture.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_ChunkIndex = PS["Game.Cubbit.ChunkIndex"];
  var Game_Cubbit_Constants = PS["Game.Cubbit.Constants"];
  var Game_Cubbit_Event = PS["Game.Cubbit.Event"];
  var Game_Cubbit_Materials = PS["Game.Cubbit.Materials"];
  var Game_Cubbit_MeshBuilder = PS["Game.Cubbit.MeshBuilder"];
  var Game_Cubbit_Terrain = PS["Game.Cubbit.Terrain"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];
  var Game_Cubbit_UI = PS["Game.Cubbit.UI"];
  var Game_Cubbit_Update = PS["Game.Cubbit.Update"];
  var Graphics_Babylon = PS["Graphics.Babylon"];
  var Graphics_Babylon_AbstractMesh = PS["Graphics.Babylon.AbstractMesh"];
  var Graphics_Babylon_Camera = PS["Graphics.Babylon.Camera"];
  var Graphics_Babylon_Color3 = PS["Graphics.Babylon.Color3"];
  var Graphics_Babylon_CubeTexture = PS["Graphics.Babylon.CubeTexture"];
  var Graphics_Babylon_DirectionalLight = PS["Graphics.Babylon.DirectionalLight"];
  var Graphics_Babylon_Engine = PS["Graphics.Babylon.Engine"];
  var Graphics_Babylon_FreeCamera = PS["Graphics.Babylon.FreeCamera"];
  var Graphics_Babylon_HemisphericLight = PS["Graphics.Babylon.HemisphericLight"];
  var Graphics_Babylon_Light = PS["Graphics.Babylon.Light"];
  var Graphics_Babylon_Material = PS["Graphics.Babylon.Material"];
  var Graphics_Babylon_Mesh = PS["Graphics.Babylon.Mesh"];
  var Graphics_Babylon_Scene = PS["Graphics.Babylon.Scene"];
  var Graphics_Babylon_SceneLoader = PS["Graphics.Babylon.SceneLoader"];
  var Graphics_Babylon_SceneLoader_Aff = PS["Graphics.Babylon.SceneLoader.Aff"];
  var Graphics_Babylon_ShadowGenerator = PS["Graphics.Babylon.ShadowGenerator"];
  var Graphics_Babylon_StandardMaterial = PS["Graphics.Babylon.StandardMaterial"];
  var Graphics_Babylon_TargetCamera = PS["Graphics.Babylon.TargetCamera"];
  var Graphics_Babylon_Texture = PS["Graphics.Babylon.Texture"];
  var Graphics_Babylon_Texture_Aff = PS["Graphics.Babylon.Texture.Aff"];
  var Graphics_Babylon_Vector3 = PS["Graphics.Babylon.Vector3"];
  var Graphics_Babylon_Viewport = PS["Graphics.Babylon.Viewport"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];        
  var readOptions = function (value) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("loadDistance")(value))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("fogDensity")(value))(function (v1) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("maximumLoadedChunks")(value))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("shadowDisplayRange")(value))(function (v3) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.intIsForeign)(Data_Foreign_Index.indexString)("shadowMapSize")(value))(function (v4) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Class.readProp(Data_Foreign_Class.booleanIsForeign)(Data_Foreign_Index.indexString)("enableWaterMaterial")(value))(function (v5) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                                  loadDistance: v, 
                                  fogDensity: v1, 
                                  maximumLoadedChunks: v2, 
                                  shadowDisplayRange: v3, 
                                  shadowMapSize: v4, 
                                  enableWaterMaterial: v5
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var runApp = function (canvasGL) {
      return function (canvas2d) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.errorShow(Control_Monad_Eff_Exception.showError))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableForeign)("options.json"))(function (v) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)((function () {
                  var $56 = Control_Monad_Except.runExcept(readOptions(v.response));
                  if ($56 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadErrorAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))($56.value0)));
                  };
                  if ($56 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)($56.value0);
                  };
                  throw new Error("Failed pattern match at Game.Cubbit.Main line 81, column 16 - line 83, column 30: " + [ $56.constructor.name ]);
              })())(function (v1) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Graphics_Babylon_Engine.createEngine(canvasGL)(true)))(function (v2) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                          var v3 = Graphics_Babylon_Scene.createScene(v2)();
                          Graphics_Babylon_Scene.setFogMode(Graphics_Babylon_Scene.fOGMODE_EXP)(v3)();
                          Graphics_Babylon_Scene.setFogDensity(v1.fogDensity)(v3)();
                          var v4 = Graphics_Babylon_Color3.createColor3(155.0 / 255.0)(181.0 / 255.0)(230.0 / 255.0)();
                          Graphics_Babylon_Scene.setFogColor(v4)(v3)();
                          Graphics_Babylon_Scene.setCollisionsEnabled(true)(v3)();
                          return v3;
                      }))(function (v3) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Texture_Aff.loadTexture("./texture.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function (v4) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Texture_Aff.loadTexture("./alpha.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function (v5) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_Texture_Aff.loadTexture("./alice/texture.png")(v3)(Graphics_Babylon_Texture.defaultCreateTextureOptions))(function () {
                                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Graphics_Babylon_SceneLoader_Aff.loadMesh("")("./alice/")("alice.babylon")(v3)(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)))(function (v6) {
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                              var v7 = (function __do() {
                                                  var v7 = Graphics_Babylon_Vector3.createVector3(0.0)(30.0)(0.0)();
                                                  var v8 = Graphics_Babylon_TargetCamera.createTargetCamera("minimap-camera")(v7)(v3)();
                                                  var v9 = Graphics_Babylon_Vector3.createVector3(0.0)(0.0)(0.0)();
                                                  Graphics_Babylon_TargetCamera.setTarget(v9)(v8)();
                                                  Graphics_Babylon_Camera.setMode(Graphics_Babylon_Camera.oRTHOGRAPHIC_CAMERA)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  Graphics_Babylon_Camera.setOrthoLeft(-200.0)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  Graphics_Babylon_Camera.setOrthoRight(200.0)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  Graphics_Babylon_Camera.setOrthoTop(200.0)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  Graphics_Babylon_Camera.setOrthoBottom(-200.0)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  var v10 = Graphics_Babylon_Viewport.createViewport(0.75)(0.65)(0.24)(0.32)();
                                                  Graphics_Babylon_Camera.setViewport(v10)(Graphics_Babylon_TargetCamera.targetCameraToCamera(v8))();
                                                  return v8;
                                              })();
                                              var v8 = (function __do() {
                                                  var v8 = Graphics_Babylon_Vector3.createVector3(10.0)(20.0)(10.0)();
                                                  var v9 = Graphics_Babylon_FreeCamera.createFreeCamera("free-camera")(v8)(v3)();
                                                  var v10 = Graphics_Babylon_Vector3.createVector3(0.0)(8.0)(0.0)();
                                                  Graphics_Babylon_TargetCamera.setTarget(v10)(Graphics_Babylon_FreeCamera.freeCameraToTargetCamera(v9))();
                                                  Graphics_Babylon_FreeCamera.attachControl(canvasGL)(false)(v9)();
                                                  Graphics_Babylon_TargetCamera.setSpeed(0.3)(Graphics_Babylon_FreeCamera.freeCameraToTargetCamera(v9))();
                                                  return v9;
                                              })();
                                              Graphics_Babylon_Scene.setActiveCameras([ Graphics_Babylon_FreeCamera.freeCameraToCamera(v8) ])(v3)();
                                              Graphics_Babylon_Scene.setActiveCamera(Graphics_Babylon_FreeCamera.freeCameraToCamera(v8))(v3)();
                                              (function __do() {
                                                  var v9 = Graphics_Babylon_Vector3.createVector3(0.0)(1.0)(0.0)();
                                                  var v10 = Graphics_Babylon_HemisphericLight.createHemisphericLight("Hemi0")(v9)(v3)();
                                                  var v11 = Graphics_Babylon_Color3.createColor3(0.6)(0.6)(0.6)();
                                                  return Graphics_Babylon_Light.setDiffuse(v11)(Graphics_Babylon_HemisphericLight.hemisphericLightToLight(v10))();
                                              })();
                                              var v9 = (function __do() {
                                                  var v9 = Graphics_Babylon_Vector3.createVector3(0.3)(-1.0)(0.5)();
                                                  var v10 = Graphics_Babylon_DirectionalLight.createDirectionalLight("light1")(v9)(v3)();
                                                  var v11 = Graphics_Babylon_Color3.createColor3(0.8)(0.8)(0.8)();
                                                  Graphics_Babylon_Light.setDiffuse(v11)(Graphics_Babylon_DirectionalLight.directionalLightToLight(v10))();
                                                  var v12 = Graphics_Babylon_ShadowGenerator.createShadowGenerator(v1.shadowMapSize)(v10)();
                                                  Graphics_Babylon_ShadowGenerator.setBias(5.0e-6)(v12)();
                                                  Graphics_Babylon_ShadowGenerator.setUsePoissonSampling(true)(v12)();
                                                  return Graphics_Babylon_ShadowGenerator.getShadowMap(v12)();
                                              })();
                                              var v10 = (function __do() {
                                                  var v10 = Graphics_Babylon_Mesh.createBox("cursor")(1.0)(v3)();
                                                  Graphics_Babylon_AbstractMesh.setRenderingGroupId(1)(Graphics_Babylon_Mesh.meshToAbstractMesh(v10))();
                                                  Graphics_Babylon_AbstractMesh.setIsPickable(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v10))();
                                                  Graphics_Babylon_AbstractMesh.setIsVisible(false)(Graphics_Babylon_Mesh.meshToAbstractMesh(v10))();
                                                  var v11 = Graphics_Babylon_StandardMaterial.createStandardMaterial("cursormat")(v3)();
                                                  Graphics_Babylon_Material.setWireframe(true)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v11))();
                                                  Graphics_Babylon_Material.setZOffset(-1.0e-2)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v11))();
                                                  Graphics_Babylon_AbstractMesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v11))(Graphics_Babylon_Mesh.meshToAbstractMesh(v10))();
                                                  return v10;
                                              })();
                                              var v11 = (function __do() {
                                                  var v11 = Graphics_Babylon_CubeTexture.createCubeTexture("skybox/skybox")(v3)();
                                                  Graphics_Babylon_Texture.setCoordinatesMode(Graphics_Babylon_Texture.sKYBOX_MODE)(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v11))();
                                                  var v12 = Graphics_Babylon_StandardMaterial.createStandardMaterial("skyBox/skybox")(v3)();
                                                  Graphics_Babylon_Material.setFogEnabled(false)(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v12))();
                                                  Graphics_Babylon_StandardMaterial.setBackFaceCulling(false)(v12)();
                                                  Graphics_Babylon_StandardMaterial.setDisableLighting(true)(v12)();
                                                  var v13 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                                                  Graphics_Babylon_StandardMaterial.setDiffuseColor(v13)(v12)();
                                                  var v14 = Graphics_Babylon_Color3.createColor3(0.0)(0.0)(0.0)();
                                                  Graphics_Babylon_StandardMaterial.setSpecularColor(v14)(v12)();
                                                  Graphics_Babylon_StandardMaterial.setReflectionTexture(Graphics_Babylon_CubeTexture.cubeTextureToTexture(v11))(v12)();
                                                  var v15 = Graphics_Babylon_Mesh.createBox("skybox")(1000.0)(v3)();
                                                  Graphics_Babylon_AbstractMesh.setRenderingGroupId(Game_Cubbit_Constants.skyBoxRenderingGruop)(Graphics_Babylon_Mesh.meshToAbstractMesh(v15))();
                                                  Graphics_Babylon_AbstractMesh.setMaterial(Graphics_Babylon_StandardMaterial.standardMaterialToMaterial(v12))(Graphics_Babylon_Mesh.meshToAbstractMesh(v15))();
                                                  Graphics_Babylon_Mesh.setInfiniteDistance(true)(v15)();
                                                  return v15;
                                              })();
                                              var v12 = Game_Cubbit_Materials.initializeMaterials(v3)(v11)(v4)(v5)(v1)();
                                              var v13 = Game_Cubbit_Terrain.emptyTerrain(0)();
                                              var v14 = Control_Monad_Eff_Ref.newRef({
                                                  mode: Game_Cubbit_Types.Move.value, 
                                                  terrain: v13, 
                                                  mousePosition: {
                                                      x: 0, 
                                                      y: 0
                                                  }, 
                                                  debugLayer: false, 
                                                  yaw: 0.0, 
                                                  pitch: 0.0, 
                                                  position: {
                                                      x: 0.5, 
                                                      y: 10.0, 
                                                      z: 0.5
                                                  }, 
                                                  velocity: {
                                                      x: 0.0, 
                                                      y: 0.2, 
                                                      z: 0.0
                                                  }, 
                                                  minimap: false, 
                                                  totalFrames: 0, 
                                                  playerMeshes: v6, 
                                                  updateIndex: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
                                              })();
                                              Game_Cubbit_UI.initializeUI(canvasGL)(canvas2d)(v14)(v10)(v8)(v7)(v3)(v12)();
                                              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(v6)(function (mesh) {
                                                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                                                      var v15 = Graphics_Babylon_Vector3.createVector3(0.5)(13.0)(0.5)();
                                                      Graphics_Babylon_AbstractMesh.setPosition(v15)(mesh)();
                                                      Graphics_Babylon_AbstractMesh.setRenderingGroupId(1)(mesh)();
                                                      Graphics_Babylon_AbstractMesh.setReceiveShadows(true)(mesh)();
                                                      var v16 = Graphics_Babylon_AbstractMesh.getSkeleton(mesh)();
                                                      Graphics_Babylon_Scene.beginAnimation(v16)(0)(30)(true)(1.0)(Data_Nullable.toNullable(Data_Maybe.Nothing.value))(Data_Nullable.toNullable(Data_Maybe.Nothing.value))(v3)();
                                                      return Graphics_Babylon_AbstractMesh.setMaterial(v12.cellShadingMaterial)(mesh)();
                                                  });
                                              })();
                                              Game_Cubbit_Event.onKeyDown(function (e) {
                                                  return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(e.keyCode === 32)(Control_Monad_Eff_Ref.modifyRef(v14)(function (v15) {
                                                      var $99 = {};
                                                      for (var $100 in v15) {
                                                          if (v15.hasOwnProperty($100)) {
                                                              $99[$100] = v15[$100];
                                                          };
                                                      };
                                                      $99.velocity = {
                                                          x: v15.velocity.x, 
                                                          y: v15.velocity.y + 0.15, 
                                                          z: v15.velocity.z
                                                      };
                                                      return $99;
                                                  }));
                                              })();
                                              Control_Monad_Eff.forE(-1)(1)(function (x) {
                                                  return Control_Monad_Eff.forE(-1)(1)(function (z) {
                                                      return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
                                                          var index = Game_Cubbit_ChunkIndex.chunkIndex(x)(0)(z);
                                                          return Game_Cubbit_MeshBuilder.createChunkMesh(v14)(v12)(v3)(index);
                                                      })());
                                                  });
                                              })();
                                              return Graphics_Babylon_Engine.runRenderLoop(function __do() {
                                                  Game_Cubbit_Update.update(v14)(v3)(v12)(v9)(v10)(v8)(v1)();
                                                  return Graphics_Babylon_Scene.render(v3)();
                                              })(v2)();
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          })));
      };
  };
  var main = Graphics_Babylon.onDOMContentLoaded(function __do() {
      var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)(Graphics_Babylon.querySelectorCanvas("#renderCanvas"))();
      var v1 = Graphics_Canvas.getCanvasElementById("canvas2d")();
      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
          return runApp(v.value0)(v1.value0)();
      };
      return Control_Monad_Eff_Console.error("canvasGL not found")();
  });
  exports["main"] = main;
})(PS["Game.Cubbit.Main"] = PS["Game.Cubbit.Main"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Game_Cubbit_Main = PS["Game.Cubbit.Main"];
  var Game_Cubbit_Types = PS["Game.Cubbit.Types"];        
  var main = Game_Cubbit_Main.main;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();